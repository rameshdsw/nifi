/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Describes the dynamic properties supported by this component
 */
@Schema(description = "Describes the dynamic properties supported by this component")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class DynamicProperty {
  @JsonProperty("description")
  private String description = null;

  /**
   * The scope of the expression language support
   */
  public enum ExpressionLanguageScopeEnum {
    NONE("NONE"),
    ENVIRONMENT("ENVIRONMENT"),
    FLOWFILE_ATTRIBUTES("FLOWFILE_ATTRIBUTES");

    private String value;

    ExpressionLanguageScopeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ExpressionLanguageScopeEnum fromValue(String input) {
      for (ExpressionLanguageScopeEnum b : ExpressionLanguageScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("expressionLanguageScope")
  private ExpressionLanguageScopeEnum expressionLanguageScope = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("value")
  private String value = null;

  public DynamicProperty description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the dynamic property
   * @return description
  **/
  @Schema(description = "The description of the dynamic property")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DynamicProperty expressionLanguageScope(ExpressionLanguageScopeEnum expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
    return this;
  }

   /**
   * The scope of the expression language support
   * @return expressionLanguageScope
  **/
  @Schema(description = "The scope of the expression language support")
  public ExpressionLanguageScopeEnum getExpressionLanguageScope() {
    return expressionLanguageScope;
  }

  public void setExpressionLanguageScope(ExpressionLanguageScopeEnum expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
  }

  public DynamicProperty name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The description of the dynamic property name
   * @return name
  **/
  @Schema(description = "The description of the dynamic property name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DynamicProperty value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The description of the dynamic property value
   * @return value
  **/
  @Schema(description = "The description of the dynamic property value")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicProperty dynamicProperty = (DynamicProperty) o;
    return Objects.equals(this.description, dynamicProperty.description) &&
        Objects.equals(this.expressionLanguageScope, dynamicProperty.expressionLanguageScope) &&
        Objects.equals(this.name, dynamicProperty.name) &&
        Objects.equals(this.value, dynamicProperty.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, expressionLanguageScope, name, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicProperty {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expressionLanguageScope: ").append(toIndentedString(expressionLanguageScope)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.apache.nifi.api.toolkit.model.ActionDTO;
/**
 * The actions.
 */
@Schema(description = "The actions.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ActionEntity {
  @JsonProperty("action")
  private ActionDTO action = null;

  @JsonProperty("canRead")
  private Boolean canRead = null;

  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("sourceId")
  private String sourceId = null;

  @JsonProperty("timestamp")
  private String timestamp = null;

  public ActionEntity action(ActionDTO action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @Schema(description = "")
  public ActionDTO getAction() {
    return action;
  }

  public void setAction(ActionDTO action) {
    this.action = action;
  }

   /**
   * Indicates whether the user can read a given resource.
   * @return canRead
  **/
  @Schema(description = "Indicates whether the user can read a given resource.")
  public Boolean isCanRead() {
    return canRead;
  }

  public ActionEntity id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ActionEntity sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @Schema(description = "")
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }

  public ActionEntity timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp of the action.
   * @return timestamp
  **/
  @Schema(description = "The timestamp of the action.")
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionEntity actionEntity = (ActionEntity) o;
    return Objects.equals(this.action, actionEntity.action) &&
        Objects.equals(this.canRead, actionEntity.canRead) &&
        Objects.equals(this.id, actionEntity.id) &&
        Objects.equals(this.sourceId, actionEntity.sourceId) &&
        Objects.equals(this.timestamp, actionEntity.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, canRead, id, sourceId, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionEntity {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    canRead: ").append(toIndentedString(canRead)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ResourceClaimDetailsDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ResourceClaimDetailsDTO {
  @JsonProperty("awaitingDestruction")
  private Boolean awaitingDestruction = null;

  @JsonProperty("claimantCount")
  private Integer claimantCount = null;

  @JsonProperty("container")
  private String container = null;

  @JsonProperty("identifier")
  private String identifier = null;

  @JsonProperty("inUse")
  private Boolean inUse = null;

  @JsonProperty("section")
  private String section = null;

  @JsonProperty("writable")
  private Boolean writable = null;

  public ResourceClaimDetailsDTO awaitingDestruction(Boolean awaitingDestruction) {
    this.awaitingDestruction = awaitingDestruction;
    return this;
  }

   /**
   * Whether or not the Resource Claim is awaiting destruction
   * @return awaitingDestruction
  **/
  @Schema(description = "Whether or not the Resource Claim is awaiting destruction")
  public Boolean isAwaitingDestruction() {
    return awaitingDestruction;
  }

  public void setAwaitingDestruction(Boolean awaitingDestruction) {
    this.awaitingDestruction = awaitingDestruction;
  }

  public ResourceClaimDetailsDTO claimantCount(Integer claimantCount) {
    this.claimantCount = claimantCount;
    return this;
  }

   /**
   * The number of FlowFiles that have a claim to the Resource
   * @return claimantCount
  **/
  @Schema(description = "The number of FlowFiles that have a claim to the Resource")
  public Integer getClaimantCount() {
    return claimantCount;
  }

  public void setClaimantCount(Integer claimantCount) {
    this.claimantCount = claimantCount;
  }

  public ResourceClaimDetailsDTO container(String container) {
    this.container = container;
    return this;
  }

   /**
   * The container of the Content Repository in which the Resource Claim exists
   * @return container
  **/
  @Schema(description = "The container of the Content Repository in which the Resource Claim exists")
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }

  public ResourceClaimDetailsDTO identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The identifier of the Resource Claim
   * @return identifier
  **/
  @Schema(description = "The identifier of the Resource Claim")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public ResourceClaimDetailsDTO inUse(Boolean inUse) {
    this.inUse = inUse;
    return this;
  }

   /**
   * Whether or not the Resource Claim is in use
   * @return inUse
  **/
  @Schema(description = "Whether or not the Resource Claim is in use")
  public Boolean isInUse() {
    return inUse;
  }

  public void setInUse(Boolean inUse) {
    this.inUse = inUse;
  }

  public ResourceClaimDetailsDTO section(String section) {
    this.section = section;
    return this;
  }

   /**
   * The section of the Content Repository in which the Resource Claim exists
   * @return section
  **/
  @Schema(description = "The section of the Content Repository in which the Resource Claim exists")
  public String getSection() {
    return section;
  }

  public void setSection(String section) {
    this.section = section;
  }

  public ResourceClaimDetailsDTO writable(Boolean writable) {
    this.writable = writable;
    return this;
  }

   /**
   * Whether or not the Resource Claim can still have more data written to it
   * @return writable
  **/
  @Schema(description = "Whether or not the Resource Claim can still have more data written to it")
  public Boolean isWritable() {
    return writable;
  }

  public void setWritable(Boolean writable) {
    this.writable = writable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceClaimDetailsDTO resourceClaimDetailsDTO = (ResourceClaimDetailsDTO) o;
    return Objects.equals(this.awaitingDestruction, resourceClaimDetailsDTO.awaitingDestruction) &&
        Objects.equals(this.claimantCount, resourceClaimDetailsDTO.claimantCount) &&
        Objects.equals(this.container, resourceClaimDetailsDTO.container) &&
        Objects.equals(this.identifier, resourceClaimDetailsDTO.identifier) &&
        Objects.equals(this.inUse, resourceClaimDetailsDTO.inUse) &&
        Objects.equals(this.section, resourceClaimDetailsDTO.section) &&
        Objects.equals(this.writable, resourceClaimDetailsDTO.writable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awaitingDestruction, claimantCount, container, identifier, inUse, section, writable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceClaimDetailsDTO {\n");
    
    sb.append("    awaitingDestruction: ").append(toIndentedString(awaitingDestruction)).append("\n");
    sb.append("    claimantCount: ").append(toIndentedString(claimantCount)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    writable: ").append(toIndentedString(writable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

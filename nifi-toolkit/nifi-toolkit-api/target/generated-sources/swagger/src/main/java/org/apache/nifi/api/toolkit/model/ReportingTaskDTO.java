/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.nifi.api.toolkit.model.BundleDTO;
import org.apache.nifi.api.toolkit.model.PositionDTO;
import org.apache.nifi.api.toolkit.model.PropertyDescriptorDTO;
/**
 * ReportingTaskDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ReportingTaskDTO {
  @JsonProperty("activeThreadCount")
  private Integer activeThreadCount = null;

  @JsonProperty("annotationData")
  private String annotationData = null;

  @JsonProperty("bundle")
  private BundleDTO bundle = null;

  @JsonProperty("comments")
  private String comments = null;

  @JsonProperty("customUiUrl")
  private String customUiUrl = null;

  @JsonProperty("defaultSchedulingPeriod")
  private Map<String, String> defaultSchedulingPeriod = null;

  @JsonProperty("deprecated")
  private Boolean deprecated = null;

  @JsonProperty("descriptors")
  private Map<String, PropertyDescriptorDTO> descriptors = null;

  @JsonProperty("extensionMissing")
  private Boolean extensionMissing = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("multipleVersionsAvailable")
  private Boolean multipleVersionsAvailable = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parentGroupId")
  private String parentGroupId = null;

  @JsonProperty("persistsState")
  private Boolean persistsState = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  @JsonProperty("restricted")
  private Boolean restricted = null;

  @JsonProperty("schedulingPeriod")
  private String schedulingPeriod = null;

  @JsonProperty("schedulingStrategy")
  private String schedulingStrategy = null;

  @JsonProperty("sensitiveDynamicPropertyNames")
  private List<String> sensitiveDynamicPropertyNames = null;

  /**
   * The state of the reporting task.
   */
  public enum StateEnum {
    RUNNING("RUNNING"),
    STOPPED("STOPPED"),
    DISABLED("DISABLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("supportsSensitiveDynamicProperties")
  private Boolean supportsSensitiveDynamicProperties = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("validationErrors")
  private List<String> validationErrors = null;

  /**
   * Indicates whether the Reporting Task is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Reporting Task is valid)
   */
  public enum ValidationStatusEnum {
    VALID("VALID"),
    INVALID("INVALID"),
    VALIDATING("VALIDATING");

    private String value;

    ValidationStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ValidationStatusEnum fromValue(String input) {
      for (ValidationStatusEnum b : ValidationStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("validationStatus")
  private ValidationStatusEnum validationStatus = null;

  @JsonProperty("versionedComponentId")
  private String versionedComponentId = null;

  public ReportingTaskDTO activeThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
    return this;
  }

   /**
   * The number of active threads for the reporting task.
   * @return activeThreadCount
  **/
  @Schema(description = "The number of active threads for the reporting task.")
  public Integer getActiveThreadCount() {
    return activeThreadCount;
  }

  public void setActiveThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
  }

  public ReportingTaskDTO annotationData(String annotationData) {
    this.annotationData = annotationData;
    return this;
  }

   /**
   * The annotation data for the repoting task. This is how the custom UI relays configuration to the reporting task.
   * @return annotationData
  **/
  @Schema(description = "The annotation data for the repoting task. This is how the custom UI relays configuration to the reporting task.")
  public String getAnnotationData() {
    return annotationData;
  }

  public void setAnnotationData(String annotationData) {
    this.annotationData = annotationData;
  }

  public ReportingTaskDTO bundle(BundleDTO bundle) {
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @Schema(description = "")
  public BundleDTO getBundle() {
    return bundle;
  }

  public void setBundle(BundleDTO bundle) {
    this.bundle = bundle;
  }

  public ReportingTaskDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments of the reporting task.
   * @return comments
  **/
  @Schema(description = "The comments of the reporting task.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public ReportingTaskDTO customUiUrl(String customUiUrl) {
    this.customUiUrl = customUiUrl;
    return this;
  }

   /**
   * The URL for the custom configuration UI for the reporting task.
   * @return customUiUrl
  **/
  @Schema(description = "The URL for the custom configuration UI for the reporting task.")
  public String getCustomUiUrl() {
    return customUiUrl;
  }

  public void setCustomUiUrl(String customUiUrl) {
    this.customUiUrl = customUiUrl;
  }

  public ReportingTaskDTO defaultSchedulingPeriod(Map<String, String> defaultSchedulingPeriod) {
    this.defaultSchedulingPeriod = defaultSchedulingPeriod;
    return this;
  }

  public ReportingTaskDTO putDefaultSchedulingPeriodItem(String key, String defaultSchedulingPeriodItem) {
    if (this.defaultSchedulingPeriod == null) {
      this.defaultSchedulingPeriod = new HashMap<>();
    }
    this.defaultSchedulingPeriod.put(key, defaultSchedulingPeriodItem);
    return this;
  }

   /**
   * The default scheduling period for the different scheduling strategies.
   * @return defaultSchedulingPeriod
  **/
  @Schema(description = "The default scheduling period for the different scheduling strategies.")
  public Map<String, String> getDefaultSchedulingPeriod() {
    return defaultSchedulingPeriod;
  }

  public void setDefaultSchedulingPeriod(Map<String, String> defaultSchedulingPeriod) {
    this.defaultSchedulingPeriod = defaultSchedulingPeriod;
  }

  public ReportingTaskDTO deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * Whether the reporting task has been deprecated.
   * @return deprecated
  **/
  @Schema(description = "Whether the reporting task has been deprecated.")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public ReportingTaskDTO descriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
    return this;
  }

  public ReportingTaskDTO putDescriptorsItem(String key, PropertyDescriptorDTO descriptorsItem) {
    if (this.descriptors == null) {
      this.descriptors = new HashMap<>();
    }
    this.descriptors.put(key, descriptorsItem);
    return this;
  }

   /**
   * The descriptors for the reporting tasks properties.
   * @return descriptors
  **/
  @Schema(description = "The descriptors for the reporting tasks properties.")
  public Map<String, PropertyDescriptorDTO> getDescriptors() {
    return descriptors;
  }

  public void setDescriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
  }

  public ReportingTaskDTO extensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
    return this;
  }

   /**
   * Whether the underlying extension is missing.
   * @return extensionMissing
  **/
  @Schema(description = "Whether the underlying extension is missing.")
  public Boolean isExtensionMissing() {
    return extensionMissing;
  }

  public void setExtensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
  }

  public ReportingTaskDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ReportingTaskDTO multipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
    return this;
  }

   /**
   * Whether the reporting task has multiple versions available.
   * @return multipleVersionsAvailable
  **/
  @Schema(description = "Whether the reporting task has multiple versions available.")
  public Boolean isMultipleVersionsAvailable() {
    return multipleVersionsAvailable;
  }

  public void setMultipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
  }

  public ReportingTaskDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the reporting task.
   * @return name
  **/
  @Schema(description = "The name of the reporting task.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ReportingTaskDTO parentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * The id of parent process group of this component if applicable.
   * @return parentGroupId
  **/
  @Schema(description = "The id of parent process group of this component if applicable.")
  public String getParentGroupId() {
    return parentGroupId;
  }

  public void setParentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
  }

  public ReportingTaskDTO persistsState(Boolean persistsState) {
    this.persistsState = persistsState;
    return this;
  }

   /**
   * Whether the reporting task persists state.
   * @return persistsState
  **/
  @Schema(description = "Whether the reporting task persists state.")
  public Boolean isPersistsState() {
    return persistsState;
  }

  public void setPersistsState(Boolean persistsState) {
    this.persistsState = persistsState;
  }

  public ReportingTaskDTO position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public ReportingTaskDTO properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ReportingTaskDTO putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties of the reporting task.
   * @return properties
  **/
  @Schema(description = "The properties of the reporting task.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public ReportingTaskDTO restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Whether the reporting task requires elevated privileges.
   * @return restricted
  **/
  @Schema(description = "Whether the reporting task requires elevated privileges.")
  public Boolean isRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }

  public ReportingTaskDTO schedulingPeriod(String schedulingPeriod) {
    this.schedulingPeriod = schedulingPeriod;
    return this;
  }

   /**
   * The frequency with which to schedule the reporting task. The format of the value will depend on the value of the schedulingStrategy.
   * @return schedulingPeriod
  **/
  @Schema(description = "The frequency with which to schedule the reporting task. The format of the value will depend on the value of the schedulingStrategy.")
  public String getSchedulingPeriod() {
    return schedulingPeriod;
  }

  public void setSchedulingPeriod(String schedulingPeriod) {
    this.schedulingPeriod = schedulingPeriod;
  }

  public ReportingTaskDTO schedulingStrategy(String schedulingStrategy) {
    this.schedulingStrategy = schedulingStrategy;
    return this;
  }

   /**
   * The scheduling strategy that determines how the schedulingPeriod value should be interpreted.
   * @return schedulingStrategy
  **/
  @Schema(description = "The scheduling strategy that determines how the schedulingPeriod value should be interpreted.")
  public String getSchedulingStrategy() {
    return schedulingStrategy;
  }

  public void setSchedulingStrategy(String schedulingStrategy) {
    this.schedulingStrategy = schedulingStrategy;
  }

  public ReportingTaskDTO sensitiveDynamicPropertyNames(List<String> sensitiveDynamicPropertyNames) {
    this.sensitiveDynamicPropertyNames = sensitiveDynamicPropertyNames;
    return this;
  }

  public ReportingTaskDTO addSensitiveDynamicPropertyNamesItem(String sensitiveDynamicPropertyNamesItem) {
    if (this.sensitiveDynamicPropertyNames == null) {
      this.sensitiveDynamicPropertyNames = new ArrayList<>();
    }
    this.sensitiveDynamicPropertyNames.add(sensitiveDynamicPropertyNamesItem);
    return this;
  }

   /**
   * Set of sensitive dynamic property names
   * @return sensitiveDynamicPropertyNames
  **/
  @Schema(description = "Set of sensitive dynamic property names")
  public List<String> getSensitiveDynamicPropertyNames() {
    return sensitiveDynamicPropertyNames;
  }

  public void setSensitiveDynamicPropertyNames(List<String> sensitiveDynamicPropertyNames) {
    this.sensitiveDynamicPropertyNames = sensitiveDynamicPropertyNames;
  }

  public ReportingTaskDTO state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the reporting task.
   * @return state
  **/
  @Schema(description = "The state of the reporting task.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ReportingTaskDTO supportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
    return this;
  }

   /**
   * Whether the reporting task supports sensitive dynamic properties.
   * @return supportsSensitiveDynamicProperties
  **/
  @Schema(description = "Whether the reporting task supports sensitive dynamic properties.")
  public Boolean isSupportsSensitiveDynamicProperties() {
    return supportsSensitiveDynamicProperties;
  }

  public void setSupportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
  }

  public ReportingTaskDTO type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The fully qualified type of the reporting task.
   * @return type
  **/
  @Schema(description = "The fully qualified type of the reporting task.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ReportingTaskDTO validationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public ReportingTaskDTO addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * Gets the validation errors from the reporting task. These validation errors represent the problems with the reporting task that must be resolved before it can be scheduled to run.
   * @return validationErrors
  **/
  @Schema(description = "Gets the validation errors from the reporting task. These validation errors represent the problems with the reporting task that must be resolved before it can be scheduled to run.")
  public List<String> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
  }

   /**
   * Indicates whether the Reporting Task is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Reporting Task is valid)
   * @return validationStatus
  **/
  @Schema(description = "Indicates whether the Reporting Task is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Reporting Task is valid)")
  public ValidationStatusEnum getValidationStatus() {
    return validationStatus;
  }

  public ReportingTaskDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @Schema(description = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportingTaskDTO reportingTaskDTO = (ReportingTaskDTO) o;
    return Objects.equals(this.activeThreadCount, reportingTaskDTO.activeThreadCount) &&
        Objects.equals(this.annotationData, reportingTaskDTO.annotationData) &&
        Objects.equals(this.bundle, reportingTaskDTO.bundle) &&
        Objects.equals(this.comments, reportingTaskDTO.comments) &&
        Objects.equals(this.customUiUrl, reportingTaskDTO.customUiUrl) &&
        Objects.equals(this.defaultSchedulingPeriod, reportingTaskDTO.defaultSchedulingPeriod) &&
        Objects.equals(this.deprecated, reportingTaskDTO.deprecated) &&
        Objects.equals(this.descriptors, reportingTaskDTO.descriptors) &&
        Objects.equals(this.extensionMissing, reportingTaskDTO.extensionMissing) &&
        Objects.equals(this.id, reportingTaskDTO.id) &&
        Objects.equals(this.multipleVersionsAvailable, reportingTaskDTO.multipleVersionsAvailable) &&
        Objects.equals(this.name, reportingTaskDTO.name) &&
        Objects.equals(this.parentGroupId, reportingTaskDTO.parentGroupId) &&
        Objects.equals(this.persistsState, reportingTaskDTO.persistsState) &&
        Objects.equals(this.position, reportingTaskDTO.position) &&
        Objects.equals(this.properties, reportingTaskDTO.properties) &&
        Objects.equals(this.restricted, reportingTaskDTO.restricted) &&
        Objects.equals(this.schedulingPeriod, reportingTaskDTO.schedulingPeriod) &&
        Objects.equals(this.schedulingStrategy, reportingTaskDTO.schedulingStrategy) &&
        Objects.equals(this.sensitiveDynamicPropertyNames, reportingTaskDTO.sensitiveDynamicPropertyNames) &&
        Objects.equals(this.state, reportingTaskDTO.state) &&
        Objects.equals(this.supportsSensitiveDynamicProperties, reportingTaskDTO.supportsSensitiveDynamicProperties) &&
        Objects.equals(this.type, reportingTaskDTO.type) &&
        Objects.equals(this.validationErrors, reportingTaskDTO.validationErrors) &&
        Objects.equals(this.validationStatus, reportingTaskDTO.validationStatus) &&
        Objects.equals(this.versionedComponentId, reportingTaskDTO.versionedComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThreadCount, annotationData, bundle, comments, customUiUrl, defaultSchedulingPeriod, deprecated, descriptors, extensionMissing, id, multipleVersionsAvailable, name, parentGroupId, persistsState, position, properties, restricted, schedulingPeriod, schedulingStrategy, sensitiveDynamicPropertyNames, state, supportsSensitiveDynamicProperties, type, validationErrors, validationStatus, versionedComponentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportingTaskDTO {\n");
    
    sb.append("    activeThreadCount: ").append(toIndentedString(activeThreadCount)).append("\n");
    sb.append("    annotationData: ").append(toIndentedString(annotationData)).append("\n");
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    customUiUrl: ").append(toIndentedString(customUiUrl)).append("\n");
    sb.append("    defaultSchedulingPeriod: ").append(toIndentedString(defaultSchedulingPeriod)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    descriptors: ").append(toIndentedString(descriptors)).append("\n");
    sb.append("    extensionMissing: ").append(toIndentedString(extensionMissing)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    multipleVersionsAvailable: ").append(toIndentedString(multipleVersionsAvailable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    persistsState: ").append(toIndentedString(persistsState)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    schedulingPeriod: ").append(toIndentedString(schedulingPeriod)).append("\n");
    sb.append("    schedulingStrategy: ").append(toIndentedString(schedulingStrategy)).append("\n");
    sb.append("    sensitiveDynamicPropertyNames: ").append(toIndentedString(sensitiveDynamicPropertyNames)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    supportsSensitiveDynamicProperties: ").append(toIndentedString(supportsSensitiveDynamicProperties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

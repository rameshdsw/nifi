/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * CopyRequestEntity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class CopyRequestEntity {
  @JsonProperty("connections")
  private List<String> connections = null;

  @JsonProperty("funnels")
  private List<String> funnels = null;

  @JsonProperty("inputPorts")
  private List<String> inputPorts = null;

  @JsonProperty("labels")
  private List<String> labels = null;

  @JsonProperty("outputPorts")
  private List<String> outputPorts = null;

  @JsonProperty("processGroups")
  private List<String> processGroups = null;

  @JsonProperty("processors")
  private List<String> processors = null;

  @JsonProperty("remoteProcessGroups")
  private List<String> remoteProcessGroups = null;

  public CopyRequestEntity connections(List<String> connections) {
    this.connections = connections;
    return this;
  }

  public CopyRequestEntity addConnectionsItem(String connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

   /**
   * The ids of the connections to be copied.
   * @return connections
  **/
  @Schema(description = "The ids of the connections to be copied.")
  public List<String> getConnections() {
    return connections;
  }

  public void setConnections(List<String> connections) {
    this.connections = connections;
  }

  public CopyRequestEntity funnels(List<String> funnels) {
    this.funnels = funnels;
    return this;
  }

  public CopyRequestEntity addFunnelsItem(String funnelsItem) {
    if (this.funnels == null) {
      this.funnels = new ArrayList<>();
    }
    this.funnels.add(funnelsItem);
    return this;
  }

   /**
   * The ids of the funnels to be copied.
   * @return funnels
  **/
  @Schema(description = "The ids of the funnels to be copied.")
  public List<String> getFunnels() {
    return funnels;
  }

  public void setFunnels(List<String> funnels) {
    this.funnels = funnels;
  }

  public CopyRequestEntity inputPorts(List<String> inputPorts) {
    this.inputPorts = inputPorts;
    return this;
  }

  public CopyRequestEntity addInputPortsItem(String inputPortsItem) {
    if (this.inputPorts == null) {
      this.inputPorts = new ArrayList<>();
    }
    this.inputPorts.add(inputPortsItem);
    return this;
  }

   /**
   * The ids of the input ports to be copied.
   * @return inputPorts
  **/
  @Schema(description = "The ids of the input ports to be copied.")
  public List<String> getInputPorts() {
    return inputPorts;
  }

  public void setInputPorts(List<String> inputPorts) {
    this.inputPorts = inputPorts;
  }

  public CopyRequestEntity labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public CopyRequestEntity addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * The ids of the labels to be copied.
   * @return labels
  **/
  @Schema(description = "The ids of the labels to be copied.")
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }

  public CopyRequestEntity outputPorts(List<String> outputPorts) {
    this.outputPorts = outputPorts;
    return this;
  }

  public CopyRequestEntity addOutputPortsItem(String outputPortsItem) {
    if (this.outputPorts == null) {
      this.outputPorts = new ArrayList<>();
    }
    this.outputPorts.add(outputPortsItem);
    return this;
  }

   /**
   * The ids of the output ports to be copied.
   * @return outputPorts
  **/
  @Schema(description = "The ids of the output ports to be copied.")
  public List<String> getOutputPorts() {
    return outputPorts;
  }

  public void setOutputPorts(List<String> outputPorts) {
    this.outputPorts = outputPorts;
  }

  public CopyRequestEntity processGroups(List<String> processGroups) {
    this.processGroups = processGroups;
    return this;
  }

  public CopyRequestEntity addProcessGroupsItem(String processGroupsItem) {
    if (this.processGroups == null) {
      this.processGroups = new ArrayList<>();
    }
    this.processGroups.add(processGroupsItem);
    return this;
  }

   /**
   * The ids of the process groups to be copied.
   * @return processGroups
  **/
  @Schema(description = "The ids of the process groups to be copied.")
  public List<String> getProcessGroups() {
    return processGroups;
  }

  public void setProcessGroups(List<String> processGroups) {
    this.processGroups = processGroups;
  }

  public CopyRequestEntity processors(List<String> processors) {
    this.processors = processors;
    return this;
  }

  public CopyRequestEntity addProcessorsItem(String processorsItem) {
    if (this.processors == null) {
      this.processors = new ArrayList<>();
    }
    this.processors.add(processorsItem);
    return this;
  }

   /**
   * The ids of the processors to be copied.
   * @return processors
  **/
  @Schema(description = "The ids of the processors to be copied.")
  public List<String> getProcessors() {
    return processors;
  }

  public void setProcessors(List<String> processors) {
    this.processors = processors;
  }

  public CopyRequestEntity remoteProcessGroups(List<String> remoteProcessGroups) {
    this.remoteProcessGroups = remoteProcessGroups;
    return this;
  }

  public CopyRequestEntity addRemoteProcessGroupsItem(String remoteProcessGroupsItem) {
    if (this.remoteProcessGroups == null) {
      this.remoteProcessGroups = new ArrayList<>();
    }
    this.remoteProcessGroups.add(remoteProcessGroupsItem);
    return this;
  }

   /**
   * The ids of the remote process groups to be copied.
   * @return remoteProcessGroups
  **/
  @Schema(description = "The ids of the remote process groups to be copied.")
  public List<String> getRemoteProcessGroups() {
    return remoteProcessGroups;
  }

  public void setRemoteProcessGroups(List<String> remoteProcessGroups) {
    this.remoteProcessGroups = remoteProcessGroups;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyRequestEntity copyRequestEntity = (CopyRequestEntity) o;
    return Objects.equals(this.connections, copyRequestEntity.connections) &&
        Objects.equals(this.funnels, copyRequestEntity.funnels) &&
        Objects.equals(this.inputPorts, copyRequestEntity.inputPorts) &&
        Objects.equals(this.labels, copyRequestEntity.labels) &&
        Objects.equals(this.outputPorts, copyRequestEntity.outputPorts) &&
        Objects.equals(this.processGroups, copyRequestEntity.processGroups) &&
        Objects.equals(this.processors, copyRequestEntity.processors) &&
        Objects.equals(this.remoteProcessGroups, copyRequestEntity.remoteProcessGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connections, funnels, inputPorts, labels, outputPorts, processGroups, processors, remoteProcessGroups);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyRequestEntity {\n");
    
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    funnels: ").append(toIndentedString(funnels)).append("\n");
    sb.append("    inputPorts: ").append(toIndentedString(inputPorts)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    outputPorts: ").append(toIndentedString(outputPorts)).append("\n");
    sb.append("    processGroups: ").append(toIndentedString(processGroups)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    remoteProcessGroups: ").append(toIndentedString(remoteProcessGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

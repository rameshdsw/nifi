/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.DocumentedTypeDTO;
import org.apache.nifi.api.toolkit.model.NarCoordinateDTO;
import org.apache.nifi.api.toolkit.model.NarSummaryDTO;
/**
 * NarDetailsEntity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class NarDetailsEntity {
  @JsonProperty("controllerServiceTypes")
  private List<DocumentedTypeDTO> controllerServiceTypes = null;

  @JsonProperty("dependentCoordinates")
  private List<NarCoordinateDTO> dependentCoordinates = null;

  @JsonProperty("flowAnalysisRuleTypes")
  private List<DocumentedTypeDTO> flowAnalysisRuleTypes = null;

  @JsonProperty("flowRegistryClientTypes")
  private List<DocumentedTypeDTO> flowRegistryClientTypes = null;

  @JsonProperty("narSummary")
  private NarSummaryDTO narSummary = null;

  @JsonProperty("parameterProviderTypes")
  private List<DocumentedTypeDTO> parameterProviderTypes = null;

  @JsonProperty("processorTypes")
  private List<DocumentedTypeDTO> processorTypes = null;

  @JsonProperty("reportingTaskTypes")
  private List<DocumentedTypeDTO> reportingTaskTypes = null;

  public NarDetailsEntity controllerServiceTypes(List<DocumentedTypeDTO> controllerServiceTypes) {
    this.controllerServiceTypes = controllerServiceTypes;
    return this;
  }

  public NarDetailsEntity addControllerServiceTypesItem(DocumentedTypeDTO controllerServiceTypesItem) {
    if (this.controllerServiceTypes == null) {
      this.controllerServiceTypes = new ArrayList<>();
    }
    this.controllerServiceTypes.add(controllerServiceTypesItem);
    return this;
  }

   /**
   * The ControllerService types contained in the NAR
   * @return controllerServiceTypes
  **/
  @Schema(description = "The ControllerService types contained in the NAR")
  public List<DocumentedTypeDTO> getControllerServiceTypes() {
    return controllerServiceTypes;
  }

  public void setControllerServiceTypes(List<DocumentedTypeDTO> controllerServiceTypes) {
    this.controllerServiceTypes = controllerServiceTypes;
  }

  public NarDetailsEntity dependentCoordinates(List<NarCoordinateDTO> dependentCoordinates) {
    this.dependentCoordinates = dependentCoordinates;
    return this;
  }

  public NarDetailsEntity addDependentCoordinatesItem(NarCoordinateDTO dependentCoordinatesItem) {
    if (this.dependentCoordinates == null) {
      this.dependentCoordinates = new ArrayList<>();
    }
    this.dependentCoordinates.add(dependentCoordinatesItem);
    return this;
  }

   /**
   * The coordinates of NARs that depend on this NAR
   * @return dependentCoordinates
  **/
  @Schema(description = "The coordinates of NARs that depend on this NAR")
  public List<NarCoordinateDTO> getDependentCoordinates() {
    return dependentCoordinates;
  }

  public void setDependentCoordinates(List<NarCoordinateDTO> dependentCoordinates) {
    this.dependentCoordinates = dependentCoordinates;
  }

  public NarDetailsEntity flowAnalysisRuleTypes(List<DocumentedTypeDTO> flowAnalysisRuleTypes) {
    this.flowAnalysisRuleTypes = flowAnalysisRuleTypes;
    return this;
  }

  public NarDetailsEntity addFlowAnalysisRuleTypesItem(DocumentedTypeDTO flowAnalysisRuleTypesItem) {
    if (this.flowAnalysisRuleTypes == null) {
      this.flowAnalysisRuleTypes = new ArrayList<>();
    }
    this.flowAnalysisRuleTypes.add(flowAnalysisRuleTypesItem);
    return this;
  }

   /**
   * The FlowAnalysisRule types contained in the NAR
   * @return flowAnalysisRuleTypes
  **/
  @Schema(description = "The FlowAnalysisRule types contained in the NAR")
  public List<DocumentedTypeDTO> getFlowAnalysisRuleTypes() {
    return flowAnalysisRuleTypes;
  }

  public void setFlowAnalysisRuleTypes(List<DocumentedTypeDTO> flowAnalysisRuleTypes) {
    this.flowAnalysisRuleTypes = flowAnalysisRuleTypes;
  }

  public NarDetailsEntity flowRegistryClientTypes(List<DocumentedTypeDTO> flowRegistryClientTypes) {
    this.flowRegistryClientTypes = flowRegistryClientTypes;
    return this;
  }

  public NarDetailsEntity addFlowRegistryClientTypesItem(DocumentedTypeDTO flowRegistryClientTypesItem) {
    if (this.flowRegistryClientTypes == null) {
      this.flowRegistryClientTypes = new ArrayList<>();
    }
    this.flowRegistryClientTypes.add(flowRegistryClientTypesItem);
    return this;
  }

   /**
   * The FlowRegistryClient types contained in the NAR
   * @return flowRegistryClientTypes
  **/
  @Schema(description = "The FlowRegistryClient types contained in the NAR")
  public List<DocumentedTypeDTO> getFlowRegistryClientTypes() {
    return flowRegistryClientTypes;
  }

  public void setFlowRegistryClientTypes(List<DocumentedTypeDTO> flowRegistryClientTypes) {
    this.flowRegistryClientTypes = flowRegistryClientTypes;
  }

  public NarDetailsEntity narSummary(NarSummaryDTO narSummary) {
    this.narSummary = narSummary;
    return this;
  }

   /**
   * Get narSummary
   * @return narSummary
  **/
  @Schema(description = "")
  public NarSummaryDTO getNarSummary() {
    return narSummary;
  }

  public void setNarSummary(NarSummaryDTO narSummary) {
    this.narSummary = narSummary;
  }

  public NarDetailsEntity parameterProviderTypes(List<DocumentedTypeDTO> parameterProviderTypes) {
    this.parameterProviderTypes = parameterProviderTypes;
    return this;
  }

  public NarDetailsEntity addParameterProviderTypesItem(DocumentedTypeDTO parameterProviderTypesItem) {
    if (this.parameterProviderTypes == null) {
      this.parameterProviderTypes = new ArrayList<>();
    }
    this.parameterProviderTypes.add(parameterProviderTypesItem);
    return this;
  }

   /**
   * The ParameterProvider types contained in the NAR
   * @return parameterProviderTypes
  **/
  @Schema(description = "The ParameterProvider types contained in the NAR")
  public List<DocumentedTypeDTO> getParameterProviderTypes() {
    return parameterProviderTypes;
  }

  public void setParameterProviderTypes(List<DocumentedTypeDTO> parameterProviderTypes) {
    this.parameterProviderTypes = parameterProviderTypes;
  }

  public NarDetailsEntity processorTypes(List<DocumentedTypeDTO> processorTypes) {
    this.processorTypes = processorTypes;
    return this;
  }

  public NarDetailsEntity addProcessorTypesItem(DocumentedTypeDTO processorTypesItem) {
    if (this.processorTypes == null) {
      this.processorTypes = new ArrayList<>();
    }
    this.processorTypes.add(processorTypesItem);
    return this;
  }

   /**
   * The Processor types contained in the NAR
   * @return processorTypes
  **/
  @Schema(description = "The Processor types contained in the NAR")
  public List<DocumentedTypeDTO> getProcessorTypes() {
    return processorTypes;
  }

  public void setProcessorTypes(List<DocumentedTypeDTO> processorTypes) {
    this.processorTypes = processorTypes;
  }

  public NarDetailsEntity reportingTaskTypes(List<DocumentedTypeDTO> reportingTaskTypes) {
    this.reportingTaskTypes = reportingTaskTypes;
    return this;
  }

  public NarDetailsEntity addReportingTaskTypesItem(DocumentedTypeDTO reportingTaskTypesItem) {
    if (this.reportingTaskTypes == null) {
      this.reportingTaskTypes = new ArrayList<>();
    }
    this.reportingTaskTypes.add(reportingTaskTypesItem);
    return this;
  }

   /**
   * The ReportingTask types contained in the NAR
   * @return reportingTaskTypes
  **/
  @Schema(description = "The ReportingTask types contained in the NAR")
  public List<DocumentedTypeDTO> getReportingTaskTypes() {
    return reportingTaskTypes;
  }

  public void setReportingTaskTypes(List<DocumentedTypeDTO> reportingTaskTypes) {
    this.reportingTaskTypes = reportingTaskTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NarDetailsEntity narDetailsEntity = (NarDetailsEntity) o;
    return Objects.equals(this.controllerServiceTypes, narDetailsEntity.controllerServiceTypes) &&
        Objects.equals(this.dependentCoordinates, narDetailsEntity.dependentCoordinates) &&
        Objects.equals(this.flowAnalysisRuleTypes, narDetailsEntity.flowAnalysisRuleTypes) &&
        Objects.equals(this.flowRegistryClientTypes, narDetailsEntity.flowRegistryClientTypes) &&
        Objects.equals(this.narSummary, narDetailsEntity.narSummary) &&
        Objects.equals(this.parameterProviderTypes, narDetailsEntity.parameterProviderTypes) &&
        Objects.equals(this.processorTypes, narDetailsEntity.processorTypes) &&
        Objects.equals(this.reportingTaskTypes, narDetailsEntity.reportingTaskTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controllerServiceTypes, dependentCoordinates, flowAnalysisRuleTypes, flowRegistryClientTypes, narSummary, parameterProviderTypes, processorTypes, reportingTaskTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NarDetailsEntity {\n");
    
    sb.append("    controllerServiceTypes: ").append(toIndentedString(controllerServiceTypes)).append("\n");
    sb.append("    dependentCoordinates: ").append(toIndentedString(dependentCoordinates)).append("\n");
    sb.append("    flowAnalysisRuleTypes: ").append(toIndentedString(flowAnalysisRuleTypes)).append("\n");
    sb.append("    flowRegistryClientTypes: ").append(toIndentedString(flowRegistryClientTypes)).append("\n");
    sb.append("    narSummary: ").append(toIndentedString(narSummary)).append("\n");
    sb.append("    parameterProviderTypes: ").append(toIndentedString(parameterProviderTypes)).append("\n");
    sb.append("    processorTypes: ").append(toIndentedString(processorTypes)).append("\n");
    sb.append("    reportingTaskTypes: ").append(toIndentedString(reportingTaskTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.BulletinEntity;
import org.apache.nifi.api.toolkit.model.ParameterContextReferenceEntity;
import org.apache.nifi.api.toolkit.model.PermissionsDTO;
import org.apache.nifi.api.toolkit.model.PositionDTO;
import org.apache.nifi.api.toolkit.model.ProcessGroupDTO;
import org.apache.nifi.api.toolkit.model.ProcessGroupStatusDTO;
import org.apache.nifi.api.toolkit.model.RegisteredFlowSnapshot;
import org.apache.nifi.api.toolkit.model.RevisionDTO;
/**
 * ProcessGroupEntity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ProcessGroupEntity {
  @JsonProperty("activeRemotePortCount")
  private Integer activeRemotePortCount = null;

  @JsonProperty("bulletins")
  private List<BulletinEntity> bulletins = null;

  @JsonProperty("component")
  private ProcessGroupDTO component = null;

  @JsonProperty("disabledCount")
  private Integer disabledCount = null;

  @JsonProperty("disconnectedNodeAcknowledged")
  private Boolean disconnectedNodeAcknowledged = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("inactiveRemotePortCount")
  private Integer inactiveRemotePortCount = null;

  @JsonProperty("inputPortCount")
  private Integer inputPortCount = null;

  @JsonProperty("invalidCount")
  private Integer invalidCount = null;

  @JsonProperty("localInputPortCount")
  private Integer localInputPortCount = null;

  @JsonProperty("localOutputPortCount")
  private Integer localOutputPortCount = null;

  @JsonProperty("locallyModifiedAndStaleCount")
  private Integer locallyModifiedAndStaleCount = null;

  @JsonProperty("locallyModifiedCount")
  private Integer locallyModifiedCount = null;

  @JsonProperty("outputPortCount")
  private Integer outputPortCount = null;

  @JsonProperty("parameterContext")
  private ParameterContextReferenceEntity parameterContext = null;

  @JsonProperty("permissions")
  private PermissionsDTO permissions = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  /**
   * Determines the process group update strategy
   */
  public enum ProcessGroupUpdateStrategyEnum {
    GROUP("CURRENT_GROUP"),
    GROUP_WITH_CHILDREN("CURRENT_GROUP_WITH_CHILDREN");

    private String value;

    ProcessGroupUpdateStrategyEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ProcessGroupUpdateStrategyEnum fromValue(String input) {
      for (ProcessGroupUpdateStrategyEnum b : ProcessGroupUpdateStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("processGroupUpdateStrategy")
  private ProcessGroupUpdateStrategyEnum processGroupUpdateStrategy = null;

  @JsonProperty("publicInputPortCount")
  private Integer publicInputPortCount = null;

  @JsonProperty("publicOutputPortCount")
  private Integer publicOutputPortCount = null;

  @JsonProperty("revision")
  private RevisionDTO revision = null;

  @JsonProperty("runningCount")
  private Integer runningCount = null;

  @JsonProperty("staleCount")
  private Integer staleCount = null;

  @JsonProperty("status")
  private ProcessGroupStatusDTO status = null;

  @JsonProperty("stoppedCount")
  private Integer stoppedCount = null;

  @JsonProperty("syncFailureCount")
  private Integer syncFailureCount = null;

  @JsonProperty("upToDateCount")
  private Integer upToDateCount = null;

  @JsonProperty("uri")
  private String uri = null;

  @JsonProperty("versionedFlowSnapshot")
  private RegisteredFlowSnapshot versionedFlowSnapshot = null;

  /**
   * The current state of the Process Group, as it relates to the Versioned Flow
   */
  public enum VersionedFlowStateEnum {
    LOCALLY_MODIFIED("LOCALLY_MODIFIED"),
    STALE("STALE"),
    LOCALLY_MODIFIED_AND_STALE("LOCALLY_MODIFIED_AND_STALE"),
    UP_TO_DATE("UP_TO_DATE"),
    SYNC_FAILURE("SYNC_FAILURE");

    private String value;

    VersionedFlowStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static VersionedFlowStateEnum fromValue(String input) {
      for (VersionedFlowStateEnum b : VersionedFlowStateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("versionedFlowState")
  private VersionedFlowStateEnum versionedFlowState = null;

  public ProcessGroupEntity activeRemotePortCount(Integer activeRemotePortCount) {
    this.activeRemotePortCount = activeRemotePortCount;
    return this;
  }

   /**
   * The number of active remote ports in the process group.
   * @return activeRemotePortCount
  **/
  @Schema(description = "The number of active remote ports in the process group.")
  public Integer getActiveRemotePortCount() {
    return activeRemotePortCount;
  }

  public void setActiveRemotePortCount(Integer activeRemotePortCount) {
    this.activeRemotePortCount = activeRemotePortCount;
  }

  public ProcessGroupEntity bulletins(List<BulletinEntity> bulletins) {
    this.bulletins = bulletins;
    return this;
  }

  public ProcessGroupEntity addBulletinsItem(BulletinEntity bulletinsItem) {
    if (this.bulletins == null) {
      this.bulletins = new ArrayList<>();
    }
    this.bulletins.add(bulletinsItem);
    return this;
  }

   /**
   * The bulletins for this component.
   * @return bulletins
  **/
  @Schema(description = "The bulletins for this component.")
  public List<BulletinEntity> getBulletins() {
    return bulletins;
  }

  public void setBulletins(List<BulletinEntity> bulletins) {
    this.bulletins = bulletins;
  }

  public ProcessGroupEntity component(ProcessGroupDTO component) {
    this.component = component;
    return this;
  }

   /**
   * Get component
   * @return component
  **/
  @Schema(description = "")
  public ProcessGroupDTO getComponent() {
    return component;
  }

  public void setComponent(ProcessGroupDTO component) {
    this.component = component;
  }

  public ProcessGroupEntity disabledCount(Integer disabledCount) {
    this.disabledCount = disabledCount;
    return this;
  }

   /**
   * The number of disabled components in the process group.
   * @return disabledCount
  **/
  @Schema(description = "The number of disabled components in the process group.")
  public Integer getDisabledCount() {
    return disabledCount;
  }

  public void setDisabledCount(Integer disabledCount) {
    this.disabledCount = disabledCount;
  }

  public ProcessGroupEntity disconnectedNodeAcknowledged(Boolean disconnectedNodeAcknowledged) {
    this.disconnectedNodeAcknowledged = disconnectedNodeAcknowledged;
    return this;
  }

   /**
   * Acknowledges that this node is disconnected to allow for mutable requests to proceed.
   * @return disconnectedNodeAcknowledged
  **/
  @Schema(description = "Acknowledges that this node is disconnected to allow for mutable requests to proceed.")
  public Boolean isDisconnectedNodeAcknowledged() {
    return disconnectedNodeAcknowledged;
  }

  public void setDisconnectedNodeAcknowledged(Boolean disconnectedNodeAcknowledged) {
    this.disconnectedNodeAcknowledged = disconnectedNodeAcknowledged;
  }

  public ProcessGroupEntity id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProcessGroupEntity inactiveRemotePortCount(Integer inactiveRemotePortCount) {
    this.inactiveRemotePortCount = inactiveRemotePortCount;
    return this;
  }

   /**
   * The number of inactive remote ports in the process group.
   * @return inactiveRemotePortCount
  **/
  @Schema(description = "The number of inactive remote ports in the process group.")
  public Integer getInactiveRemotePortCount() {
    return inactiveRemotePortCount;
  }

  public void setInactiveRemotePortCount(Integer inactiveRemotePortCount) {
    this.inactiveRemotePortCount = inactiveRemotePortCount;
  }

   /**
   * The number of input ports in the process group.
   * @return inputPortCount
  **/
  @Schema(description = "The number of input ports in the process group.")
  public Integer getInputPortCount() {
    return inputPortCount;
  }

  public ProcessGroupEntity invalidCount(Integer invalidCount) {
    this.invalidCount = invalidCount;
    return this;
  }

   /**
   * The number of invalid components in the process group.
   * @return invalidCount
  **/
  @Schema(description = "The number of invalid components in the process group.")
  public Integer getInvalidCount() {
    return invalidCount;
  }

  public void setInvalidCount(Integer invalidCount) {
    this.invalidCount = invalidCount;
  }

  public ProcessGroupEntity localInputPortCount(Integer localInputPortCount) {
    this.localInputPortCount = localInputPortCount;
    return this;
  }

   /**
   * The number of local input ports in the process group.
   * @return localInputPortCount
  **/
  @Schema(description = "The number of local input ports in the process group.")
  public Integer getLocalInputPortCount() {
    return localInputPortCount;
  }

  public void setLocalInputPortCount(Integer localInputPortCount) {
    this.localInputPortCount = localInputPortCount;
  }

  public ProcessGroupEntity localOutputPortCount(Integer localOutputPortCount) {
    this.localOutputPortCount = localOutputPortCount;
    return this;
  }

   /**
   * The number of local output ports in the process group.
   * @return localOutputPortCount
  **/
  @Schema(description = "The number of local output ports in the process group.")
  public Integer getLocalOutputPortCount() {
    return localOutputPortCount;
  }

  public void setLocalOutputPortCount(Integer localOutputPortCount) {
    this.localOutputPortCount = localOutputPortCount;
  }

  public ProcessGroupEntity locallyModifiedAndStaleCount(Integer locallyModifiedAndStaleCount) {
    this.locallyModifiedAndStaleCount = locallyModifiedAndStaleCount;
    return this;
  }

   /**
   * The number of locally modified and stale versioned process groups in the process group.
   * @return locallyModifiedAndStaleCount
  **/
  @Schema(description = "The number of locally modified and stale versioned process groups in the process group.")
  public Integer getLocallyModifiedAndStaleCount() {
    return locallyModifiedAndStaleCount;
  }

  public void setLocallyModifiedAndStaleCount(Integer locallyModifiedAndStaleCount) {
    this.locallyModifiedAndStaleCount = locallyModifiedAndStaleCount;
  }

  public ProcessGroupEntity locallyModifiedCount(Integer locallyModifiedCount) {
    this.locallyModifiedCount = locallyModifiedCount;
    return this;
  }

   /**
   * The number of locally modified versioned process groups in the process group.
   * @return locallyModifiedCount
  **/
  @Schema(description = "The number of locally modified versioned process groups in the process group.")
  public Integer getLocallyModifiedCount() {
    return locallyModifiedCount;
  }

  public void setLocallyModifiedCount(Integer locallyModifiedCount) {
    this.locallyModifiedCount = locallyModifiedCount;
  }

   /**
   * The number of output ports in the process group.
   * @return outputPortCount
  **/
  @Schema(description = "The number of output ports in the process group.")
  public Integer getOutputPortCount() {
    return outputPortCount;
  }

  public ProcessGroupEntity parameterContext(ParameterContextReferenceEntity parameterContext) {
    this.parameterContext = parameterContext;
    return this;
  }

   /**
   * Get parameterContext
   * @return parameterContext
  **/
  @Schema(description = "")
  public ParameterContextReferenceEntity getParameterContext() {
    return parameterContext;
  }

  public void setParameterContext(ParameterContextReferenceEntity parameterContext) {
    this.parameterContext = parameterContext;
  }

  public ProcessGroupEntity permissions(PermissionsDTO permissions) {
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(description = "")
  public PermissionsDTO getPermissions() {
    return permissions;
  }

  public void setPermissions(PermissionsDTO permissions) {
    this.permissions = permissions;
  }

  public ProcessGroupEntity position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public ProcessGroupEntity processGroupUpdateStrategy(ProcessGroupUpdateStrategyEnum processGroupUpdateStrategy) {
    this.processGroupUpdateStrategy = processGroupUpdateStrategy;
    return this;
  }

   /**
   * Determines the process group update strategy
   * @return processGroupUpdateStrategy
  **/
  @Schema(description = "Determines the process group update strategy")
  public ProcessGroupUpdateStrategyEnum getProcessGroupUpdateStrategy() {
    return processGroupUpdateStrategy;
  }

  public void setProcessGroupUpdateStrategy(ProcessGroupUpdateStrategyEnum processGroupUpdateStrategy) {
    this.processGroupUpdateStrategy = processGroupUpdateStrategy;
  }

  public ProcessGroupEntity publicInputPortCount(Integer publicInputPortCount) {
    this.publicInputPortCount = publicInputPortCount;
    return this;
  }

   /**
   * The number of public input ports in the process group.
   * @return publicInputPortCount
  **/
  @Schema(description = "The number of public input ports in the process group.")
  public Integer getPublicInputPortCount() {
    return publicInputPortCount;
  }

  public void setPublicInputPortCount(Integer publicInputPortCount) {
    this.publicInputPortCount = publicInputPortCount;
  }

  public ProcessGroupEntity publicOutputPortCount(Integer publicOutputPortCount) {
    this.publicOutputPortCount = publicOutputPortCount;
    return this;
  }

   /**
   * The number of public output ports in the process group.
   * @return publicOutputPortCount
  **/
  @Schema(description = "The number of public output ports in the process group.")
  public Integer getPublicOutputPortCount() {
    return publicOutputPortCount;
  }

  public void setPublicOutputPortCount(Integer publicOutputPortCount) {
    this.publicOutputPortCount = publicOutputPortCount;
  }

  public ProcessGroupEntity revision(RevisionDTO revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Get revision
   * @return revision
  **/
  @Schema(description = "")
  public RevisionDTO getRevision() {
    return revision;
  }

  public void setRevision(RevisionDTO revision) {
    this.revision = revision;
  }

  public ProcessGroupEntity runningCount(Integer runningCount) {
    this.runningCount = runningCount;
    return this;
  }

   /**
   * The number of running components in this process group.
   * @return runningCount
  **/
  @Schema(description = "The number of running components in this process group.")
  public Integer getRunningCount() {
    return runningCount;
  }

  public void setRunningCount(Integer runningCount) {
    this.runningCount = runningCount;
  }

  public ProcessGroupEntity staleCount(Integer staleCount) {
    this.staleCount = staleCount;
    return this;
  }

   /**
   * The number of stale versioned process groups in the process group.
   * @return staleCount
  **/
  @Schema(description = "The number of stale versioned process groups in the process group.")
  public Integer getStaleCount() {
    return staleCount;
  }

  public void setStaleCount(Integer staleCount) {
    this.staleCount = staleCount;
  }

  public ProcessGroupEntity status(ProcessGroupStatusDTO status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public ProcessGroupStatusDTO getStatus() {
    return status;
  }

  public void setStatus(ProcessGroupStatusDTO status) {
    this.status = status;
  }

  public ProcessGroupEntity stoppedCount(Integer stoppedCount) {
    this.stoppedCount = stoppedCount;
    return this;
  }

   /**
   * The number of stopped components in the process group.
   * @return stoppedCount
  **/
  @Schema(description = "The number of stopped components in the process group.")
  public Integer getStoppedCount() {
    return stoppedCount;
  }

  public void setStoppedCount(Integer stoppedCount) {
    this.stoppedCount = stoppedCount;
  }

  public ProcessGroupEntity syncFailureCount(Integer syncFailureCount) {
    this.syncFailureCount = syncFailureCount;
    return this;
  }

   /**
   * The number of versioned process groups in the process group that are unable to sync to a registry.
   * @return syncFailureCount
  **/
  @Schema(description = "The number of versioned process groups in the process group that are unable to sync to a registry.")
  public Integer getSyncFailureCount() {
    return syncFailureCount;
  }

  public void setSyncFailureCount(Integer syncFailureCount) {
    this.syncFailureCount = syncFailureCount;
  }

  public ProcessGroupEntity upToDateCount(Integer upToDateCount) {
    this.upToDateCount = upToDateCount;
    return this;
  }

   /**
   * The number of up to date versioned process groups in the process group.
   * @return upToDateCount
  **/
  @Schema(description = "The number of up to date versioned process groups in the process group.")
  public Integer getUpToDateCount() {
    return upToDateCount;
  }

  public void setUpToDateCount(Integer upToDateCount) {
    this.upToDateCount = upToDateCount;
  }

  public ProcessGroupEntity uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * The URI for futures requests to the component.
   * @return uri
  **/
  @Schema(description = "The URI for futures requests to the component.")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public ProcessGroupEntity versionedFlowSnapshot(RegisteredFlowSnapshot versionedFlowSnapshot) {
    this.versionedFlowSnapshot = versionedFlowSnapshot;
    return this;
  }

   /**
   * Get versionedFlowSnapshot
   * @return versionedFlowSnapshot
  **/
  @Schema(description = "")
  public RegisteredFlowSnapshot getVersionedFlowSnapshot() {
    return versionedFlowSnapshot;
  }

  public void setVersionedFlowSnapshot(RegisteredFlowSnapshot versionedFlowSnapshot) {
    this.versionedFlowSnapshot = versionedFlowSnapshot;
  }

   /**
   * The current state of the Process Group, as it relates to the Versioned Flow
   * @return versionedFlowState
  **/
  @Schema(description = "The current state of the Process Group, as it relates to the Versioned Flow")
  public VersionedFlowStateEnum getVersionedFlowState() {
    return versionedFlowState;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessGroupEntity processGroupEntity = (ProcessGroupEntity) o;
    return Objects.equals(this.activeRemotePortCount, processGroupEntity.activeRemotePortCount) &&
        Objects.equals(this.bulletins, processGroupEntity.bulletins) &&
        Objects.equals(this.component, processGroupEntity.component) &&
        Objects.equals(this.disabledCount, processGroupEntity.disabledCount) &&
        Objects.equals(this.disconnectedNodeAcknowledged, processGroupEntity.disconnectedNodeAcknowledged) &&
        Objects.equals(this.id, processGroupEntity.id) &&
        Objects.equals(this.inactiveRemotePortCount, processGroupEntity.inactiveRemotePortCount) &&
        Objects.equals(this.inputPortCount, processGroupEntity.inputPortCount) &&
        Objects.equals(this.invalidCount, processGroupEntity.invalidCount) &&
        Objects.equals(this.localInputPortCount, processGroupEntity.localInputPortCount) &&
        Objects.equals(this.localOutputPortCount, processGroupEntity.localOutputPortCount) &&
        Objects.equals(this.locallyModifiedAndStaleCount, processGroupEntity.locallyModifiedAndStaleCount) &&
        Objects.equals(this.locallyModifiedCount, processGroupEntity.locallyModifiedCount) &&
        Objects.equals(this.outputPortCount, processGroupEntity.outputPortCount) &&
        Objects.equals(this.parameterContext, processGroupEntity.parameterContext) &&
        Objects.equals(this.permissions, processGroupEntity.permissions) &&
        Objects.equals(this.position, processGroupEntity.position) &&
        Objects.equals(this.processGroupUpdateStrategy, processGroupEntity.processGroupUpdateStrategy) &&
        Objects.equals(this.publicInputPortCount, processGroupEntity.publicInputPortCount) &&
        Objects.equals(this.publicOutputPortCount, processGroupEntity.publicOutputPortCount) &&
        Objects.equals(this.revision, processGroupEntity.revision) &&
        Objects.equals(this.runningCount, processGroupEntity.runningCount) &&
        Objects.equals(this.staleCount, processGroupEntity.staleCount) &&
        Objects.equals(this.status, processGroupEntity.status) &&
        Objects.equals(this.stoppedCount, processGroupEntity.stoppedCount) &&
        Objects.equals(this.syncFailureCount, processGroupEntity.syncFailureCount) &&
        Objects.equals(this.upToDateCount, processGroupEntity.upToDateCount) &&
        Objects.equals(this.uri, processGroupEntity.uri) &&
        Objects.equals(this.versionedFlowSnapshot, processGroupEntity.versionedFlowSnapshot) &&
        Objects.equals(this.versionedFlowState, processGroupEntity.versionedFlowState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeRemotePortCount, bulletins, component, disabledCount, disconnectedNodeAcknowledged, id, inactiveRemotePortCount, inputPortCount, invalidCount, localInputPortCount, localOutputPortCount, locallyModifiedAndStaleCount, locallyModifiedCount, outputPortCount, parameterContext, permissions, position, processGroupUpdateStrategy, publicInputPortCount, publicOutputPortCount, revision, runningCount, staleCount, status, stoppedCount, syncFailureCount, upToDateCount, uri, versionedFlowSnapshot, versionedFlowState);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessGroupEntity {\n");
    
    sb.append("    activeRemotePortCount: ").append(toIndentedString(activeRemotePortCount)).append("\n");
    sb.append("    bulletins: ").append(toIndentedString(bulletins)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    disabledCount: ").append(toIndentedString(disabledCount)).append("\n");
    sb.append("    disconnectedNodeAcknowledged: ").append(toIndentedString(disconnectedNodeAcknowledged)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inactiveRemotePortCount: ").append(toIndentedString(inactiveRemotePortCount)).append("\n");
    sb.append("    inputPortCount: ").append(toIndentedString(inputPortCount)).append("\n");
    sb.append("    invalidCount: ").append(toIndentedString(invalidCount)).append("\n");
    sb.append("    localInputPortCount: ").append(toIndentedString(localInputPortCount)).append("\n");
    sb.append("    localOutputPortCount: ").append(toIndentedString(localOutputPortCount)).append("\n");
    sb.append("    locallyModifiedAndStaleCount: ").append(toIndentedString(locallyModifiedAndStaleCount)).append("\n");
    sb.append("    locallyModifiedCount: ").append(toIndentedString(locallyModifiedCount)).append("\n");
    sb.append("    outputPortCount: ").append(toIndentedString(outputPortCount)).append("\n");
    sb.append("    parameterContext: ").append(toIndentedString(parameterContext)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    processGroupUpdateStrategy: ").append(toIndentedString(processGroupUpdateStrategy)).append("\n");
    sb.append("    publicInputPortCount: ").append(toIndentedString(publicInputPortCount)).append("\n");
    sb.append("    publicOutputPortCount: ").append(toIndentedString(publicOutputPortCount)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    runningCount: ").append(toIndentedString(runningCount)).append("\n");
    sb.append("    staleCount: ").append(toIndentedString(staleCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stoppedCount: ").append(toIndentedString(stoppedCount)).append("\n");
    sb.append("    syncFailureCount: ").append(toIndentedString(syncFailureCount)).append("\n");
    sb.append("    upToDateCount: ").append(toIndentedString(upToDateCount)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    versionedFlowSnapshot: ").append(toIndentedString(versionedFlowSnapshot)).append("\n");
    sb.append("    versionedFlowState: ").append(toIndentedString(versionedFlowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * CounterDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class CounterDTO {
  @JsonProperty("context")
  private String context = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("value")
  private String value = null;

  @JsonProperty("valueCount")
  private Long valueCount = null;

  public CounterDTO context(String context) {
    this.context = context;
    return this;
  }

   /**
   * The context of the counter.
   * @return context
  **/
  @Schema(description = "The context of the counter.")
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }

  public CounterDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the counter.
   * @return id
  **/
  @Schema(description = "The id of the counter.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CounterDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the counter.
   * @return name
  **/
  @Schema(description = "The name of the counter.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CounterDTO value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the counter.
   * @return value
  **/
  @Schema(description = "The value of the counter.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public CounterDTO valueCount(Long valueCount) {
    this.valueCount = valueCount;
    return this;
  }

   /**
   * The value count.
   * @return valueCount
  **/
  @Schema(description = "The value count.")
  public Long getValueCount() {
    return valueCount;
  }

  public void setValueCount(Long valueCount) {
    this.valueCount = valueCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterDTO counterDTO = (CounterDTO) o;
    return Objects.equals(this.context, counterDTO.context) &&
        Objects.equals(this.id, counterDTO.id) &&
        Objects.equals(this.name, counterDTO.name) &&
        Objects.equals(this.value, counterDTO.value) &&
        Objects.equals(this.valueCount, counterDTO.valueCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, id, name, value, valueCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterDTO {\n");
    
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueCount: ").append(toIndentedString(valueCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

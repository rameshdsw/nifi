/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The status for this FlowAnalysisRule.
 */
@Schema(description = "The status for this FlowAnalysisRule.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class FlowAnalysisRuleStatusDTO {
  @JsonProperty("activeThreadCount")
  private Integer activeThreadCount = null;

  /**
   * The run status of this FlowAnalysisRule
   */
  public enum RunStatusEnum {
    ENABLED("ENABLED"),
    DISABLED("DISABLED");

    private String value;

    RunStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RunStatusEnum fromValue(String input) {
      for (RunStatusEnum b : RunStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("runStatus")
  private RunStatusEnum runStatus = null;

  /**
   * Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
   */
  public enum ValidationStatusEnum {
    VALID("VALID"),
    INVALID("INVALID"),
    VALIDATING("VALIDATING");

    private String value;

    ValidationStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ValidationStatusEnum fromValue(String input) {
      for (ValidationStatusEnum b : ValidationStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("validationStatus")
  private ValidationStatusEnum validationStatus = null;

  public FlowAnalysisRuleStatusDTO activeThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
    return this;
  }

   /**
   * The number of active threads for the component.
   * @return activeThreadCount
  **/
  @Schema(description = "The number of active threads for the component.")
  public Integer getActiveThreadCount() {
    return activeThreadCount;
  }

  public void setActiveThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
  }

   /**
   * The run status of this FlowAnalysisRule
   * @return runStatus
  **/
  @Schema(description = "The run status of this FlowAnalysisRule")
  public RunStatusEnum getRunStatus() {
    return runStatus;
  }

   /**
   * Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
   * @return validationStatus
  **/
  @Schema(description = "Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)")
  public ValidationStatusEnum getValidationStatus() {
    return validationStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowAnalysisRuleStatusDTO flowAnalysisRuleStatusDTO = (FlowAnalysisRuleStatusDTO) o;
    return Objects.equals(this.activeThreadCount, flowAnalysisRuleStatusDTO.activeThreadCount) &&
        Objects.equals(this.runStatus, flowAnalysisRuleStatusDTO.runStatus) &&
        Objects.equals(this.validationStatus, flowAnalysisRuleStatusDTO.validationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThreadCount, runStatus, validationStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowAnalysisRuleStatusDTO {\n");
    
    sb.append("    activeThreadCount: ").append(toIndentedString(activeThreadCount)).append("\n");
    sb.append("    runStatus: ").append(toIndentedString(runStatus)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

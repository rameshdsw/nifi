/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.apache.nifi.api.toolkit.model.FlowRegistryPermissions;
import org.apache.nifi.api.toolkit.model.RegisteredFlowVersionInfo;
/**
 * RegisteredFlow
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class RegisteredFlow {
  @JsonProperty("branch")
  private String branch = null;

  @JsonProperty("bucketIdentifier")
  private String bucketIdentifier = null;

  @JsonProperty("bucketName")
  private String bucketName = null;

  @JsonProperty("createdTimestamp")
  private Long createdTimestamp = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("identifier")
  private String identifier = null;

  @JsonProperty("lastModifiedTimestamp")
  private Long lastModifiedTimestamp = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("permissions")
  private FlowRegistryPermissions permissions = null;

  @JsonProperty("versionCount")
  private Long versionCount = null;

  @JsonProperty("versionInfo")
  private RegisteredFlowVersionInfo versionInfo = null;

  public RegisteredFlow branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @Schema(description = "")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public RegisteredFlow bucketIdentifier(String bucketIdentifier) {
    this.bucketIdentifier = bucketIdentifier;
    return this;
  }

   /**
   * Get bucketIdentifier
   * @return bucketIdentifier
  **/
  @Schema(description = "")
  public String getBucketIdentifier() {
    return bucketIdentifier;
  }

  public void setBucketIdentifier(String bucketIdentifier) {
    this.bucketIdentifier = bucketIdentifier;
  }

  public RegisteredFlow bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

   /**
   * Get bucketName
   * @return bucketName
  **/
  @Schema(description = "")
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }

  public RegisteredFlow createdTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * Get createdTimestamp
   * @return createdTimestamp
  **/
  @Schema(description = "")
  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }

  public RegisteredFlow description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public RegisteredFlow identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @Schema(description = "")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public RegisteredFlow lastModifiedTimestamp(Long lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
    return this;
  }

   /**
   * Get lastModifiedTimestamp
   * @return lastModifiedTimestamp
  **/
  @Schema(description = "")
  public Long getLastModifiedTimestamp() {
    return lastModifiedTimestamp;
  }

  public void setLastModifiedTimestamp(Long lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
  }

  public RegisteredFlow name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public RegisteredFlow permissions(FlowRegistryPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(description = "")
  public FlowRegistryPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(FlowRegistryPermissions permissions) {
    this.permissions = permissions;
  }

  public RegisteredFlow versionCount(Long versionCount) {
    this.versionCount = versionCount;
    return this;
  }

   /**
   * Get versionCount
   * @return versionCount
  **/
  @Schema(description = "")
  public Long getVersionCount() {
    return versionCount;
  }

  public void setVersionCount(Long versionCount) {
    this.versionCount = versionCount;
  }

  public RegisteredFlow versionInfo(RegisteredFlowVersionInfo versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

   /**
   * Get versionInfo
   * @return versionInfo
  **/
  @Schema(description = "")
  public RegisteredFlowVersionInfo getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(RegisteredFlowVersionInfo versionInfo) {
    this.versionInfo = versionInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredFlow registeredFlow = (RegisteredFlow) o;
    return Objects.equals(this.branch, registeredFlow.branch) &&
        Objects.equals(this.bucketIdentifier, registeredFlow.bucketIdentifier) &&
        Objects.equals(this.bucketName, registeredFlow.bucketName) &&
        Objects.equals(this.createdTimestamp, registeredFlow.createdTimestamp) &&
        Objects.equals(this.description, registeredFlow.description) &&
        Objects.equals(this.identifier, registeredFlow.identifier) &&
        Objects.equals(this.lastModifiedTimestamp, registeredFlow.lastModifiedTimestamp) &&
        Objects.equals(this.name, registeredFlow.name) &&
        Objects.equals(this.permissions, registeredFlow.permissions) &&
        Objects.equals(this.versionCount, registeredFlow.versionCount) &&
        Objects.equals(this.versionInfo, registeredFlow.versionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, bucketIdentifier, bucketName, createdTimestamp, description, identifier, lastModifiedTimestamp, name, permissions, versionCount, versionInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredFlow {\n");
    
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    bucketIdentifier: ").append(toIndentedString(bucketIdentifier)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    lastModifiedTimestamp: ").append(toIndentedString(lastModifiedTimestamp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    versionCount: ").append(toIndentedString(versionCount)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

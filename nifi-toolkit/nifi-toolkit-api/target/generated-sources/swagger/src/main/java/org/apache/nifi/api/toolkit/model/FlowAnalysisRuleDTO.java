/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.nifi.api.toolkit.model.BundleDTO;
import org.apache.nifi.api.toolkit.model.PositionDTO;
import org.apache.nifi.api.toolkit.model.PropertyDescriptorDTO;
/**
 * FlowAnalysisRuleDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class FlowAnalysisRuleDTO {
  @JsonProperty("bundle")
  private BundleDTO bundle = null;

  @JsonProperty("comments")
  private String comments = null;

  @JsonProperty("deprecated")
  private Boolean deprecated = null;

  @JsonProperty("descriptors")
  private Map<String, PropertyDescriptorDTO> descriptors = null;

  @JsonProperty("enforcementPolicy")
  private String enforcementPolicy = null;

  @JsonProperty("extensionMissing")
  private Boolean extensionMissing = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("multipleVersionsAvailable")
  private Boolean multipleVersionsAvailable = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parentGroupId")
  private String parentGroupId = null;

  @JsonProperty("persistsState")
  private Boolean persistsState = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  @JsonProperty("restricted")
  private Boolean restricted = null;

  @JsonProperty("sensitiveDynamicPropertyNames")
  private List<String> sensitiveDynamicPropertyNames = null;

  /**
   * The state of the flow analysis rule.
   */
  public enum StateEnum {
    ENABLED("ENABLED"),
    DISABLED("DISABLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("supportsSensitiveDynamicProperties")
  private Boolean supportsSensitiveDynamicProperties = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("validationErrors")
  private List<String> validationErrors = null;

  /**
   * Indicates whether the Flow Analysis Rule is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Flow Analysis Rule is valid)
   */
  public enum ValidationStatusEnum {
    VALID("VALID"),
    INVALID("INVALID"),
    VALIDATING("VALIDATING");

    private String value;

    ValidationStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ValidationStatusEnum fromValue(String input) {
      for (ValidationStatusEnum b : ValidationStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("validationStatus")
  private ValidationStatusEnum validationStatus = null;

  @JsonProperty("versionedComponentId")
  private String versionedComponentId = null;

  public FlowAnalysisRuleDTO bundle(BundleDTO bundle) {
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @Schema(description = "")
  public BundleDTO getBundle() {
    return bundle;
  }

  public void setBundle(BundleDTO bundle) {
    this.bundle = bundle;
  }

  public FlowAnalysisRuleDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments of the flow analysis rule.
   * @return comments
  **/
  @Schema(description = "The comments of the flow analysis rule.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public FlowAnalysisRuleDTO deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * Whether the flow analysis rule has been deprecated.
   * @return deprecated
  **/
  @Schema(description = "Whether the flow analysis rule has been deprecated.")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public FlowAnalysisRuleDTO descriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
    return this;
  }

  public FlowAnalysisRuleDTO putDescriptorsItem(String key, PropertyDescriptorDTO descriptorsItem) {
    if (this.descriptors == null) {
      this.descriptors = new HashMap<>();
    }
    this.descriptors.put(key, descriptorsItem);
    return this;
  }

   /**
   * The descriptors for the flow analysis rules properties.
   * @return descriptors
  **/
  @Schema(description = "The descriptors for the flow analysis rules properties.")
  public Map<String, PropertyDescriptorDTO> getDescriptors() {
    return descriptors;
  }

  public void setDescriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
  }

  public FlowAnalysisRuleDTO enforcementPolicy(String enforcementPolicy) {
    this.enforcementPolicy = enforcementPolicy;
    return this;
  }

   /**
   * Enforcement Policy.
   * @return enforcementPolicy
  **/
  @Schema(description = "Enforcement Policy.")
  public String getEnforcementPolicy() {
    return enforcementPolicy;
  }

  public void setEnforcementPolicy(String enforcementPolicy) {
    this.enforcementPolicy = enforcementPolicy;
  }

  public FlowAnalysisRuleDTO extensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
    return this;
  }

   /**
   * Whether the underlying extension is missing.
   * @return extensionMissing
  **/
  @Schema(description = "Whether the underlying extension is missing.")
  public Boolean isExtensionMissing() {
    return extensionMissing;
  }

  public void setExtensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
  }

  public FlowAnalysisRuleDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public FlowAnalysisRuleDTO multipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
    return this;
  }

   /**
   * Whether the flow analysis rule has multiple versions available.
   * @return multipleVersionsAvailable
  **/
  @Schema(description = "Whether the flow analysis rule has multiple versions available.")
  public Boolean isMultipleVersionsAvailable() {
    return multipleVersionsAvailable;
  }

  public void setMultipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
  }

  public FlowAnalysisRuleDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the flow analysis rule.
   * @return name
  **/
  @Schema(description = "The name of the flow analysis rule.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FlowAnalysisRuleDTO parentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * The id of parent process group of this component if applicable.
   * @return parentGroupId
  **/
  @Schema(description = "The id of parent process group of this component if applicable.")
  public String getParentGroupId() {
    return parentGroupId;
  }

  public void setParentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
  }

  public FlowAnalysisRuleDTO persistsState(Boolean persistsState) {
    this.persistsState = persistsState;
    return this;
  }

   /**
   * Whether the flow analysis rule persists state.
   * @return persistsState
  **/
  @Schema(description = "Whether the flow analysis rule persists state.")
  public Boolean isPersistsState() {
    return persistsState;
  }

  public void setPersistsState(Boolean persistsState) {
    this.persistsState = persistsState;
  }

  public FlowAnalysisRuleDTO position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public FlowAnalysisRuleDTO properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public FlowAnalysisRuleDTO putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties of the flow analysis rule.
   * @return properties
  **/
  @Schema(description = "The properties of the flow analysis rule.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public FlowAnalysisRuleDTO restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Whether the flow analysis rule requires elevated privileges.
   * @return restricted
  **/
  @Schema(description = "Whether the flow analysis rule requires elevated privileges.")
  public Boolean isRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }

  public FlowAnalysisRuleDTO sensitiveDynamicPropertyNames(List<String> sensitiveDynamicPropertyNames) {
    this.sensitiveDynamicPropertyNames = sensitiveDynamicPropertyNames;
    return this;
  }

  public FlowAnalysisRuleDTO addSensitiveDynamicPropertyNamesItem(String sensitiveDynamicPropertyNamesItem) {
    if (this.sensitiveDynamicPropertyNames == null) {
      this.sensitiveDynamicPropertyNames = new ArrayList<>();
    }
    this.sensitiveDynamicPropertyNames.add(sensitiveDynamicPropertyNamesItem);
    return this;
  }

   /**
   * Set of sensitive dynamic property names
   * @return sensitiveDynamicPropertyNames
  **/
  @Schema(description = "Set of sensitive dynamic property names")
  public List<String> getSensitiveDynamicPropertyNames() {
    return sensitiveDynamicPropertyNames;
  }

  public void setSensitiveDynamicPropertyNames(List<String> sensitiveDynamicPropertyNames) {
    this.sensitiveDynamicPropertyNames = sensitiveDynamicPropertyNames;
  }

  public FlowAnalysisRuleDTO state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the flow analysis rule.
   * @return state
  **/
  @Schema(description = "The state of the flow analysis rule.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public FlowAnalysisRuleDTO supportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
    return this;
  }

   /**
   * Whether the flow analysis rule supports sensitive dynamic properties.
   * @return supportsSensitiveDynamicProperties
  **/
  @Schema(description = "Whether the flow analysis rule supports sensitive dynamic properties.")
  public Boolean isSupportsSensitiveDynamicProperties() {
    return supportsSensitiveDynamicProperties;
  }

  public void setSupportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
  }

  public FlowAnalysisRuleDTO type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The fully qualified type of the flow analysis rule.
   * @return type
  **/
  @Schema(description = "The fully qualified type of the flow analysis rule.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public FlowAnalysisRuleDTO validationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public FlowAnalysisRuleDTO addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * Gets the validation errors from the flow analysis rule. These validation errors represent the problems with the flow analysis rule that must be resolved before it can be scheduled to run.
   * @return validationErrors
  **/
  @Schema(description = "Gets the validation errors from the flow analysis rule. These validation errors represent the problems with the flow analysis rule that must be resolved before it can be scheduled to run.")
  public List<String> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
  }

   /**
   * Indicates whether the Flow Analysis Rule is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Flow Analysis Rule is valid)
   * @return validationStatus
  **/
  @Schema(description = "Indicates whether the Flow Analysis Rule is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Flow Analysis Rule is valid)")
  public ValidationStatusEnum getValidationStatus() {
    return validationStatus;
  }

  public FlowAnalysisRuleDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @Schema(description = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowAnalysisRuleDTO flowAnalysisRuleDTO = (FlowAnalysisRuleDTO) o;
    return Objects.equals(this.bundle, flowAnalysisRuleDTO.bundle) &&
        Objects.equals(this.comments, flowAnalysisRuleDTO.comments) &&
        Objects.equals(this.deprecated, flowAnalysisRuleDTO.deprecated) &&
        Objects.equals(this.descriptors, flowAnalysisRuleDTO.descriptors) &&
        Objects.equals(this.enforcementPolicy, flowAnalysisRuleDTO.enforcementPolicy) &&
        Objects.equals(this.extensionMissing, flowAnalysisRuleDTO.extensionMissing) &&
        Objects.equals(this.id, flowAnalysisRuleDTO.id) &&
        Objects.equals(this.multipleVersionsAvailable, flowAnalysisRuleDTO.multipleVersionsAvailable) &&
        Objects.equals(this.name, flowAnalysisRuleDTO.name) &&
        Objects.equals(this.parentGroupId, flowAnalysisRuleDTO.parentGroupId) &&
        Objects.equals(this.persistsState, flowAnalysisRuleDTO.persistsState) &&
        Objects.equals(this.position, flowAnalysisRuleDTO.position) &&
        Objects.equals(this.properties, flowAnalysisRuleDTO.properties) &&
        Objects.equals(this.restricted, flowAnalysisRuleDTO.restricted) &&
        Objects.equals(this.sensitiveDynamicPropertyNames, flowAnalysisRuleDTO.sensitiveDynamicPropertyNames) &&
        Objects.equals(this.state, flowAnalysisRuleDTO.state) &&
        Objects.equals(this.supportsSensitiveDynamicProperties, flowAnalysisRuleDTO.supportsSensitiveDynamicProperties) &&
        Objects.equals(this.type, flowAnalysisRuleDTO.type) &&
        Objects.equals(this.validationErrors, flowAnalysisRuleDTO.validationErrors) &&
        Objects.equals(this.validationStatus, flowAnalysisRuleDTO.validationStatus) &&
        Objects.equals(this.versionedComponentId, flowAnalysisRuleDTO.versionedComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundle, comments, deprecated, descriptors, enforcementPolicy, extensionMissing, id, multipleVersionsAvailable, name, parentGroupId, persistsState, position, properties, restricted, sensitiveDynamicPropertyNames, state, supportsSensitiveDynamicProperties, type, validationErrors, validationStatus, versionedComponentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowAnalysisRuleDTO {\n");
    
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    descriptors: ").append(toIndentedString(descriptors)).append("\n");
    sb.append("    enforcementPolicy: ").append(toIndentedString(enforcementPolicy)).append("\n");
    sb.append("    extensionMissing: ").append(toIndentedString(extensionMissing)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    multipleVersionsAvailable: ").append(toIndentedString(multipleVersionsAvailable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    persistsState: ").append(toIndentedString(persistsState)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    sensitiveDynamicPropertyNames: ").append(toIndentedString(sensitiveDynamicPropertyNames)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    supportsSensitiveDynamicProperties: ").append(toIndentedString(supportsSensitiveDynamicProperties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

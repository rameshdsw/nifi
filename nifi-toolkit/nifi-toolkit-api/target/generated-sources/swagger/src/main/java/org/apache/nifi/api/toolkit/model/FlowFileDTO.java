/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * FlowFileDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class FlowFileDTO {
  @JsonProperty("attributes")
  private Map<String, String> attributes = null;

  @JsonProperty("clusterNodeAddress")
  private String clusterNodeAddress = null;

  @JsonProperty("clusterNodeId")
  private String clusterNodeId = null;

  @JsonProperty("contentClaimContainer")
  private String contentClaimContainer = null;

  @JsonProperty("contentClaimFileSize")
  private String contentClaimFileSize = null;

  @JsonProperty("contentClaimFileSizeBytes")
  private Long contentClaimFileSizeBytes = null;

  @JsonProperty("contentClaimIdentifier")
  private String contentClaimIdentifier = null;

  @JsonProperty("contentClaimOffset")
  private Long contentClaimOffset = null;

  @JsonProperty("contentClaimSection")
  private String contentClaimSection = null;

  @JsonProperty("filename")
  private String filename = null;

  @JsonProperty("lineageDuration")
  private Long lineageDuration = null;

  @JsonProperty("mimeType")
  private String mimeType = null;

  @JsonProperty("penalized")
  private Boolean penalized = null;

  @JsonProperty("penaltyExpiresIn")
  private Long penaltyExpiresIn = null;

  @JsonProperty("position")
  private Integer position = null;

  @JsonProperty("queuedDuration")
  private Long queuedDuration = null;

  @JsonProperty("size")
  private Long size = null;

  @JsonProperty("uri")
  private String uri = null;

  @JsonProperty("uuid")
  private String uuid = null;

  public FlowFileDTO attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public FlowFileDTO putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * The FlowFile attributes.
   * @return attributes
  **/
  @Schema(description = "The FlowFile attributes.")
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }

  public FlowFileDTO clusterNodeAddress(String clusterNodeAddress) {
    this.clusterNodeAddress = clusterNodeAddress;
    return this;
  }

   /**
   * The label for the node where this FlowFile resides.
   * @return clusterNodeAddress
  **/
  @Schema(description = "The label for the node where this FlowFile resides.")
  public String getClusterNodeAddress() {
    return clusterNodeAddress;
  }

  public void setClusterNodeAddress(String clusterNodeAddress) {
    this.clusterNodeAddress = clusterNodeAddress;
  }

  public FlowFileDTO clusterNodeId(String clusterNodeId) {
    this.clusterNodeId = clusterNodeId;
    return this;
  }

   /**
   * The id of the node where this FlowFile resides.
   * @return clusterNodeId
  **/
  @Schema(description = "The id of the node where this FlowFile resides.")
  public String getClusterNodeId() {
    return clusterNodeId;
  }

  public void setClusterNodeId(String clusterNodeId) {
    this.clusterNodeId = clusterNodeId;
  }

  public FlowFileDTO contentClaimContainer(String contentClaimContainer) {
    this.contentClaimContainer = contentClaimContainer;
    return this;
  }

   /**
   * The container in which the content claim lives.
   * @return contentClaimContainer
  **/
  @Schema(description = "The container in which the content claim lives.")
  public String getContentClaimContainer() {
    return contentClaimContainer;
  }

  public void setContentClaimContainer(String contentClaimContainer) {
    this.contentClaimContainer = contentClaimContainer;
  }

  public FlowFileDTO contentClaimFileSize(String contentClaimFileSize) {
    this.contentClaimFileSize = contentClaimFileSize;
    return this;
  }

   /**
   * The file size of the content claim formatted.
   * @return contentClaimFileSize
  **/
  @Schema(description = "The file size of the content claim formatted.")
  public String getContentClaimFileSize() {
    return contentClaimFileSize;
  }

  public void setContentClaimFileSize(String contentClaimFileSize) {
    this.contentClaimFileSize = contentClaimFileSize;
  }

  public FlowFileDTO contentClaimFileSizeBytes(Long contentClaimFileSizeBytes) {
    this.contentClaimFileSizeBytes = contentClaimFileSizeBytes;
    return this;
  }

   /**
   * The file size of the content claim in bytes.
   * @return contentClaimFileSizeBytes
  **/
  @Schema(description = "The file size of the content claim in bytes.")
  public Long getContentClaimFileSizeBytes() {
    return contentClaimFileSizeBytes;
  }

  public void setContentClaimFileSizeBytes(Long contentClaimFileSizeBytes) {
    this.contentClaimFileSizeBytes = contentClaimFileSizeBytes;
  }

  public FlowFileDTO contentClaimIdentifier(String contentClaimIdentifier) {
    this.contentClaimIdentifier = contentClaimIdentifier;
    return this;
  }

   /**
   * The identifier of the content claim.
   * @return contentClaimIdentifier
  **/
  @Schema(description = "The identifier of the content claim.")
  public String getContentClaimIdentifier() {
    return contentClaimIdentifier;
  }

  public void setContentClaimIdentifier(String contentClaimIdentifier) {
    this.contentClaimIdentifier = contentClaimIdentifier;
  }

  public FlowFileDTO contentClaimOffset(Long contentClaimOffset) {
    this.contentClaimOffset = contentClaimOffset;
    return this;
  }

   /**
   * The offset into the content claim where the flowfile&#x27;s content begins.
   * @return contentClaimOffset
  **/
  @Schema(description = "The offset into the content claim where the flowfile's content begins.")
  public Long getContentClaimOffset() {
    return contentClaimOffset;
  }

  public void setContentClaimOffset(Long contentClaimOffset) {
    this.contentClaimOffset = contentClaimOffset;
  }

  public FlowFileDTO contentClaimSection(String contentClaimSection) {
    this.contentClaimSection = contentClaimSection;
    return this;
  }

   /**
   * The section in which the content claim lives.
   * @return contentClaimSection
  **/
  @Schema(description = "The section in which the content claim lives.")
  public String getContentClaimSection() {
    return contentClaimSection;
  }

  public void setContentClaimSection(String contentClaimSection) {
    this.contentClaimSection = contentClaimSection;
  }

  public FlowFileDTO filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * The FlowFile filename.
   * @return filename
  **/
  @Schema(description = "The FlowFile filename.")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public FlowFileDTO lineageDuration(Long lineageDuration) {
    this.lineageDuration = lineageDuration;
    return this;
  }

   /**
   * Duration since the FlowFile&#x27;s greatest ancestor entered the flow.
   * @return lineageDuration
  **/
  @Schema(description = "Duration since the FlowFile's greatest ancestor entered the flow.")
  public Long getLineageDuration() {
    return lineageDuration;
  }

  public void setLineageDuration(Long lineageDuration) {
    this.lineageDuration = lineageDuration;
  }

  public FlowFileDTO mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * The FlowFile mime type.
   * @return mimeType
  **/
  @Schema(description = "The FlowFile mime type.")
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  public FlowFileDTO penalized(Boolean penalized) {
    this.penalized = penalized;
    return this;
  }

   /**
   * If the FlowFile is penalized.
   * @return penalized
  **/
  @Schema(description = "If the FlowFile is penalized.")
  public Boolean isPenalized() {
    return penalized;
  }

  public void setPenalized(Boolean penalized) {
    this.penalized = penalized;
  }

  public FlowFileDTO penaltyExpiresIn(Long penaltyExpiresIn) {
    this.penaltyExpiresIn = penaltyExpiresIn;
    return this;
  }

   /**
   * How long in milliseconds until the FlowFile penalty expires.
   * @return penaltyExpiresIn
  **/
  @Schema(description = "How long in milliseconds until the FlowFile penalty expires.")
  public Long getPenaltyExpiresIn() {
    return penaltyExpiresIn;
  }

  public void setPenaltyExpiresIn(Long penaltyExpiresIn) {
    this.penaltyExpiresIn = penaltyExpiresIn;
  }

  public FlowFileDTO position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * The FlowFile&#x27;s position in the queue.
   * @return position
  **/
  @Schema(description = "The FlowFile's position in the queue.")
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }

  public FlowFileDTO queuedDuration(Long queuedDuration) {
    this.queuedDuration = queuedDuration;
    return this;
  }

   /**
   * How long this FlowFile has been enqueued.
   * @return queuedDuration
  **/
  @Schema(description = "How long this FlowFile has been enqueued.")
  public Long getQueuedDuration() {
    return queuedDuration;
  }

  public void setQueuedDuration(Long queuedDuration) {
    this.queuedDuration = queuedDuration;
  }

  public FlowFileDTO size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * The FlowFile file size.
   * @return size
  **/
  @Schema(description = "The FlowFile file size.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public FlowFileDTO uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * The URI that can be used to access this FlowFile.
   * @return uri
  **/
  @Schema(description = "The URI that can be used to access this FlowFile.")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public FlowFileDTO uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The FlowFile UUID.
   * @return uuid
  **/
  @Schema(description = "The FlowFile UUID.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowFileDTO flowFileDTO = (FlowFileDTO) o;
    return Objects.equals(this.attributes, flowFileDTO.attributes) &&
        Objects.equals(this.clusterNodeAddress, flowFileDTO.clusterNodeAddress) &&
        Objects.equals(this.clusterNodeId, flowFileDTO.clusterNodeId) &&
        Objects.equals(this.contentClaimContainer, flowFileDTO.contentClaimContainer) &&
        Objects.equals(this.contentClaimFileSize, flowFileDTO.contentClaimFileSize) &&
        Objects.equals(this.contentClaimFileSizeBytes, flowFileDTO.contentClaimFileSizeBytes) &&
        Objects.equals(this.contentClaimIdentifier, flowFileDTO.contentClaimIdentifier) &&
        Objects.equals(this.contentClaimOffset, flowFileDTO.contentClaimOffset) &&
        Objects.equals(this.contentClaimSection, flowFileDTO.contentClaimSection) &&
        Objects.equals(this.filename, flowFileDTO.filename) &&
        Objects.equals(this.lineageDuration, flowFileDTO.lineageDuration) &&
        Objects.equals(this.mimeType, flowFileDTO.mimeType) &&
        Objects.equals(this.penalized, flowFileDTO.penalized) &&
        Objects.equals(this.penaltyExpiresIn, flowFileDTO.penaltyExpiresIn) &&
        Objects.equals(this.position, flowFileDTO.position) &&
        Objects.equals(this.queuedDuration, flowFileDTO.queuedDuration) &&
        Objects.equals(this.size, flowFileDTO.size) &&
        Objects.equals(this.uri, flowFileDTO.uri) &&
        Objects.equals(this.uuid, flowFileDTO.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, clusterNodeAddress, clusterNodeId, contentClaimContainer, contentClaimFileSize, contentClaimFileSizeBytes, contentClaimIdentifier, contentClaimOffset, contentClaimSection, filename, lineageDuration, mimeType, penalized, penaltyExpiresIn, position, queuedDuration, size, uri, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowFileDTO {\n");
    
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    clusterNodeAddress: ").append(toIndentedString(clusterNodeAddress)).append("\n");
    sb.append("    clusterNodeId: ").append(toIndentedString(clusterNodeId)).append("\n");
    sb.append("    contentClaimContainer: ").append(toIndentedString(contentClaimContainer)).append("\n");
    sb.append("    contentClaimFileSize: ").append(toIndentedString(contentClaimFileSize)).append("\n");
    sb.append("    contentClaimFileSizeBytes: ").append(toIndentedString(contentClaimFileSizeBytes)).append("\n");
    sb.append("    contentClaimIdentifier: ").append(toIndentedString(contentClaimIdentifier)).append("\n");
    sb.append("    contentClaimOffset: ").append(toIndentedString(contentClaimOffset)).append("\n");
    sb.append("    contentClaimSection: ").append(toIndentedString(contentClaimSection)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    lineageDuration: ").append(toIndentedString(lineageDuration)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    penalized: ").append(toIndentedString(penalized)).append("\n");
    sb.append("    penaltyExpiresIn: ").append(toIndentedString(penaltyExpiresIn)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    queuedDuration: ").append(toIndentedString(queuedDuration)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The versioned flow
 */
@Schema(description = "The versioned flow")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class VersionedFlowDTO {
  /**
   * The action being performed
   */
  public enum ActionEnum {
    COMMIT("COMMIT"),
    FORCE_COMMIT("FORCE_COMMIT");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ActionEnum fromValue(String input) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("action")
  private ActionEnum action = null;

  @JsonProperty("branch")
  private String branch = null;

  @JsonProperty("bucketId")
  private String bucketId = null;

  @JsonProperty("comments")
  private String comments = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("flowId")
  private String flowId = null;

  @JsonProperty("flowName")
  private String flowName = null;

  @JsonProperty("registryId")
  private String registryId = null;

  public VersionedFlowDTO action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * The action being performed
   * @return action
  **/
  @Schema(description = "The action being performed")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public VersionedFlowDTO branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * The branch where the flow is stored
   * @return branch
  **/
  @Schema(description = "The branch where the flow is stored")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public VersionedFlowDTO bucketId(String bucketId) {
    this.bucketId = bucketId;
    return this;
  }

   /**
   * The ID of the bucket where the flow is stored
   * @return bucketId
  **/
  @Schema(description = "The ID of the bucket where the flow is stored")
  public String getBucketId() {
    return bucketId;
  }

  public void setBucketId(String bucketId) {
    this.bucketId = bucketId;
  }

  public VersionedFlowDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * Comments for the changeset
   * @return comments
  **/
  @Schema(description = "Comments for the changeset")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public VersionedFlowDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the flow
   * @return description
  **/
  @Schema(description = "A description of the flow")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public VersionedFlowDTO flowId(String flowId) {
    this.flowId = flowId;
    return this;
  }

   /**
   * The ID of the flow
   * @return flowId
  **/
  @Schema(description = "The ID of the flow")
  public String getFlowId() {
    return flowId;
  }

  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }

  public VersionedFlowDTO flowName(String flowName) {
    this.flowName = flowName;
    return this;
  }

   /**
   * The name of the flow
   * @return flowName
  **/
  @Schema(description = "The name of the flow")
  public String getFlowName() {
    return flowName;
  }

  public void setFlowName(String flowName) {
    this.flowName = flowName;
  }

  public VersionedFlowDTO registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

   /**
   * The ID of the registry that the flow is tracked to
   * @return registryId
  **/
  @Schema(description = "The ID of the registry that the flow is tracked to")
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedFlowDTO versionedFlowDTO = (VersionedFlowDTO) o;
    return Objects.equals(this.action, versionedFlowDTO.action) &&
        Objects.equals(this.branch, versionedFlowDTO.branch) &&
        Objects.equals(this.bucketId, versionedFlowDTO.bucketId) &&
        Objects.equals(this.comments, versionedFlowDTO.comments) &&
        Objects.equals(this.description, versionedFlowDTO.description) &&
        Objects.equals(this.flowId, versionedFlowDTO.flowId) &&
        Objects.equals(this.flowName, versionedFlowDTO.flowName) &&
        Objects.equals(this.registryId, versionedFlowDTO.registryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, branch, bucketId, comments, description, flowId, flowName, registryId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedFlowDTO {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    bucketId: ").append(toIndentedString(bucketId)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    flowName: ").append(toIndentedString(flowName)).append("\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

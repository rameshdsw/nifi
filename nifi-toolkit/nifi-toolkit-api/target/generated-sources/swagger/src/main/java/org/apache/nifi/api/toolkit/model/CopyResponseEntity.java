/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.nifi.api.toolkit.model.ExternalControllerServiceReference;
import org.apache.nifi.api.toolkit.model.ParameterProviderReference;
import org.apache.nifi.api.toolkit.model.VersionedConnection;
import org.apache.nifi.api.toolkit.model.VersionedFunnel;
import org.apache.nifi.api.toolkit.model.VersionedLabel;
import org.apache.nifi.api.toolkit.model.VersionedParameterContext;
import org.apache.nifi.api.toolkit.model.VersionedPort;
import org.apache.nifi.api.toolkit.model.VersionedProcessGroup;
import org.apache.nifi.api.toolkit.model.VersionedProcessor;
import org.apache.nifi.api.toolkit.model.VersionedRemoteProcessGroup;
/**
 * The response from copying.
 */
@Schema(description = "The response from copying.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class CopyResponseEntity {
  @JsonProperty("connections")
  private List<VersionedConnection> connections = null;

  @JsonProperty("externalControllerServiceReferences")
  private Map<String, ExternalControllerServiceReference> externalControllerServiceReferences = null;

  @JsonProperty("funnels")
  private List<VersionedFunnel> funnels = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("inputPorts")
  private List<VersionedPort> inputPorts = null;

  @JsonProperty("labels")
  private List<VersionedLabel> labels = null;

  @JsonProperty("outputPorts")
  private List<VersionedPort> outputPorts = null;

  @JsonProperty("parameterContexts")
  private Map<String, VersionedParameterContext> parameterContexts = null;

  @JsonProperty("parameterProviders")
  private Map<String, ParameterProviderReference> parameterProviders = null;

  @JsonProperty("processGroups")
  private List<VersionedProcessGroup> processGroups = null;

  @JsonProperty("processors")
  private List<VersionedProcessor> processors = null;

  @JsonProperty("remoteProcessGroups")
  private List<VersionedRemoteProcessGroup> remoteProcessGroups = null;

  public CopyResponseEntity connections(List<VersionedConnection> connections) {
    this.connections = connections;
    return this;
  }

  public CopyResponseEntity addConnectionsItem(VersionedConnection connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

   /**
   * The connections being copied.
   * @return connections
  **/
  @Schema(description = "The connections being copied.")
  public List<VersionedConnection> getConnections() {
    return connections;
  }

  public void setConnections(List<VersionedConnection> connections) {
    this.connections = connections;
  }

  public CopyResponseEntity externalControllerServiceReferences(Map<String, ExternalControllerServiceReference> externalControllerServiceReferences) {
    this.externalControllerServiceReferences = externalControllerServiceReferences;
    return this;
  }

  public CopyResponseEntity putExternalControllerServiceReferencesItem(String key, ExternalControllerServiceReference externalControllerServiceReferencesItem) {
    if (this.externalControllerServiceReferences == null) {
      this.externalControllerServiceReferences = new HashMap<>();
    }
    this.externalControllerServiceReferences.put(key, externalControllerServiceReferencesItem);
    return this;
  }

   /**
   * The external controller service references.
   * @return externalControllerServiceReferences
  **/
  @Schema(description = "The external controller service references.")
  public Map<String, ExternalControllerServiceReference> getExternalControllerServiceReferences() {
    return externalControllerServiceReferences;
  }

  public void setExternalControllerServiceReferences(Map<String, ExternalControllerServiceReference> externalControllerServiceReferences) {
    this.externalControllerServiceReferences = externalControllerServiceReferences;
  }

  public CopyResponseEntity funnels(List<VersionedFunnel> funnels) {
    this.funnels = funnels;
    return this;
  }

  public CopyResponseEntity addFunnelsItem(VersionedFunnel funnelsItem) {
    if (this.funnels == null) {
      this.funnels = new ArrayList<>();
    }
    this.funnels.add(funnelsItem);
    return this;
  }

   /**
   * The funnels being copied.
   * @return funnels
  **/
  @Schema(description = "The funnels being copied.")
  public List<VersionedFunnel> getFunnels() {
    return funnels;
  }

  public void setFunnels(List<VersionedFunnel> funnels) {
    this.funnels = funnels;
  }

  public CopyResponseEntity id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id for this copy action.
   * @return id
  **/
  @Schema(description = "The id for this copy action.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CopyResponseEntity inputPorts(List<VersionedPort> inputPorts) {
    this.inputPorts = inputPorts;
    return this;
  }

  public CopyResponseEntity addInputPortsItem(VersionedPort inputPortsItem) {
    if (this.inputPorts == null) {
      this.inputPorts = new ArrayList<>();
    }
    this.inputPorts.add(inputPortsItem);
    return this;
  }

   /**
   * The input ports being copied.
   * @return inputPorts
  **/
  @Schema(description = "The input ports being copied.")
  public List<VersionedPort> getInputPorts() {
    return inputPorts;
  }

  public void setInputPorts(List<VersionedPort> inputPorts) {
    this.inputPorts = inputPorts;
  }

  public CopyResponseEntity labels(List<VersionedLabel> labels) {
    this.labels = labels;
    return this;
  }

  public CopyResponseEntity addLabelsItem(VersionedLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * The labels being copied.
   * @return labels
  **/
  @Schema(description = "The labels being copied.")
  public List<VersionedLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<VersionedLabel> labels) {
    this.labels = labels;
  }

  public CopyResponseEntity outputPorts(List<VersionedPort> outputPorts) {
    this.outputPorts = outputPorts;
    return this;
  }

  public CopyResponseEntity addOutputPortsItem(VersionedPort outputPortsItem) {
    if (this.outputPorts == null) {
      this.outputPorts = new ArrayList<>();
    }
    this.outputPorts.add(outputPortsItem);
    return this;
  }

   /**
   * The output ports being copied.
   * @return outputPorts
  **/
  @Schema(description = "The output ports being copied.")
  public List<VersionedPort> getOutputPorts() {
    return outputPorts;
  }

  public void setOutputPorts(List<VersionedPort> outputPorts) {
    this.outputPorts = outputPorts;
  }

  public CopyResponseEntity parameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
    return this;
  }

  public CopyResponseEntity putParameterContextsItem(String key, VersionedParameterContext parameterContextsItem) {
    if (this.parameterContexts == null) {
      this.parameterContexts = new HashMap<>();
    }
    this.parameterContexts.put(key, parameterContextsItem);
    return this;
  }

   /**
   * The referenced parameter contexts.
   * @return parameterContexts
  **/
  @Schema(description = "The referenced parameter contexts.")
  public Map<String, VersionedParameterContext> getParameterContexts() {
    return parameterContexts;
  }

  public void setParameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
  }

  public CopyResponseEntity parameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
    return this;
  }

  public CopyResponseEntity putParameterProvidersItem(String key, ParameterProviderReference parameterProvidersItem) {
    if (this.parameterProviders == null) {
      this.parameterProviders = new HashMap<>();
    }
    this.parameterProviders.put(key, parameterProvidersItem);
    return this;
  }

   /**
   * The referenced parameter providers.
   * @return parameterProviders
  **/
  @Schema(description = "The referenced parameter providers.")
  public Map<String, ParameterProviderReference> getParameterProviders() {
    return parameterProviders;
  }

  public void setParameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
  }

  public CopyResponseEntity processGroups(List<VersionedProcessGroup> processGroups) {
    this.processGroups = processGroups;
    return this;
  }

  public CopyResponseEntity addProcessGroupsItem(VersionedProcessGroup processGroupsItem) {
    if (this.processGroups == null) {
      this.processGroups = new ArrayList<>();
    }
    this.processGroups.add(processGroupsItem);
    return this;
  }

   /**
   * The process groups being copied.
   * @return processGroups
  **/
  @Schema(description = "The process groups being copied.")
  public List<VersionedProcessGroup> getProcessGroups() {
    return processGroups;
  }

  public void setProcessGroups(List<VersionedProcessGroup> processGroups) {
    this.processGroups = processGroups;
  }

  public CopyResponseEntity processors(List<VersionedProcessor> processors) {
    this.processors = processors;
    return this;
  }

  public CopyResponseEntity addProcessorsItem(VersionedProcessor processorsItem) {
    if (this.processors == null) {
      this.processors = new ArrayList<>();
    }
    this.processors.add(processorsItem);
    return this;
  }

   /**
   * The processors being copied.
   * @return processors
  **/
  @Schema(description = "The processors being copied.")
  public List<VersionedProcessor> getProcessors() {
    return processors;
  }

  public void setProcessors(List<VersionedProcessor> processors) {
    this.processors = processors;
  }

  public CopyResponseEntity remoteProcessGroups(List<VersionedRemoteProcessGroup> remoteProcessGroups) {
    this.remoteProcessGroups = remoteProcessGroups;
    return this;
  }

  public CopyResponseEntity addRemoteProcessGroupsItem(VersionedRemoteProcessGroup remoteProcessGroupsItem) {
    if (this.remoteProcessGroups == null) {
      this.remoteProcessGroups = new ArrayList<>();
    }
    this.remoteProcessGroups.add(remoteProcessGroupsItem);
    return this;
  }

   /**
   * The remote process groups being copied.
   * @return remoteProcessGroups
  **/
  @Schema(description = "The remote process groups being copied.")
  public List<VersionedRemoteProcessGroup> getRemoteProcessGroups() {
    return remoteProcessGroups;
  }

  public void setRemoteProcessGroups(List<VersionedRemoteProcessGroup> remoteProcessGroups) {
    this.remoteProcessGroups = remoteProcessGroups;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyResponseEntity copyResponseEntity = (CopyResponseEntity) o;
    return Objects.equals(this.connections, copyResponseEntity.connections) &&
        Objects.equals(this.externalControllerServiceReferences, copyResponseEntity.externalControllerServiceReferences) &&
        Objects.equals(this.funnels, copyResponseEntity.funnels) &&
        Objects.equals(this.id, copyResponseEntity.id) &&
        Objects.equals(this.inputPorts, copyResponseEntity.inputPorts) &&
        Objects.equals(this.labels, copyResponseEntity.labels) &&
        Objects.equals(this.outputPorts, copyResponseEntity.outputPorts) &&
        Objects.equals(this.parameterContexts, copyResponseEntity.parameterContexts) &&
        Objects.equals(this.parameterProviders, copyResponseEntity.parameterProviders) &&
        Objects.equals(this.processGroups, copyResponseEntity.processGroups) &&
        Objects.equals(this.processors, copyResponseEntity.processors) &&
        Objects.equals(this.remoteProcessGroups, copyResponseEntity.remoteProcessGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connections, externalControllerServiceReferences, funnels, id, inputPorts, labels, outputPorts, parameterContexts, parameterProviders, processGroups, processors, remoteProcessGroups);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyResponseEntity {\n");
    
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    externalControllerServiceReferences: ").append(toIndentedString(externalControllerServiceReferences)).append("\n");
    sb.append("    funnels: ").append(toIndentedString(funnels)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputPorts: ").append(toIndentedString(inputPorts)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    outputPorts: ").append(toIndentedString(outputPorts)).append("\n");
    sb.append("    parameterContexts: ").append(toIndentedString(parameterContexts)).append("\n");
    sb.append("    parameterProviders: ").append(toIndentedString(parameterProviders)).append("\n");
    sb.append("    processGroups: ").append(toIndentedString(processGroups)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    remoteProcessGroups: ").append(toIndentedString(remoteProcessGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

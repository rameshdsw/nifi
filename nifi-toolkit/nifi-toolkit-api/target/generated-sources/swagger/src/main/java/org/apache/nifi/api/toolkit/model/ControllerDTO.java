/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.PortDTO;
/**
 * ControllerDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ControllerDTO {
  @JsonProperty("activeRemotePortCount")
  private Integer activeRemotePortCount = null;

  @JsonProperty("comments")
  private String comments = null;

  @JsonProperty("disabledCount")
  private Integer disabledCount = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("inactiveRemotePortCount")
  private Integer inactiveRemotePortCount = null;

  @JsonProperty("inputPortCount")
  private Integer inputPortCount = null;

  @JsonProperty("inputPorts")
  private List<PortDTO> inputPorts = null;

  @JsonProperty("instanceId")
  private String instanceId = null;

  @JsonProperty("invalidCount")
  private Integer invalidCount = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("outputPortCount")
  private Integer outputPortCount = null;

  @JsonProperty("outputPorts")
  private List<PortDTO> outputPorts = null;

  @JsonProperty("remoteSiteHttpListeningPort")
  private Integer remoteSiteHttpListeningPort = null;

  @JsonProperty("remoteSiteListeningPort")
  private Integer remoteSiteListeningPort = null;

  @JsonProperty("runningCount")
  private Integer runningCount = null;

  @JsonProperty("siteToSiteSecure")
  private Boolean siteToSiteSecure = null;

  @JsonProperty("stoppedCount")
  private Integer stoppedCount = null;

  public ControllerDTO activeRemotePortCount(Integer activeRemotePortCount) {
    this.activeRemotePortCount = activeRemotePortCount;
    return this;
  }

   /**
   * The number of active remote ports contained in the NiFi.
   * @return activeRemotePortCount
  **/
  @Schema(description = "The number of active remote ports contained in the NiFi.")
  public Integer getActiveRemotePortCount() {
    return activeRemotePortCount;
  }

  public void setActiveRemotePortCount(Integer activeRemotePortCount) {
    this.activeRemotePortCount = activeRemotePortCount;
  }

  public ControllerDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments for the NiFi.
   * @return comments
  **/
  @Schema(description = "The comments for the NiFi.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public ControllerDTO disabledCount(Integer disabledCount) {
    this.disabledCount = disabledCount;
    return this;
  }

   /**
   * The number of disabled components in the NiFi.
   * @return disabledCount
  **/
  @Schema(description = "The number of disabled components in the NiFi.")
  public Integer getDisabledCount() {
    return disabledCount;
  }

  public void setDisabledCount(Integer disabledCount) {
    this.disabledCount = disabledCount;
  }

  public ControllerDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the NiFi.
   * @return id
  **/
  @Schema(description = "The id of the NiFi.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ControllerDTO inactiveRemotePortCount(Integer inactiveRemotePortCount) {
    this.inactiveRemotePortCount = inactiveRemotePortCount;
    return this;
  }

   /**
   * The number of inactive remote ports contained in the NiFi.
   * @return inactiveRemotePortCount
  **/
  @Schema(description = "The number of inactive remote ports contained in the NiFi.")
  public Integer getInactiveRemotePortCount() {
    return inactiveRemotePortCount;
  }

  public void setInactiveRemotePortCount(Integer inactiveRemotePortCount) {
    this.inactiveRemotePortCount = inactiveRemotePortCount;
  }

  public ControllerDTO inputPortCount(Integer inputPortCount) {
    this.inputPortCount = inputPortCount;
    return this;
  }

   /**
   * The number of input ports contained in the NiFi.
   * @return inputPortCount
  **/
  @Schema(description = "The number of input ports contained in the NiFi.")
  public Integer getInputPortCount() {
    return inputPortCount;
  }

  public void setInputPortCount(Integer inputPortCount) {
    this.inputPortCount = inputPortCount;
  }

  public ControllerDTO inputPorts(List<PortDTO> inputPorts) {
    this.inputPorts = inputPorts;
    return this;
  }

  public ControllerDTO addInputPortsItem(PortDTO inputPortsItem) {
    if (this.inputPorts == null) {
      this.inputPorts = new ArrayList<>();
    }
    this.inputPorts.add(inputPortsItem);
    return this;
  }

   /**
   * The input ports available to send data to for the NiFi.
   * @return inputPorts
  **/
  @Schema(description = "The input ports available to send data to for the NiFi.")
  public List<PortDTO> getInputPorts() {
    return inputPorts;
  }

  public void setInputPorts(List<PortDTO> inputPorts) {
    this.inputPorts = inputPorts;
  }

  public ControllerDTO instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * If clustered, the id of the Cluster Manager, otherwise the id of the NiFi.
   * @return instanceId
  **/
  @Schema(description = "If clustered, the id of the Cluster Manager, otherwise the id of the NiFi.")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public ControllerDTO invalidCount(Integer invalidCount) {
    this.invalidCount = invalidCount;
    return this;
  }

   /**
   * The number of invalid components in the NiFi.
   * @return invalidCount
  **/
  @Schema(description = "The number of invalid components in the NiFi.")
  public Integer getInvalidCount() {
    return invalidCount;
  }

  public void setInvalidCount(Integer invalidCount) {
    this.invalidCount = invalidCount;
  }

  public ControllerDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the NiFi.
   * @return name
  **/
  @Schema(description = "The name of the NiFi.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ControllerDTO outputPortCount(Integer outputPortCount) {
    this.outputPortCount = outputPortCount;
    return this;
  }

   /**
   * The number of output ports in the NiFi.
   * @return outputPortCount
  **/
  @Schema(description = "The number of output ports in the NiFi.")
  public Integer getOutputPortCount() {
    return outputPortCount;
  }

  public void setOutputPortCount(Integer outputPortCount) {
    this.outputPortCount = outputPortCount;
  }

  public ControllerDTO outputPorts(List<PortDTO> outputPorts) {
    this.outputPorts = outputPorts;
    return this;
  }

  public ControllerDTO addOutputPortsItem(PortDTO outputPortsItem) {
    if (this.outputPorts == null) {
      this.outputPorts = new ArrayList<>();
    }
    this.outputPorts.add(outputPortsItem);
    return this;
  }

   /**
   * The output ports available to received data from the NiFi.
   * @return outputPorts
  **/
  @Schema(description = "The output ports available to received data from the NiFi.")
  public List<PortDTO> getOutputPorts() {
    return outputPorts;
  }

  public void setOutputPorts(List<PortDTO> outputPorts) {
    this.outputPorts = outputPorts;
  }

  public ControllerDTO remoteSiteHttpListeningPort(Integer remoteSiteHttpListeningPort) {
    this.remoteSiteHttpListeningPort = remoteSiteHttpListeningPort;
    return this;
  }

   /**
   * The HTTP(S) Port on which this instance is listening for Remote Transfers of Flow Files. If this instance is not configured to receive Flow Files from remote instances, this will be null.
   * @return remoteSiteHttpListeningPort
  **/
  @Schema(description = "The HTTP(S) Port on which this instance is listening for Remote Transfers of Flow Files. If this instance is not configured to receive Flow Files from remote instances, this will be null.")
  public Integer getRemoteSiteHttpListeningPort() {
    return remoteSiteHttpListeningPort;
  }

  public void setRemoteSiteHttpListeningPort(Integer remoteSiteHttpListeningPort) {
    this.remoteSiteHttpListeningPort = remoteSiteHttpListeningPort;
  }

  public ControllerDTO remoteSiteListeningPort(Integer remoteSiteListeningPort) {
    this.remoteSiteListeningPort = remoteSiteListeningPort;
    return this;
  }

   /**
   * The Socket Port on which this instance is listening for Remote Transfers of Flow Files. If this instance is not configured to receive Flow Files from remote instances, this will be null.
   * @return remoteSiteListeningPort
  **/
  @Schema(description = "The Socket Port on which this instance is listening for Remote Transfers of Flow Files. If this instance is not configured to receive Flow Files from remote instances, this will be null.")
  public Integer getRemoteSiteListeningPort() {
    return remoteSiteListeningPort;
  }

  public void setRemoteSiteListeningPort(Integer remoteSiteListeningPort) {
    this.remoteSiteListeningPort = remoteSiteListeningPort;
  }

  public ControllerDTO runningCount(Integer runningCount) {
    this.runningCount = runningCount;
    return this;
  }

   /**
   * The number of running components in the NiFi.
   * @return runningCount
  **/
  @Schema(description = "The number of running components in the NiFi.")
  public Integer getRunningCount() {
    return runningCount;
  }

  public void setRunningCount(Integer runningCount) {
    this.runningCount = runningCount;
  }

  public ControllerDTO siteToSiteSecure(Boolean siteToSiteSecure) {
    this.siteToSiteSecure = siteToSiteSecure;
    return this;
  }

   /**
   * Indicates whether or not Site-to-Site communications with this instance is secure (2-way authentication).
   * @return siteToSiteSecure
  **/
  @Schema(description = "Indicates whether or not Site-to-Site communications with this instance is secure (2-way authentication).")
  public Boolean isSiteToSiteSecure() {
    return siteToSiteSecure;
  }

  public void setSiteToSiteSecure(Boolean siteToSiteSecure) {
    this.siteToSiteSecure = siteToSiteSecure;
  }

  public ControllerDTO stoppedCount(Integer stoppedCount) {
    this.stoppedCount = stoppedCount;
    return this;
  }

   /**
   * The number of stopped components in the NiFi.
   * @return stoppedCount
  **/
  @Schema(description = "The number of stopped components in the NiFi.")
  public Integer getStoppedCount() {
    return stoppedCount;
  }

  public void setStoppedCount(Integer stoppedCount) {
    this.stoppedCount = stoppedCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllerDTO controllerDTO = (ControllerDTO) o;
    return Objects.equals(this.activeRemotePortCount, controllerDTO.activeRemotePortCount) &&
        Objects.equals(this.comments, controllerDTO.comments) &&
        Objects.equals(this.disabledCount, controllerDTO.disabledCount) &&
        Objects.equals(this.id, controllerDTO.id) &&
        Objects.equals(this.inactiveRemotePortCount, controllerDTO.inactiveRemotePortCount) &&
        Objects.equals(this.inputPortCount, controllerDTO.inputPortCount) &&
        Objects.equals(this.inputPorts, controllerDTO.inputPorts) &&
        Objects.equals(this.instanceId, controllerDTO.instanceId) &&
        Objects.equals(this.invalidCount, controllerDTO.invalidCount) &&
        Objects.equals(this.name, controllerDTO.name) &&
        Objects.equals(this.outputPortCount, controllerDTO.outputPortCount) &&
        Objects.equals(this.outputPorts, controllerDTO.outputPorts) &&
        Objects.equals(this.remoteSiteHttpListeningPort, controllerDTO.remoteSiteHttpListeningPort) &&
        Objects.equals(this.remoteSiteListeningPort, controllerDTO.remoteSiteListeningPort) &&
        Objects.equals(this.runningCount, controllerDTO.runningCount) &&
        Objects.equals(this.siteToSiteSecure, controllerDTO.siteToSiteSecure) &&
        Objects.equals(this.stoppedCount, controllerDTO.stoppedCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeRemotePortCount, comments, disabledCount, id, inactiveRemotePortCount, inputPortCount, inputPorts, instanceId, invalidCount, name, outputPortCount, outputPorts, remoteSiteHttpListeningPort, remoteSiteListeningPort, runningCount, siteToSiteSecure, stoppedCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllerDTO {\n");
    
    sb.append("    activeRemotePortCount: ").append(toIndentedString(activeRemotePortCount)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    disabledCount: ").append(toIndentedString(disabledCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inactiveRemotePortCount: ").append(toIndentedString(inactiveRemotePortCount)).append("\n");
    sb.append("    inputPortCount: ").append(toIndentedString(inputPortCount)).append("\n");
    sb.append("    inputPorts: ").append(toIndentedString(inputPorts)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    invalidCount: ").append(toIndentedString(invalidCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputPortCount: ").append(toIndentedString(outputPortCount)).append("\n");
    sb.append("    outputPorts: ").append(toIndentedString(outputPorts)).append("\n");
    sb.append("    remoteSiteHttpListeningPort: ").append(toIndentedString(remoteSiteHttpListeningPort)).append("\n");
    sb.append("    remoteSiteListeningPort: ").append(toIndentedString(remoteSiteListeningPort)).append("\n");
    sb.append("    runningCount: ").append(toIndentedString(runningCount)).append("\n");
    sb.append("    siteToSiteSecure: ").append(toIndentedString(siteToSiteSecure)).append("\n");
    sb.append("    stoppedCount: ").append(toIndentedString(stoppedCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

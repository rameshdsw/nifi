/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * PortStatusSnapshotDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class PortStatusSnapshotDTO {
  @JsonProperty("activeThreadCount")
  private Integer activeThreadCount = null;

  @JsonProperty("bytesIn")
  private Long bytesIn = null;

  @JsonProperty("bytesOut")
  private Long bytesOut = null;

  @JsonProperty("flowFilesIn")
  private Integer flowFilesIn = null;

  @JsonProperty("flowFilesOut")
  private Integer flowFilesOut = null;

  @JsonProperty("groupId")
  private String groupId = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("input")
  private String input = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("output")
  private String output = null;

  /**
   * The run status of the port.
   */
  public enum RunStatusEnum {
    RUNNING("Running"),
    STOPPED("Stopped"),
    VALIDATING("Validating"),
    DISABLED("Disabled"),
    INVALID("Invalid");

    private String value;

    RunStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RunStatusEnum fromValue(String input) {
      for (RunStatusEnum b : RunStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("runStatus")
  private RunStatusEnum runStatus = null;

  @JsonProperty("transmitting")
  private Boolean transmitting = null;

  public PortStatusSnapshotDTO activeThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
    return this;
  }

   /**
   * The active thread count for the port.
   * @return activeThreadCount
  **/
  @Schema(description = "The active thread count for the port.")
  public Integer getActiveThreadCount() {
    return activeThreadCount;
  }

  public void setActiveThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
  }

  public PortStatusSnapshotDTO bytesIn(Long bytesIn) {
    this.bytesIn = bytesIn;
    return this;
  }

   /**
   * The size of hte FlowFiles that have been accepted in the last 5 minutes.
   * @return bytesIn
  **/
  @Schema(description = "The size of hte FlowFiles that have been accepted in the last 5 minutes.")
  public Long getBytesIn() {
    return bytesIn;
  }

  public void setBytesIn(Long bytesIn) {
    this.bytesIn = bytesIn;
  }

  public PortStatusSnapshotDTO bytesOut(Long bytesOut) {
    this.bytesOut = bytesOut;
    return this;
  }

   /**
   * The number of bytes that have been processed in the last 5 minutes.
   * @return bytesOut
  **/
  @Schema(description = "The number of bytes that have been processed in the last 5 minutes.")
  public Long getBytesOut() {
    return bytesOut;
  }

  public void setBytesOut(Long bytesOut) {
    this.bytesOut = bytesOut;
  }

  public PortStatusSnapshotDTO flowFilesIn(Integer flowFilesIn) {
    this.flowFilesIn = flowFilesIn;
    return this;
  }

   /**
   * The number of FlowFiles that have been accepted in the last 5 minutes.
   * @return flowFilesIn
  **/
  @Schema(description = "The number of FlowFiles that have been accepted in the last 5 minutes.")
  public Integer getFlowFilesIn() {
    return flowFilesIn;
  }

  public void setFlowFilesIn(Integer flowFilesIn) {
    this.flowFilesIn = flowFilesIn;
  }

  public PortStatusSnapshotDTO flowFilesOut(Integer flowFilesOut) {
    this.flowFilesOut = flowFilesOut;
    return this;
  }

   /**
   * The number of FlowFiles that have been processed in the last 5 minutes.
   * @return flowFilesOut
  **/
  @Schema(description = "The number of FlowFiles that have been processed in the last 5 minutes.")
  public Integer getFlowFilesOut() {
    return flowFilesOut;
  }

  public void setFlowFilesOut(Integer flowFilesOut) {
    this.flowFilesOut = flowFilesOut;
  }

  public PortStatusSnapshotDTO groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * The id of the parent process group of the port.
   * @return groupId
  **/
  @Schema(description = "The id of the parent process group of the port.")
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }

  public PortStatusSnapshotDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the port.
   * @return id
  **/
  @Schema(description = "The id of the port.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PortStatusSnapshotDTO input(String input) {
    this.input = input;
    return this;
  }

   /**
   * The count/size of flowfiles that have been accepted in the last 5 minutes.
   * @return input
  **/
  @Schema(description = "The count/size of flowfiles that have been accepted in the last 5 minutes.")
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }

  public PortStatusSnapshotDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the port.
   * @return name
  **/
  @Schema(description = "The name of the port.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PortStatusSnapshotDTO output(String output) {
    this.output = output;
    return this;
  }

   /**
   * The count/size of flowfiles that have been processed in the last 5 minutes.
   * @return output
  **/
  @Schema(description = "The count/size of flowfiles that have been processed in the last 5 minutes.")
  public String getOutput() {
    return output;
  }

  public void setOutput(String output) {
    this.output = output;
  }

  public PortStatusSnapshotDTO runStatus(RunStatusEnum runStatus) {
    this.runStatus = runStatus;
    return this;
  }

   /**
   * The run status of the port.
   * @return runStatus
  **/
  @Schema(description = "The run status of the port.")
  public RunStatusEnum getRunStatus() {
    return runStatus;
  }

  public void setRunStatus(RunStatusEnum runStatus) {
    this.runStatus = runStatus;
  }

  public PortStatusSnapshotDTO transmitting(Boolean transmitting) {
    this.transmitting = transmitting;
    return this;
  }

   /**
   * Whether the port has incoming or outgoing connections to a remote NiFi.
   * @return transmitting
  **/
  @Schema(description = "Whether the port has incoming or outgoing connections to a remote NiFi.")
  public Boolean isTransmitting() {
    return transmitting;
  }

  public void setTransmitting(Boolean transmitting) {
    this.transmitting = transmitting;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortStatusSnapshotDTO portStatusSnapshotDTO = (PortStatusSnapshotDTO) o;
    return Objects.equals(this.activeThreadCount, portStatusSnapshotDTO.activeThreadCount) &&
        Objects.equals(this.bytesIn, portStatusSnapshotDTO.bytesIn) &&
        Objects.equals(this.bytesOut, portStatusSnapshotDTO.bytesOut) &&
        Objects.equals(this.flowFilesIn, portStatusSnapshotDTO.flowFilesIn) &&
        Objects.equals(this.flowFilesOut, portStatusSnapshotDTO.flowFilesOut) &&
        Objects.equals(this.groupId, portStatusSnapshotDTO.groupId) &&
        Objects.equals(this.id, portStatusSnapshotDTO.id) &&
        Objects.equals(this.input, portStatusSnapshotDTO.input) &&
        Objects.equals(this.name, portStatusSnapshotDTO.name) &&
        Objects.equals(this.output, portStatusSnapshotDTO.output) &&
        Objects.equals(this.runStatus, portStatusSnapshotDTO.runStatus) &&
        Objects.equals(this.transmitting, portStatusSnapshotDTO.transmitting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThreadCount, bytesIn, bytesOut, flowFilesIn, flowFilesOut, groupId, id, input, name, output, runStatus, transmitting);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortStatusSnapshotDTO {\n");
    
    sb.append("    activeThreadCount: ").append(toIndentedString(activeThreadCount)).append("\n");
    sb.append("    bytesIn: ").append(toIndentedString(bytesIn)).append("\n");
    sb.append("    bytesOut: ").append(toIndentedString(bytesOut)).append("\n");
    sb.append("    flowFilesIn: ").append(toIndentedString(flowFilesIn)).append("\n");
    sb.append("    flowFilesOut: ").append(toIndentedString(flowFilesOut)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    runStatus: ").append(toIndentedString(runStatus)).append("\n");
    sb.append("    transmitting: ").append(toIndentedString(transmitting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

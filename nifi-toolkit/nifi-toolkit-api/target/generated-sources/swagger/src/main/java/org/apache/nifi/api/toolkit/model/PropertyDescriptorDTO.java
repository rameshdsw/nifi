/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.AllowableValueEntity;
import org.apache.nifi.api.toolkit.model.BundleDTO;
import org.apache.nifi.api.toolkit.model.PropertyDependencyDTO;
/**
 * The descriptors for the reporting tasks properties.
 */
@Schema(description = "The descriptors for the reporting tasks properties.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class PropertyDescriptorDTO {
  @JsonProperty("allowableValues")
  private List<AllowableValueEntity> allowableValues = null;

  @JsonProperty("defaultValue")
  private String defaultValue = null;

  @JsonProperty("dependencies")
  private List<PropertyDependencyDTO> dependencies = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("displayName")
  private String displayName = null;

  @JsonProperty("dynamic")
  private Boolean dynamic = null;

  @JsonProperty("expressionLanguageScope")
  private String expressionLanguageScope = null;

  @JsonProperty("identifiesControllerService")
  private String identifiesControllerService = null;

  @JsonProperty("identifiesControllerServiceBundle")
  private BundleDTO identifiesControllerServiceBundle = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("required")
  private Boolean required = null;

  @JsonProperty("sensitive")
  private Boolean sensitive = null;

  @JsonProperty("supportsEl")
  private Boolean supportsEl = null;

  public PropertyDescriptorDTO allowableValues(List<AllowableValueEntity> allowableValues) {
    this.allowableValues = allowableValues;
    return this;
  }

  public PropertyDescriptorDTO addAllowableValuesItem(AllowableValueEntity allowableValuesItem) {
    if (this.allowableValues == null) {
      this.allowableValues = new ArrayList<>();
    }
    this.allowableValues.add(allowableValuesItem);
    return this;
  }

   /**
   * Allowable values for the property. If empty then the allowed values are not constrained.
   * @return allowableValues
  **/
  @Schema(description = "Allowable values for the property. If empty then the allowed values are not constrained.")
  public List<AllowableValueEntity> getAllowableValues() {
    return allowableValues;
  }

  public void setAllowableValues(List<AllowableValueEntity> allowableValues) {
    this.allowableValues = allowableValues;
  }

  public PropertyDescriptorDTO defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value for the property.
   * @return defaultValue
  **/
  @Schema(description = "The default value for the property.")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public PropertyDescriptorDTO dependencies(List<PropertyDependencyDTO> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public PropertyDescriptorDTO addDependenciesItem(PropertyDependencyDTO dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * A list of dependencies that must be met in order for this Property to be relevant. If any of these dependencies is not met, the property described by this Property Descriptor is not relevant.
   * @return dependencies
  **/
  @Schema(description = "A list of dependencies that must be met in order for this Property to be relevant. If any of these dependencies is not met, the property described by this Property Descriptor is not relevant.")
  public List<PropertyDependencyDTO> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<PropertyDependencyDTO> dependencies) {
    this.dependencies = dependencies;
  }

  public PropertyDescriptorDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description for the property. Used to relay additional details to a user or provide a mechanism of documenting intent.
   * @return description
  **/
  @Schema(description = "The description for the property. Used to relay additional details to a user or provide a mechanism of documenting intent.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PropertyDescriptorDTO displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The human readable name for the property.
   * @return displayName
  **/
  @Schema(description = "The human readable name for the property.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public PropertyDescriptorDTO dynamic(Boolean dynamic) {
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Whether the property is dynamic (user-defined).
   * @return dynamic
  **/
  @Schema(description = "Whether the property is dynamic (user-defined).")
  public Boolean isDynamic() {
    return dynamic;
  }

  public void setDynamic(Boolean dynamic) {
    this.dynamic = dynamic;
  }

  public PropertyDescriptorDTO expressionLanguageScope(String expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
    return this;
  }

   /**
   * Scope of the Expression Language evaluation for the property.
   * @return expressionLanguageScope
  **/
  @Schema(description = "Scope of the Expression Language evaluation for the property.")
  public String getExpressionLanguageScope() {
    return expressionLanguageScope;
  }

  public void setExpressionLanguageScope(String expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
  }

  public PropertyDescriptorDTO identifiesControllerService(String identifiesControllerService) {
    this.identifiesControllerService = identifiesControllerService;
    return this;
  }

   /**
   * If the property identifies a controller service this returns the fully qualified type.
   * @return identifiesControllerService
  **/
  @Schema(description = "If the property identifies a controller service this returns the fully qualified type.")
  public String getIdentifiesControllerService() {
    return identifiesControllerService;
  }

  public void setIdentifiesControllerService(String identifiesControllerService) {
    this.identifiesControllerService = identifiesControllerService;
  }

  public PropertyDescriptorDTO identifiesControllerServiceBundle(BundleDTO identifiesControllerServiceBundle) {
    this.identifiesControllerServiceBundle = identifiesControllerServiceBundle;
    return this;
  }

   /**
   * Get identifiesControllerServiceBundle
   * @return identifiesControllerServiceBundle
  **/
  @Schema(description = "")
  public BundleDTO getIdentifiesControllerServiceBundle() {
    return identifiesControllerServiceBundle;
  }

  public void setIdentifiesControllerServiceBundle(BundleDTO identifiesControllerServiceBundle) {
    this.identifiesControllerServiceBundle = identifiesControllerServiceBundle;
  }

  public PropertyDescriptorDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name for the property.
   * @return name
  **/
  @Schema(description = "The name for the property.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PropertyDescriptorDTO required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Whether the property is required.
   * @return required
  **/
  @Schema(description = "Whether the property is required.")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public PropertyDescriptorDTO sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

   /**
   * Whether the property is sensitive and protected whenever stored or represented.
   * @return sensitive
  **/
  @Schema(description = "Whether the property is sensitive and protected whenever stored or represented.")
  public Boolean isSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }

  public PropertyDescriptorDTO supportsEl(Boolean supportsEl) {
    this.supportsEl = supportsEl;
    return this;
  }

   /**
   * Whether the property supports expression language.
   * @return supportsEl
  **/
  @Schema(description = "Whether the property supports expression language.")
  public Boolean isSupportsEl() {
    return supportsEl;
  }

  public void setSupportsEl(Boolean supportsEl) {
    this.supportsEl = supportsEl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDescriptorDTO propertyDescriptorDTO = (PropertyDescriptorDTO) o;
    return Objects.equals(this.allowableValues, propertyDescriptorDTO.allowableValues) &&
        Objects.equals(this.defaultValue, propertyDescriptorDTO.defaultValue) &&
        Objects.equals(this.dependencies, propertyDescriptorDTO.dependencies) &&
        Objects.equals(this.description, propertyDescriptorDTO.description) &&
        Objects.equals(this.displayName, propertyDescriptorDTO.displayName) &&
        Objects.equals(this.dynamic, propertyDescriptorDTO.dynamic) &&
        Objects.equals(this.expressionLanguageScope, propertyDescriptorDTO.expressionLanguageScope) &&
        Objects.equals(this.identifiesControllerService, propertyDescriptorDTO.identifiesControllerService) &&
        Objects.equals(this.identifiesControllerServiceBundle, propertyDescriptorDTO.identifiesControllerServiceBundle) &&
        Objects.equals(this.name, propertyDescriptorDTO.name) &&
        Objects.equals(this.required, propertyDescriptorDTO.required) &&
        Objects.equals(this.sensitive, propertyDescriptorDTO.sensitive) &&
        Objects.equals(this.supportsEl, propertyDescriptorDTO.supportsEl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowableValues, defaultValue, dependencies, description, displayName, dynamic, expressionLanguageScope, identifiesControllerService, identifiesControllerServiceBundle, name, required, sensitive, supportsEl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDescriptorDTO {\n");
    
    sb.append("    allowableValues: ").append(toIndentedString(allowableValues)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    expressionLanguageScope: ").append(toIndentedString(expressionLanguageScope)).append("\n");
    sb.append("    identifiesControllerService: ").append(toIndentedString(identifiesControllerService)).append("\n");
    sb.append("    identifiesControllerServiceBundle: ").append(toIndentedString(identifiesControllerServiceBundle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    supportsEl: ").append(toIndentedString(supportsEl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

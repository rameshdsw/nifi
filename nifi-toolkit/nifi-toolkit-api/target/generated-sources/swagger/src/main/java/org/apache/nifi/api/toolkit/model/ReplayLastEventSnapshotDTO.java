/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * The snapshot from the node
 */
@Schema(description = "The snapshot from the node")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ReplayLastEventSnapshotDTO {
  @JsonProperty("eventAvailable")
  private Boolean eventAvailable = null;

  @JsonProperty("eventsReplayed")
  private List<Long> eventsReplayed = null;

  @JsonProperty("failureExplanation")
  private String failureExplanation = null;

  public ReplayLastEventSnapshotDTO eventAvailable(Boolean eventAvailable) {
    this.eventAvailable = eventAvailable;
    return this;
  }

   /**
   * Whether or not an event was available. This may not be populated if there was a failure.
   * @return eventAvailable
  **/
  @Schema(description = "Whether or not an event was available. This may not be populated if there was a failure.")
  public Boolean isEventAvailable() {
    return eventAvailable;
  }

  public void setEventAvailable(Boolean eventAvailable) {
    this.eventAvailable = eventAvailable;
  }

  public ReplayLastEventSnapshotDTO eventsReplayed(List<Long> eventsReplayed) {
    this.eventsReplayed = eventsReplayed;
    return this;
  }

  public ReplayLastEventSnapshotDTO addEventsReplayedItem(Long eventsReplayedItem) {
    if (this.eventsReplayed == null) {
      this.eventsReplayed = new ArrayList<>();
    }
    this.eventsReplayed.add(eventsReplayedItem);
    return this;
  }

   /**
   * The IDs of the events that were successfully replayed
   * @return eventsReplayed
  **/
  @Schema(description = "The IDs of the events that were successfully replayed")
  public List<Long> getEventsReplayed() {
    return eventsReplayed;
  }

  public void setEventsReplayed(List<Long> eventsReplayed) {
    this.eventsReplayed = eventsReplayed;
  }

  public ReplayLastEventSnapshotDTO failureExplanation(String failureExplanation) {
    this.failureExplanation = failureExplanation;
    return this;
  }

   /**
   * If unable to replay an event, specifies why the event could not be replayed
   * @return failureExplanation
  **/
  @Schema(description = "If unable to replay an event, specifies why the event could not be replayed")
  public String getFailureExplanation() {
    return failureExplanation;
  }

  public void setFailureExplanation(String failureExplanation) {
    this.failureExplanation = failureExplanation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplayLastEventSnapshotDTO replayLastEventSnapshotDTO = (ReplayLastEventSnapshotDTO) o;
    return Objects.equals(this.eventAvailable, replayLastEventSnapshotDTO.eventAvailable) &&
        Objects.equals(this.eventsReplayed, replayLastEventSnapshotDTO.eventsReplayed) &&
        Objects.equals(this.failureExplanation, replayLastEventSnapshotDTO.failureExplanation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventAvailable, eventsReplayed, failureExplanation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplayLastEventSnapshotDTO {\n");
    
    sb.append("    eventAvailable: ").append(toIndentedString(eventAvailable)).append("\n");
    sb.append("    eventsReplayed: ").append(toIndentedString(eventsReplayed)).append("\n");
    sb.append("    failureExplanation: ").append(toIndentedString(failureExplanation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.Position;
import org.apache.nifi.api.toolkit.model.VersionedConnection;
import org.apache.nifi.api.toolkit.model.VersionedControllerService;
import org.apache.nifi.api.toolkit.model.VersionedFlowCoordinates;
import org.apache.nifi.api.toolkit.model.VersionedFunnel;
import org.apache.nifi.api.toolkit.model.VersionedLabel;
import org.apache.nifi.api.toolkit.model.VersionedPort;
import org.apache.nifi.api.toolkit.model.VersionedProcessGroup;
import org.apache.nifi.api.toolkit.model.VersionedProcessor;
import org.apache.nifi.api.toolkit.model.VersionedRemoteProcessGroup;
/**
 * VersionedProcessGroup
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class VersionedProcessGroup {
  @JsonProperty("comments")
  private String comments = null;

  /**
   * Gets or Sets componentType
   */
  public enum ComponentTypeEnum {
    CONNECTION("CONNECTION"),
    PROCESSOR("PROCESSOR"),
    PROCESS_GROUP("PROCESS_GROUP"),
    REMOTE_PROCESS_GROUP("REMOTE_PROCESS_GROUP"),
    INPUT_PORT("INPUT_PORT"),
    OUTPUT_PORT("OUTPUT_PORT"),
    REMOTE_INPUT_PORT("REMOTE_INPUT_PORT"),
    REMOTE_OUTPUT_PORT("REMOTE_OUTPUT_PORT"),
    FUNNEL("FUNNEL"),
    LABEL("LABEL"),
    CONTROLLER_SERVICE("CONTROLLER_SERVICE"),
    REPORTING_TASK("REPORTING_TASK"),
    FLOW_ANALYSIS_RULE("FLOW_ANALYSIS_RULE"),
    PARAMETER_CONTEXT("PARAMETER_CONTEXT"),
    PARAMETER_PROVIDER("PARAMETER_PROVIDER"),
    FLOW_REGISTRY_CLIENT("FLOW_REGISTRY_CLIENT");

    private String value;

    ComponentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ComponentTypeEnum fromValue(String input) {
      for (ComponentTypeEnum b : ComponentTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("componentType")
  private ComponentTypeEnum componentType = null;

  @JsonProperty("connections")
  private List<VersionedConnection> connections = null;

  @JsonProperty("controllerServices")
  private List<VersionedControllerService> controllerServices = null;

  @JsonProperty("defaultBackPressureDataSizeThreshold")
  private String defaultBackPressureDataSizeThreshold = null;

  @JsonProperty("defaultBackPressureObjectThreshold")
  private Long defaultBackPressureObjectThreshold = null;

  @JsonProperty("defaultFlowFileExpiration")
  private String defaultFlowFileExpiration = null;

  /**
   * The Execution Engine that should be used to run the components within the group.
   */
  public enum ExecutionEngineEnum {
    STANDARD("STANDARD"),
    STATELESS("STATELESS"),
    INHERITED("INHERITED");

    private String value;

    ExecutionEngineEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ExecutionEngineEnum fromValue(String input) {
      for (ExecutionEngineEnum b : ExecutionEngineEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("executionEngine")
  private ExecutionEngineEnum executionEngine = null;

  @JsonProperty("flowFileConcurrency")
  private String flowFileConcurrency = null;

  @JsonProperty("flowFileOutboundPolicy")
  private String flowFileOutboundPolicy = null;

  @JsonProperty("funnels")
  private List<VersionedFunnel> funnels = null;

  @JsonProperty("groupIdentifier")
  private String groupIdentifier = null;

  @JsonProperty("identifier")
  private String identifier = null;

  @JsonProperty("inputPorts")
  private List<VersionedPort> inputPorts = null;

  @JsonProperty("instanceIdentifier")
  private String instanceIdentifier = null;

  @JsonProperty("labels")
  private List<VersionedLabel> labels = null;

  @JsonProperty("logFileSuffix")
  private String logFileSuffix = null;

  @JsonProperty("maxConcurrentTasks")
  private Integer maxConcurrentTasks = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("outputPorts")
  private List<VersionedPort> outputPorts = null;

  @JsonProperty("parameterContextName")
  private String parameterContextName = null;

  @JsonProperty("position")
  private Position position = null;

  @JsonProperty("processGroups")
  private List<VersionedProcessGroup> processGroups = null;

  @JsonProperty("processors")
  private List<VersionedProcessor> processors = null;

  @JsonProperty("remoteProcessGroups")
  private List<VersionedRemoteProcessGroup> remoteProcessGroups = null;

  /**
   * The Scheduled State of the Process Group, if the group is configured to use the Stateless Execution Engine. Otherwise, this value has no relevance.
   */
  public enum ScheduledStateEnum {
    ENABLED("ENABLED"),
    DISABLED("DISABLED"),
    RUNNING("RUNNING");

    private String value;

    ScheduledStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ScheduledStateEnum fromValue(String input) {
      for (ScheduledStateEnum b : ScheduledStateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("scheduledState")
  private ScheduledStateEnum scheduledState = null;

  @JsonProperty("statelessFlowTimeout")
  private String statelessFlowTimeout = null;

  @JsonProperty("versionedFlowCoordinates")
  private VersionedFlowCoordinates versionedFlowCoordinates = null;

  public VersionedProcessGroup comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The user-supplied comments for the component
   * @return comments
  **/
  @Schema(description = "The user-supplied comments for the component")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public VersionedProcessGroup componentType(ComponentTypeEnum componentType) {
    this.componentType = componentType;
    return this;
  }

   /**
   * Get componentType
   * @return componentType
  **/
  @Schema(description = "")
  public ComponentTypeEnum getComponentType() {
    return componentType;
  }

  public void setComponentType(ComponentTypeEnum componentType) {
    this.componentType = componentType;
  }

  public VersionedProcessGroup connections(List<VersionedConnection> connections) {
    this.connections = connections;
    return this;
  }

  public VersionedProcessGroup addConnectionsItem(VersionedConnection connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

   /**
   * The Connections
   * @return connections
  **/
  @Schema(description = "The Connections")
  public List<VersionedConnection> getConnections() {
    return connections;
  }

  public void setConnections(List<VersionedConnection> connections) {
    this.connections = connections;
  }

  public VersionedProcessGroup controllerServices(List<VersionedControllerService> controllerServices) {
    this.controllerServices = controllerServices;
    return this;
  }

  public VersionedProcessGroup addControllerServicesItem(VersionedControllerService controllerServicesItem) {
    if (this.controllerServices == null) {
      this.controllerServices = new ArrayList<>();
    }
    this.controllerServices.add(controllerServicesItem);
    return this;
  }

   /**
   * The Controller Services
   * @return controllerServices
  **/
  @Schema(description = "The Controller Services")
  public List<VersionedControllerService> getControllerServices() {
    return controllerServices;
  }

  public void setControllerServices(List<VersionedControllerService> controllerServices) {
    this.controllerServices = controllerServices;
  }

  public VersionedProcessGroup defaultBackPressureDataSizeThreshold(String defaultBackPressureDataSizeThreshold) {
    this.defaultBackPressureDataSizeThreshold = defaultBackPressureDataSizeThreshold;
    return this;
  }

   /**
   * Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied.
   * @return defaultBackPressureDataSizeThreshold
  **/
  @Schema(description = "Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied.")
  public String getDefaultBackPressureDataSizeThreshold() {
    return defaultBackPressureDataSizeThreshold;
  }

  public void setDefaultBackPressureDataSizeThreshold(String defaultBackPressureDataSizeThreshold) {
    this.defaultBackPressureDataSizeThreshold = defaultBackPressureDataSizeThreshold;
  }

  public VersionedProcessGroup defaultBackPressureObjectThreshold(Long defaultBackPressureObjectThreshold) {
    this.defaultBackPressureObjectThreshold = defaultBackPressureObjectThreshold;
    return this;
  }

   /**
   * Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied.
   * @return defaultBackPressureObjectThreshold
  **/
  @Schema(description = "Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied.")
  public Long getDefaultBackPressureObjectThreshold() {
    return defaultBackPressureObjectThreshold;
  }

  public void setDefaultBackPressureObjectThreshold(Long defaultBackPressureObjectThreshold) {
    this.defaultBackPressureObjectThreshold = defaultBackPressureObjectThreshold;
  }

  public VersionedProcessGroup defaultFlowFileExpiration(String defaultFlowFileExpiration) {
    this.defaultFlowFileExpiration = defaultFlowFileExpiration;
    return this;
  }

   /**
   * The default FlowFile Expiration for this Process Group.
   * @return defaultFlowFileExpiration
  **/
  @Schema(description = "The default FlowFile Expiration for this Process Group.")
  public String getDefaultFlowFileExpiration() {
    return defaultFlowFileExpiration;
  }

  public void setDefaultFlowFileExpiration(String defaultFlowFileExpiration) {
    this.defaultFlowFileExpiration = defaultFlowFileExpiration;
  }

  public VersionedProcessGroup executionEngine(ExecutionEngineEnum executionEngine) {
    this.executionEngine = executionEngine;
    return this;
  }

   /**
   * The Execution Engine that should be used to run the components within the group.
   * @return executionEngine
  **/
  @Schema(description = "The Execution Engine that should be used to run the components within the group.")
  public ExecutionEngineEnum getExecutionEngine() {
    return executionEngine;
  }

  public void setExecutionEngine(ExecutionEngineEnum executionEngine) {
    this.executionEngine = executionEngine;
  }

  public VersionedProcessGroup flowFileConcurrency(String flowFileConcurrency) {
    this.flowFileConcurrency = flowFileConcurrency;
    return this;
  }

   /**
   * The configured FlowFile Concurrency for the Process Group
   * @return flowFileConcurrency
  **/
  @Schema(description = "The configured FlowFile Concurrency for the Process Group")
  public String getFlowFileConcurrency() {
    return flowFileConcurrency;
  }

  public void setFlowFileConcurrency(String flowFileConcurrency) {
    this.flowFileConcurrency = flowFileConcurrency;
  }

  public VersionedProcessGroup flowFileOutboundPolicy(String flowFileOutboundPolicy) {
    this.flowFileOutboundPolicy = flowFileOutboundPolicy;
    return this;
  }

   /**
   * The FlowFile Outbound Policy for the Process Group
   * @return flowFileOutboundPolicy
  **/
  @Schema(description = "The FlowFile Outbound Policy for the Process Group")
  public String getFlowFileOutboundPolicy() {
    return flowFileOutboundPolicy;
  }

  public void setFlowFileOutboundPolicy(String flowFileOutboundPolicy) {
    this.flowFileOutboundPolicy = flowFileOutboundPolicy;
  }

  public VersionedProcessGroup funnels(List<VersionedFunnel> funnels) {
    this.funnels = funnels;
    return this;
  }

  public VersionedProcessGroup addFunnelsItem(VersionedFunnel funnelsItem) {
    if (this.funnels == null) {
      this.funnels = new ArrayList<>();
    }
    this.funnels.add(funnelsItem);
    return this;
  }

   /**
   * The Funnels
   * @return funnels
  **/
  @Schema(description = "The Funnels")
  public List<VersionedFunnel> getFunnels() {
    return funnels;
  }

  public void setFunnels(List<VersionedFunnel> funnels) {
    this.funnels = funnels;
  }

  public VersionedProcessGroup groupIdentifier(String groupIdentifier) {
    this.groupIdentifier = groupIdentifier;
    return this;
  }

   /**
   * The ID of the Process Group that this component belongs to
   * @return groupIdentifier
  **/
  @Schema(description = "The ID of the Process Group that this component belongs to")
  public String getGroupIdentifier() {
    return groupIdentifier;
  }

  public void setGroupIdentifier(String groupIdentifier) {
    this.groupIdentifier = groupIdentifier;
  }

  public VersionedProcessGroup identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The component&#x27;s unique identifier
   * @return identifier
  **/
  @Schema(description = "The component's unique identifier")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public VersionedProcessGroup inputPorts(List<VersionedPort> inputPorts) {
    this.inputPorts = inputPorts;
    return this;
  }

  public VersionedProcessGroup addInputPortsItem(VersionedPort inputPortsItem) {
    if (this.inputPorts == null) {
      this.inputPorts = new ArrayList<>();
    }
    this.inputPorts.add(inputPortsItem);
    return this;
  }

   /**
   * The Input Ports
   * @return inputPorts
  **/
  @Schema(description = "The Input Ports")
  public List<VersionedPort> getInputPorts() {
    return inputPorts;
  }

  public void setInputPorts(List<VersionedPort> inputPorts) {
    this.inputPorts = inputPorts;
  }

  public VersionedProcessGroup instanceIdentifier(String instanceIdentifier) {
    this.instanceIdentifier = instanceIdentifier;
    return this;
  }

   /**
   * The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
   * @return instanceIdentifier
  **/
  @Schema(description = "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component")
  public String getInstanceIdentifier() {
    return instanceIdentifier;
  }

  public void setInstanceIdentifier(String instanceIdentifier) {
    this.instanceIdentifier = instanceIdentifier;
  }

  public VersionedProcessGroup labels(List<VersionedLabel> labels) {
    this.labels = labels;
    return this;
  }

  public VersionedProcessGroup addLabelsItem(VersionedLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * The Labels
   * @return labels
  **/
  @Schema(description = "The Labels")
  public List<VersionedLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<VersionedLabel> labels) {
    this.labels = labels;
  }

  public VersionedProcessGroup logFileSuffix(String logFileSuffix) {
    this.logFileSuffix = logFileSuffix;
    return this;
  }

   /**
   * The log file suffix for this Process Group for dedicated logging.
   * @return logFileSuffix
  **/
  @Schema(description = "The log file suffix for this Process Group for dedicated logging.")
  public String getLogFileSuffix() {
    return logFileSuffix;
  }

  public void setLogFileSuffix(String logFileSuffix) {
    this.logFileSuffix = logFileSuffix;
  }

  public VersionedProcessGroup maxConcurrentTasks(Integer maxConcurrentTasks) {
    this.maxConcurrentTasks = maxConcurrentTasks;
    return this;
  }

   /**
   * The maximum number of concurrent tasks that should be scheduled for this Process Group when using the Stateless Engine
   * @return maxConcurrentTasks
  **/
  @Schema(description = "The maximum number of concurrent tasks that should be scheduled for this Process Group when using the Stateless Engine")
  public Integer getMaxConcurrentTasks() {
    return maxConcurrentTasks;
  }

  public void setMaxConcurrentTasks(Integer maxConcurrentTasks) {
    this.maxConcurrentTasks = maxConcurrentTasks;
  }

  public VersionedProcessGroup name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The component&#x27;s name
   * @return name
  **/
  @Schema(description = "The component's name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public VersionedProcessGroup outputPorts(List<VersionedPort> outputPorts) {
    this.outputPorts = outputPorts;
    return this;
  }

  public VersionedProcessGroup addOutputPortsItem(VersionedPort outputPortsItem) {
    if (this.outputPorts == null) {
      this.outputPorts = new ArrayList<>();
    }
    this.outputPorts.add(outputPortsItem);
    return this;
  }

   /**
   * The Output Ports
   * @return outputPorts
  **/
  @Schema(description = "The Output Ports")
  public List<VersionedPort> getOutputPorts() {
    return outputPorts;
  }

  public void setOutputPorts(List<VersionedPort> outputPorts) {
    this.outputPorts = outputPorts;
  }

  public VersionedProcessGroup parameterContextName(String parameterContextName) {
    this.parameterContextName = parameterContextName;
    return this;
  }

   /**
   * The name of the parameter context used by this process group
   * @return parameterContextName
  **/
  @Schema(description = "The name of the parameter context used by this process group")
  public String getParameterContextName() {
    return parameterContextName;
  }

  public void setParameterContextName(String parameterContextName) {
    this.parameterContextName = parameterContextName;
  }

  public VersionedProcessGroup position(Position position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public Position getPosition() {
    return position;
  }

  public void setPosition(Position position) {
    this.position = position;
  }

  public VersionedProcessGroup processGroups(List<VersionedProcessGroup> processGroups) {
    this.processGroups = processGroups;
    return this;
  }

  public VersionedProcessGroup addProcessGroupsItem(VersionedProcessGroup processGroupsItem) {
    if (this.processGroups == null) {
      this.processGroups = new ArrayList<>();
    }
    this.processGroups.add(processGroupsItem);
    return this;
  }

   /**
   * The child Process Groups
   * @return processGroups
  **/
  @Schema(description = "The child Process Groups")
  public List<VersionedProcessGroup> getProcessGroups() {
    return processGroups;
  }

  public void setProcessGroups(List<VersionedProcessGroup> processGroups) {
    this.processGroups = processGroups;
  }

  public VersionedProcessGroup processors(List<VersionedProcessor> processors) {
    this.processors = processors;
    return this;
  }

  public VersionedProcessGroup addProcessorsItem(VersionedProcessor processorsItem) {
    if (this.processors == null) {
      this.processors = new ArrayList<>();
    }
    this.processors.add(processorsItem);
    return this;
  }

   /**
   * The Processors
   * @return processors
  **/
  @Schema(description = "The Processors")
  public List<VersionedProcessor> getProcessors() {
    return processors;
  }

  public void setProcessors(List<VersionedProcessor> processors) {
    this.processors = processors;
  }

  public VersionedProcessGroup remoteProcessGroups(List<VersionedRemoteProcessGroup> remoteProcessGroups) {
    this.remoteProcessGroups = remoteProcessGroups;
    return this;
  }

  public VersionedProcessGroup addRemoteProcessGroupsItem(VersionedRemoteProcessGroup remoteProcessGroupsItem) {
    if (this.remoteProcessGroups == null) {
      this.remoteProcessGroups = new ArrayList<>();
    }
    this.remoteProcessGroups.add(remoteProcessGroupsItem);
    return this;
  }

   /**
   * The Remote Process Groups
   * @return remoteProcessGroups
  **/
  @Schema(description = "The Remote Process Groups")
  public List<VersionedRemoteProcessGroup> getRemoteProcessGroups() {
    return remoteProcessGroups;
  }

  public void setRemoteProcessGroups(List<VersionedRemoteProcessGroup> remoteProcessGroups) {
    this.remoteProcessGroups = remoteProcessGroups;
  }

  public VersionedProcessGroup scheduledState(ScheduledStateEnum scheduledState) {
    this.scheduledState = scheduledState;
    return this;
  }

   /**
   * The Scheduled State of the Process Group, if the group is configured to use the Stateless Execution Engine. Otherwise, this value has no relevance.
   * @return scheduledState
  **/
  @Schema(description = "The Scheduled State of the Process Group, if the group is configured to use the Stateless Execution Engine. Otherwise, this value has no relevance.")
  public ScheduledStateEnum getScheduledState() {
    return scheduledState;
  }

  public void setScheduledState(ScheduledStateEnum scheduledState) {
    this.scheduledState = scheduledState;
  }

  public VersionedProcessGroup statelessFlowTimeout(String statelessFlowTimeout) {
    this.statelessFlowTimeout = statelessFlowTimeout;
    return this;
  }

   /**
   * The maximum amount of time that the flow is allows to run using the Stateless engine before it times out and is considered a failure
   * @return statelessFlowTimeout
  **/
  @Schema(description = "The maximum amount of time that the flow is allows to run using the Stateless engine before it times out and is considered a failure")
  public String getStatelessFlowTimeout() {
    return statelessFlowTimeout;
  }

  public void setStatelessFlowTimeout(String statelessFlowTimeout) {
    this.statelessFlowTimeout = statelessFlowTimeout;
  }

  public VersionedProcessGroup versionedFlowCoordinates(VersionedFlowCoordinates versionedFlowCoordinates) {
    this.versionedFlowCoordinates = versionedFlowCoordinates;
    return this;
  }

   /**
   * Get versionedFlowCoordinates
   * @return versionedFlowCoordinates
  **/
  @Schema(description = "")
  public VersionedFlowCoordinates getVersionedFlowCoordinates() {
    return versionedFlowCoordinates;
  }

  public void setVersionedFlowCoordinates(VersionedFlowCoordinates versionedFlowCoordinates) {
    this.versionedFlowCoordinates = versionedFlowCoordinates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedProcessGroup versionedProcessGroup = (VersionedProcessGroup) o;
    return Objects.equals(this.comments, versionedProcessGroup.comments) &&
        Objects.equals(this.componentType, versionedProcessGroup.componentType) &&
        Objects.equals(this.connections, versionedProcessGroup.connections) &&
        Objects.equals(this.controllerServices, versionedProcessGroup.controllerServices) &&
        Objects.equals(this.defaultBackPressureDataSizeThreshold, versionedProcessGroup.defaultBackPressureDataSizeThreshold) &&
        Objects.equals(this.defaultBackPressureObjectThreshold, versionedProcessGroup.defaultBackPressureObjectThreshold) &&
        Objects.equals(this.defaultFlowFileExpiration, versionedProcessGroup.defaultFlowFileExpiration) &&
        Objects.equals(this.executionEngine, versionedProcessGroup.executionEngine) &&
        Objects.equals(this.flowFileConcurrency, versionedProcessGroup.flowFileConcurrency) &&
        Objects.equals(this.flowFileOutboundPolicy, versionedProcessGroup.flowFileOutboundPolicy) &&
        Objects.equals(this.funnels, versionedProcessGroup.funnels) &&
        Objects.equals(this.groupIdentifier, versionedProcessGroup.groupIdentifier) &&
        Objects.equals(this.identifier, versionedProcessGroup.identifier) &&
        Objects.equals(this.inputPorts, versionedProcessGroup.inputPorts) &&
        Objects.equals(this.instanceIdentifier, versionedProcessGroup.instanceIdentifier) &&
        Objects.equals(this.labels, versionedProcessGroup.labels) &&
        Objects.equals(this.logFileSuffix, versionedProcessGroup.logFileSuffix) &&
        Objects.equals(this.maxConcurrentTasks, versionedProcessGroup.maxConcurrentTasks) &&
        Objects.equals(this.name, versionedProcessGroup.name) &&
        Objects.equals(this.outputPorts, versionedProcessGroup.outputPorts) &&
        Objects.equals(this.parameterContextName, versionedProcessGroup.parameterContextName) &&
        Objects.equals(this.position, versionedProcessGroup.position) &&
        Objects.equals(this.processGroups, versionedProcessGroup.processGroups) &&
        Objects.equals(this.processors, versionedProcessGroup.processors) &&
        Objects.equals(this.remoteProcessGroups, versionedProcessGroup.remoteProcessGroups) &&
        Objects.equals(this.scheduledState, versionedProcessGroup.scheduledState) &&
        Objects.equals(this.statelessFlowTimeout, versionedProcessGroup.statelessFlowTimeout) &&
        Objects.equals(this.versionedFlowCoordinates, versionedProcessGroup.versionedFlowCoordinates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, componentType, connections, controllerServices, defaultBackPressureDataSizeThreshold, defaultBackPressureObjectThreshold, defaultFlowFileExpiration, executionEngine, flowFileConcurrency, flowFileOutboundPolicy, funnels, groupIdentifier, identifier, inputPorts, instanceIdentifier, labels, logFileSuffix, maxConcurrentTasks, name, outputPorts, parameterContextName, position, processGroups, processors, remoteProcessGroups, scheduledState, statelessFlowTimeout, versionedFlowCoordinates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedProcessGroup {\n");
    
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    controllerServices: ").append(toIndentedString(controllerServices)).append("\n");
    sb.append("    defaultBackPressureDataSizeThreshold: ").append(toIndentedString(defaultBackPressureDataSizeThreshold)).append("\n");
    sb.append("    defaultBackPressureObjectThreshold: ").append(toIndentedString(defaultBackPressureObjectThreshold)).append("\n");
    sb.append("    defaultFlowFileExpiration: ").append(toIndentedString(defaultFlowFileExpiration)).append("\n");
    sb.append("    executionEngine: ").append(toIndentedString(executionEngine)).append("\n");
    sb.append("    flowFileConcurrency: ").append(toIndentedString(flowFileConcurrency)).append("\n");
    sb.append("    flowFileOutboundPolicy: ").append(toIndentedString(flowFileOutboundPolicy)).append("\n");
    sb.append("    funnels: ").append(toIndentedString(funnels)).append("\n");
    sb.append("    groupIdentifier: ").append(toIndentedString(groupIdentifier)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    inputPorts: ").append(toIndentedString(inputPorts)).append("\n");
    sb.append("    instanceIdentifier: ").append(toIndentedString(instanceIdentifier)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    logFileSuffix: ").append(toIndentedString(logFileSuffix)).append("\n");
    sb.append("    maxConcurrentTasks: ").append(toIndentedString(maxConcurrentTasks)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputPorts: ").append(toIndentedString(outputPorts)).append("\n");
    sb.append("    parameterContextName: ").append(toIndentedString(parameterContextName)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    processGroups: ").append(toIndentedString(processGroups)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    remoteProcessGroups: ").append(toIndentedString(remoteProcessGroups)).append("\n");
    sb.append("    scheduledState: ").append(toIndentedString(scheduledState)).append("\n");
    sb.append("    statelessFlowTimeout: ").append(toIndentedString(statelessFlowTimeout)).append("\n");
    sb.append("    versionedFlowCoordinates: ").append(toIndentedString(versionedFlowCoordinates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

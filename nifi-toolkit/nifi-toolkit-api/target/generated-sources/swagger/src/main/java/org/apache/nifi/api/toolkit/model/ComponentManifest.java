/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.ControllerServiceDefinition;
import org.apache.nifi.api.toolkit.model.DefinedType;
import org.apache.nifi.api.toolkit.model.FlowAnalysisRuleDefinition;
import org.apache.nifi.api.toolkit.model.ParameterProviderDefinition;
import org.apache.nifi.api.toolkit.model.ProcessorDefinition;
import org.apache.nifi.api.toolkit.model.ReportingTaskDefinition;
/**
 * The full specification of the bundle contents
 */
@Schema(description = "The full specification of the bundle contents")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ComponentManifest {
  @JsonProperty("apis")
  private List<DefinedType> apis = null;

  @JsonProperty("controllerServices")
  private List<ControllerServiceDefinition> controllerServices = null;

  @JsonProperty("flowAnalysisRules")
  private List<FlowAnalysisRuleDefinition> flowAnalysisRules = null;

  @JsonProperty("parameterProviders")
  private List<ParameterProviderDefinition> parameterProviders = null;

  @JsonProperty("processors")
  private List<ProcessorDefinition> processors = null;

  @JsonProperty("reportingTasks")
  private List<ReportingTaskDefinition> reportingTasks = null;

  public ComponentManifest apis(List<DefinedType> apis) {
    this.apis = apis;
    return this;
  }

  public ComponentManifest addApisItem(DefinedType apisItem) {
    if (this.apis == null) {
      this.apis = new ArrayList<>();
    }
    this.apis.add(apisItem);
    return this;
  }

   /**
   * Public interfaces defined in this bundle
   * @return apis
  **/
  @Schema(description = "Public interfaces defined in this bundle")
  public List<DefinedType> getApis() {
    return apis;
  }

  public void setApis(List<DefinedType> apis) {
    this.apis = apis;
  }

  public ComponentManifest controllerServices(List<ControllerServiceDefinition> controllerServices) {
    this.controllerServices = controllerServices;
    return this;
  }

  public ComponentManifest addControllerServicesItem(ControllerServiceDefinition controllerServicesItem) {
    if (this.controllerServices == null) {
      this.controllerServices = new ArrayList<>();
    }
    this.controllerServices.add(controllerServicesItem);
    return this;
  }

   /**
   * Controller Services provided in this bundle
   * @return controllerServices
  **/
  @Schema(description = "Controller Services provided in this bundle")
  public List<ControllerServiceDefinition> getControllerServices() {
    return controllerServices;
  }

  public void setControllerServices(List<ControllerServiceDefinition> controllerServices) {
    this.controllerServices = controllerServices;
  }

  public ComponentManifest flowAnalysisRules(List<FlowAnalysisRuleDefinition> flowAnalysisRules) {
    this.flowAnalysisRules = flowAnalysisRules;
    return this;
  }

  public ComponentManifest addFlowAnalysisRulesItem(FlowAnalysisRuleDefinition flowAnalysisRulesItem) {
    if (this.flowAnalysisRules == null) {
      this.flowAnalysisRules = new ArrayList<>();
    }
    this.flowAnalysisRules.add(flowAnalysisRulesItem);
    return this;
  }

   /**
   * Flow Analysis Rules provided in this bundle
   * @return flowAnalysisRules
  **/
  @Schema(description = "Flow Analysis Rules provided in this bundle")
  public List<FlowAnalysisRuleDefinition> getFlowAnalysisRules() {
    return flowAnalysisRules;
  }

  public void setFlowAnalysisRules(List<FlowAnalysisRuleDefinition> flowAnalysisRules) {
    this.flowAnalysisRules = flowAnalysisRules;
  }

  public ComponentManifest parameterProviders(List<ParameterProviderDefinition> parameterProviders) {
    this.parameterProviders = parameterProviders;
    return this;
  }

  public ComponentManifest addParameterProvidersItem(ParameterProviderDefinition parameterProvidersItem) {
    if (this.parameterProviders == null) {
      this.parameterProviders = new ArrayList<>();
    }
    this.parameterProviders.add(parameterProvidersItem);
    return this;
  }

   /**
   * Parameter Providers provided in this bundle
   * @return parameterProviders
  **/
  @Schema(description = "Parameter Providers provided in this bundle")
  public List<ParameterProviderDefinition> getParameterProviders() {
    return parameterProviders;
  }

  public void setParameterProviders(List<ParameterProviderDefinition> parameterProviders) {
    this.parameterProviders = parameterProviders;
  }

  public ComponentManifest processors(List<ProcessorDefinition> processors) {
    this.processors = processors;
    return this;
  }

  public ComponentManifest addProcessorsItem(ProcessorDefinition processorsItem) {
    if (this.processors == null) {
      this.processors = new ArrayList<>();
    }
    this.processors.add(processorsItem);
    return this;
  }

   /**
   * Processors provided in this bundle
   * @return processors
  **/
  @Schema(description = "Processors provided in this bundle")
  public List<ProcessorDefinition> getProcessors() {
    return processors;
  }

  public void setProcessors(List<ProcessorDefinition> processors) {
    this.processors = processors;
  }

  public ComponentManifest reportingTasks(List<ReportingTaskDefinition> reportingTasks) {
    this.reportingTasks = reportingTasks;
    return this;
  }

  public ComponentManifest addReportingTasksItem(ReportingTaskDefinition reportingTasksItem) {
    if (this.reportingTasks == null) {
      this.reportingTasks = new ArrayList<>();
    }
    this.reportingTasks.add(reportingTasksItem);
    return this;
  }

   /**
   * Reporting Tasks provided in this bundle
   * @return reportingTasks
  **/
  @Schema(description = "Reporting Tasks provided in this bundle")
  public List<ReportingTaskDefinition> getReportingTasks() {
    return reportingTasks;
  }

  public void setReportingTasks(List<ReportingTaskDefinition> reportingTasks) {
    this.reportingTasks = reportingTasks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentManifest componentManifest = (ComponentManifest) o;
    return Objects.equals(this.apis, componentManifest.apis) &&
        Objects.equals(this.controllerServices, componentManifest.controllerServices) &&
        Objects.equals(this.flowAnalysisRules, componentManifest.flowAnalysisRules) &&
        Objects.equals(this.parameterProviders, componentManifest.parameterProviders) &&
        Objects.equals(this.processors, componentManifest.processors) &&
        Objects.equals(this.reportingTasks, componentManifest.reportingTasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apis, controllerServices, flowAnalysisRules, parameterProviders, processors, reportingTasks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentManifest {\n");
    
    sb.append("    apis: ").append(toIndentedString(apis)).append("\n");
    sb.append("    controllerServices: ").append(toIndentedString(controllerServices)).append("\n");
    sb.append("    flowAnalysisRules: ").append(toIndentedString(flowAnalysisRules)).append("\n");
    sb.append("    parameterProviders: ").append(toIndentedString(parameterProviders)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    reportingTasks: ").append(toIndentedString(reportingTasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.BundleDTO;
import org.apache.nifi.api.toolkit.model.ControllerServiceApiDTO;
import org.apache.nifi.api.toolkit.model.ExplicitRestrictionDTO;
/**
 * DocumentedTypeDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class DocumentedTypeDTO {
  @JsonProperty("bundle")
  private BundleDTO bundle = null;

  @JsonProperty("controllerServiceApis")
  private List<ControllerServiceApiDTO> controllerServiceApis = null;

  @JsonProperty("deprecationReason")
  private String deprecationReason = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("explicitRestrictions")
  private List<ExplicitRestrictionDTO> explicitRestrictions = null;

  @JsonProperty("restricted")
  private Boolean restricted = null;

  @JsonProperty("tags")
  private List<String> tags = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("usageRestriction")
  private String usageRestriction = null;

  public DocumentedTypeDTO bundle(BundleDTO bundle) {
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @Schema(description = "")
  public BundleDTO getBundle() {
    return bundle;
  }

  public void setBundle(BundleDTO bundle) {
    this.bundle = bundle;
  }

  public DocumentedTypeDTO controllerServiceApis(List<ControllerServiceApiDTO> controllerServiceApis) {
    this.controllerServiceApis = controllerServiceApis;
    return this;
  }

  public DocumentedTypeDTO addControllerServiceApisItem(ControllerServiceApiDTO controllerServiceApisItem) {
    if (this.controllerServiceApis == null) {
      this.controllerServiceApis = new ArrayList<>();
    }
    this.controllerServiceApis.add(controllerServiceApisItem);
    return this;
  }

   /**
   * If this type represents a ControllerService, this lists the APIs it implements.
   * @return controllerServiceApis
  **/
  @Schema(description = "If this type represents a ControllerService, this lists the APIs it implements.")
  public List<ControllerServiceApiDTO> getControllerServiceApis() {
    return controllerServiceApis;
  }

  public void setControllerServiceApis(List<ControllerServiceApiDTO> controllerServiceApis) {
    this.controllerServiceApis = controllerServiceApis;
  }

  public DocumentedTypeDTO deprecationReason(String deprecationReason) {
    this.deprecationReason = deprecationReason;
    return this;
  }

   /**
   * The description of why the usage of this component is restricted.
   * @return deprecationReason
  **/
  @Schema(description = "The description of why the usage of this component is restricted.")
  public String getDeprecationReason() {
    return deprecationReason;
  }

  public void setDeprecationReason(String deprecationReason) {
    this.deprecationReason = deprecationReason;
  }

  public DocumentedTypeDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the type.
   * @return description
  **/
  @Schema(description = "The description of the type.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DocumentedTypeDTO explicitRestrictions(List<ExplicitRestrictionDTO> explicitRestrictions) {
    this.explicitRestrictions = explicitRestrictions;
    return this;
  }

  public DocumentedTypeDTO addExplicitRestrictionsItem(ExplicitRestrictionDTO explicitRestrictionsItem) {
    if (this.explicitRestrictions == null) {
      this.explicitRestrictions = new ArrayList<>();
    }
    this.explicitRestrictions.add(explicitRestrictionsItem);
    return this;
  }

   /**
   * An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored.
   * @return explicitRestrictions
  **/
  @Schema(description = "An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored.")
  public List<ExplicitRestrictionDTO> getExplicitRestrictions() {
    return explicitRestrictions;
  }

  public void setExplicitRestrictions(List<ExplicitRestrictionDTO> explicitRestrictions) {
    this.explicitRestrictions = explicitRestrictions;
  }

  public DocumentedTypeDTO restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Whether this type is restricted.
   * @return restricted
  **/
  @Schema(description = "Whether this type is restricted.")
  public Boolean isRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }

  public DocumentedTypeDTO tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DocumentedTypeDTO addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags associated with this type.
   * @return tags
  **/
  @Schema(description = "The tags associated with this type.")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public DocumentedTypeDTO type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The fully qualified name of the type.
   * @return type
  **/
  @Schema(description = "The fully qualified name of the type.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DocumentedTypeDTO usageRestriction(String usageRestriction) {
    this.usageRestriction = usageRestriction;
    return this;
  }

   /**
   * The optional description of why the usage of this component is restricted.
   * @return usageRestriction
  **/
  @Schema(description = "The optional description of why the usage of this component is restricted.")
  public String getUsageRestriction() {
    return usageRestriction;
  }

  public void setUsageRestriction(String usageRestriction) {
    this.usageRestriction = usageRestriction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentedTypeDTO documentedTypeDTO = (DocumentedTypeDTO) o;
    return Objects.equals(this.bundle, documentedTypeDTO.bundle) &&
        Objects.equals(this.controllerServiceApis, documentedTypeDTO.controllerServiceApis) &&
        Objects.equals(this.deprecationReason, documentedTypeDTO.deprecationReason) &&
        Objects.equals(this.description, documentedTypeDTO.description) &&
        Objects.equals(this.explicitRestrictions, documentedTypeDTO.explicitRestrictions) &&
        Objects.equals(this.restricted, documentedTypeDTO.restricted) &&
        Objects.equals(this.tags, documentedTypeDTO.tags) &&
        Objects.equals(this.type, documentedTypeDTO.type) &&
        Objects.equals(this.usageRestriction, documentedTypeDTO.usageRestriction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundle, controllerServiceApis, deprecationReason, description, explicitRestrictions, restricted, tags, type, usageRestriction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentedTypeDTO {\n");
    
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    controllerServiceApis: ").append(toIndentedString(controllerServiceApis)).append("\n");
    sb.append("    deprecationReason: ").append(toIndentedString(deprecationReason)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    explicitRestrictions: ").append(toIndentedString(explicitRestrictions)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usageRestriction: ").append(toIndentedString(usageRestriction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

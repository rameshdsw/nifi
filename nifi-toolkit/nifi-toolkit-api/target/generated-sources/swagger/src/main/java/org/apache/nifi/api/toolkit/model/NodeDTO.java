/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.NodeEventDTO;
/**
 * NodeDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class NodeDTO {
  @JsonProperty("activeThreadCount")
  private Integer activeThreadCount = null;

  @JsonProperty("address")
  private String address = null;

  @JsonProperty("apiPort")
  private Integer apiPort = null;

  @JsonProperty("bytesQueued")
  private Long bytesQueued = null;

  @JsonProperty("connectionRequested")
  private String connectionRequested = null;

  @JsonProperty("events")
  private List<NodeEventDTO> events = null;

  @JsonProperty("flowFileBytes")
  private Long flowFileBytes = null;

  @JsonProperty("flowFilesQueued")
  private Integer flowFilesQueued = null;

  @JsonProperty("heartbeat")
  private String heartbeat = null;

  @JsonProperty("nodeId")
  private String nodeId = null;

  @JsonProperty("nodeStartTime")
  private String nodeStartTime = null;

  @JsonProperty("queued")
  private String queued = null;

  @JsonProperty("roles")
  private List<String> roles = null;

  @JsonProperty("status")
  private String status = null;

   /**
   * The active threads for the NiFi on the node.
   * @return activeThreadCount
  **/
  @Schema(description = "The active threads for the NiFi on the node.")
  public Integer getActiveThreadCount() {
    return activeThreadCount;
  }

   /**
   * The node&#x27;s host/ip address.
   * @return address
  **/
  @Schema(description = "The node's host/ip address.")
  public String getAddress() {
    return address;
  }

   /**
   * The port the node is listening for API requests.
   * @return apiPort
  **/
  @Schema(description = "The port the node is listening for API requests.")
  public Integer getApiPort() {
    return apiPort;
  }

   /**
   * The total size of all FlowFiles that are queued up on the node
   * @return bytesQueued
  **/
  @Schema(description = "The total size of all FlowFiles that are queued up on the node")
  public Long getBytesQueued() {
    return bytesQueued;
  }

   /**
   * The time of the node&#x27;s last connection request.
   * @return connectionRequested
  **/
  @Schema(description = "The time of the node's last connection request.")
  public String getConnectionRequested() {
    return connectionRequested;
  }

   /**
   * The node&#x27;s events.
   * @return events
  **/
  @Schema(description = "The node's events.")
  public List<NodeEventDTO> getEvents() {
    return events;
  }

  public NodeDTO flowFileBytes(Long flowFileBytes) {
    this.flowFileBytes = flowFileBytes;
    return this;
  }

   /**
   * Get flowFileBytes
   * @return flowFileBytes
  **/
  @Schema(description = "")
  public Long getFlowFileBytes() {
    return flowFileBytes;
  }

  public void setFlowFileBytes(Long flowFileBytes) {
    this.flowFileBytes = flowFileBytes;
  }

   /**
   * The number of FlowFiles that are queued up on the node
   * @return flowFilesQueued
  **/
  @Schema(description = "The number of FlowFiles that are queued up on the node")
  public Integer getFlowFilesQueued() {
    return flowFilesQueued;
  }

   /**
   * the time of the nodes&#x27;s last heartbeat.
   * @return heartbeat
  **/
  @Schema(description = "the time of the nodes's last heartbeat.")
  public String getHeartbeat() {
    return heartbeat;
  }

   /**
   * The id of the node.
   * @return nodeId
  **/
  @Schema(description = "The id of the node.")
  public String getNodeId() {
    return nodeId;
  }

   /**
   * The time at which this Node was last refreshed.
   * @return nodeStartTime
  **/
  @Schema(description = "The time at which this Node was last refreshed.")
  public String getNodeStartTime() {
    return nodeStartTime;
  }

   /**
   * The queue the NiFi on the node.
   * @return queued
  **/
  @Schema(description = "The queue the NiFi on the node.")
  public String getQueued() {
    return queued;
  }

   /**
   * The roles of this node.
   * @return roles
  **/
  @Schema(description = "The roles of this node.")
  public List<String> getRoles() {
    return roles;
  }

  public NodeDTO status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The node&#x27;s status.
   * @return status
  **/
  @Schema(description = "The node's status.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeDTO nodeDTO = (NodeDTO) o;
    return Objects.equals(this.activeThreadCount, nodeDTO.activeThreadCount) &&
        Objects.equals(this.address, nodeDTO.address) &&
        Objects.equals(this.apiPort, nodeDTO.apiPort) &&
        Objects.equals(this.bytesQueued, nodeDTO.bytesQueued) &&
        Objects.equals(this.connectionRequested, nodeDTO.connectionRequested) &&
        Objects.equals(this.events, nodeDTO.events) &&
        Objects.equals(this.flowFileBytes, nodeDTO.flowFileBytes) &&
        Objects.equals(this.flowFilesQueued, nodeDTO.flowFilesQueued) &&
        Objects.equals(this.heartbeat, nodeDTO.heartbeat) &&
        Objects.equals(this.nodeId, nodeDTO.nodeId) &&
        Objects.equals(this.nodeStartTime, nodeDTO.nodeStartTime) &&
        Objects.equals(this.queued, nodeDTO.queued) &&
        Objects.equals(this.roles, nodeDTO.roles) &&
        Objects.equals(this.status, nodeDTO.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThreadCount, address, apiPort, bytesQueued, connectionRequested, events, flowFileBytes, flowFilesQueued, heartbeat, nodeId, nodeStartTime, queued, roles, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeDTO {\n");
    
    sb.append("    activeThreadCount: ").append(toIndentedString(activeThreadCount)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    apiPort: ").append(toIndentedString(apiPort)).append("\n");
    sb.append("    bytesQueued: ").append(toIndentedString(bytesQueued)).append("\n");
    sb.append("    connectionRequested: ").append(toIndentedString(connectionRequested)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    flowFileBytes: ").append(toIndentedString(flowFileBytes)).append("\n");
    sb.append("    flowFilesQueued: ").append(toIndentedString(flowFilesQueued)).append("\n");
    sb.append("    heartbeat: ").append(toIndentedString(heartbeat)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeStartTime: ").append(toIndentedString(nodeStartTime)).append("\n");
    sb.append("    queued: ").append(toIndentedString(queued)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

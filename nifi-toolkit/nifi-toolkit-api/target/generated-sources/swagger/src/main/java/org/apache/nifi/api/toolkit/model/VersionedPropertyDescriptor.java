/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.apache.nifi.api.toolkit.model.VersionedResourceDefinition;
/**
 * The property descriptors for the component.
 */
@Schema(description = "The property descriptors for the component.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class VersionedPropertyDescriptor {
  @JsonProperty("displayName")
  private String displayName = null;

  @JsonProperty("dynamic")
  private Boolean dynamic = null;

  @JsonProperty("identifiesControllerService")
  private Boolean identifiesControllerService = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("resourceDefinition")
  private VersionedResourceDefinition resourceDefinition = null;

  @JsonProperty("sensitive")
  private Boolean sensitive = null;

  public VersionedPropertyDescriptor displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the property
   * @return displayName
  **/
  @Schema(description = "The display name of the property")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public VersionedPropertyDescriptor dynamic(Boolean dynamic) {
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Whether or not the property is user-defined
   * @return dynamic
  **/
  @Schema(description = "Whether or not the property is user-defined")
  public Boolean isDynamic() {
    return dynamic;
  }

  public void setDynamic(Boolean dynamic) {
    this.dynamic = dynamic;
  }

  public VersionedPropertyDescriptor identifiesControllerService(Boolean identifiesControllerService) {
    this.identifiesControllerService = identifiesControllerService;
    return this;
  }

   /**
   * Whether or not the property provides the identifier of a Controller Service
   * @return identifiesControllerService
  **/
  @Schema(description = "Whether or not the property provides the identifier of a Controller Service")
  public Boolean isIdentifiesControllerService() {
    return identifiesControllerService;
  }

  public void setIdentifiesControllerService(Boolean identifiesControllerService) {
    this.identifiesControllerService = identifiesControllerService;
  }

  public VersionedPropertyDescriptor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the property
   * @return name
  **/
  @Schema(description = "The name of the property")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public VersionedPropertyDescriptor resourceDefinition(VersionedResourceDefinition resourceDefinition) {
    this.resourceDefinition = resourceDefinition;
    return this;
  }

   /**
   * Get resourceDefinition
   * @return resourceDefinition
  **/
  @Schema(description = "")
  public VersionedResourceDefinition getResourceDefinition() {
    return resourceDefinition;
  }

  public void setResourceDefinition(VersionedResourceDefinition resourceDefinition) {
    this.resourceDefinition = resourceDefinition;
  }

  public VersionedPropertyDescriptor sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

   /**
   * Whether or not the property is considered sensitive
   * @return sensitive
  **/
  @Schema(description = "Whether or not the property is considered sensitive")
  public Boolean isSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedPropertyDescriptor versionedPropertyDescriptor = (VersionedPropertyDescriptor) o;
    return Objects.equals(this.displayName, versionedPropertyDescriptor.displayName) &&
        Objects.equals(this.dynamic, versionedPropertyDescriptor.dynamic) &&
        Objects.equals(this.identifiesControllerService, versionedPropertyDescriptor.identifiesControllerService) &&
        Objects.equals(this.name, versionedPropertyDescriptor.name) &&
        Objects.equals(this.resourceDefinition, versionedPropertyDescriptor.resourceDefinition) &&
        Objects.equals(this.sensitive, versionedPropertyDescriptor.sensitive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, dynamic, identifiesControllerService, name, resourceDefinition, sensitive);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedPropertyDescriptor {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    identifiesControllerService: ").append(toIndentedString(identifiesControllerService)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceDefinition: ").append(toIndentedString(resourceDefinition)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

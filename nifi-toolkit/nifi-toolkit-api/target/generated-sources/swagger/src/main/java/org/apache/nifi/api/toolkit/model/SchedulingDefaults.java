/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Scheduling defaults for components defined in this manifest
 */
@Schema(description = "Scheduling defaults for components defined in this manifest")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class SchedulingDefaults {
  @JsonProperty("defaultConcurrentTasksBySchedulingStrategy")
  private Map<String, Integer> defaultConcurrentTasksBySchedulingStrategy = null;

  @JsonProperty("defaultMaxConcurrentTasks")
  private String defaultMaxConcurrentTasks = null;

  @JsonProperty("defaultRunDurationNanos")
  private Long defaultRunDurationNanos = null;

  @JsonProperty("defaultSchedulingPeriodMillis")
  private Long defaultSchedulingPeriodMillis = null;

  @JsonProperty("defaultSchedulingPeriodsBySchedulingStrategy")
  private Map<String, String> defaultSchedulingPeriodsBySchedulingStrategy = null;

  /**
   * The name of the default scheduling strategy
   */
  public enum DefaultSchedulingStrategyEnum {
    TIMER_DRIVEN("TIMER_DRIVEN"),
    CRON_DRIVEN("CRON_DRIVEN");

    private String value;

    DefaultSchedulingStrategyEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DefaultSchedulingStrategyEnum fromValue(String input) {
      for (DefaultSchedulingStrategyEnum b : DefaultSchedulingStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("defaultSchedulingStrategy")
  private DefaultSchedulingStrategyEnum defaultSchedulingStrategy = null;

  @JsonProperty("penalizationPeriodMillis")
  private Long penalizationPeriodMillis = null;

  @JsonProperty("yieldDurationMillis")
  private Long yieldDurationMillis = null;

  public SchedulingDefaults defaultConcurrentTasksBySchedulingStrategy(Map<String, Integer> defaultConcurrentTasksBySchedulingStrategy) {
    this.defaultConcurrentTasksBySchedulingStrategy = defaultConcurrentTasksBySchedulingStrategy;
    return this;
  }

  public SchedulingDefaults putDefaultConcurrentTasksBySchedulingStrategyItem(String key, Integer defaultConcurrentTasksBySchedulingStrategyItem) {
    if (this.defaultConcurrentTasksBySchedulingStrategy == null) {
      this.defaultConcurrentTasksBySchedulingStrategy = new HashMap<>();
    }
    this.defaultConcurrentTasksBySchedulingStrategy.put(key, defaultConcurrentTasksBySchedulingStrategyItem);
    return this;
  }

   /**
   * The default concurrent tasks for each scheduling strategy
   * @return defaultConcurrentTasksBySchedulingStrategy
  **/
  @Schema(description = "The default concurrent tasks for each scheduling strategy")
  public Map<String, Integer> getDefaultConcurrentTasksBySchedulingStrategy() {
    return defaultConcurrentTasksBySchedulingStrategy;
  }

  public void setDefaultConcurrentTasksBySchedulingStrategy(Map<String, Integer> defaultConcurrentTasksBySchedulingStrategy) {
    this.defaultConcurrentTasksBySchedulingStrategy = defaultConcurrentTasksBySchedulingStrategy;
  }

  public SchedulingDefaults defaultMaxConcurrentTasks(String defaultMaxConcurrentTasks) {
    this.defaultMaxConcurrentTasks = defaultMaxConcurrentTasks;
    return this;
  }

   /**
   * The default concurrent tasks
   * @return defaultMaxConcurrentTasks
  **/
  @Schema(description = "The default concurrent tasks")
  public String getDefaultMaxConcurrentTasks() {
    return defaultMaxConcurrentTasks;
  }

  public void setDefaultMaxConcurrentTasks(String defaultMaxConcurrentTasks) {
    this.defaultMaxConcurrentTasks = defaultMaxConcurrentTasks;
  }

  public SchedulingDefaults defaultRunDurationNanos(Long defaultRunDurationNanos) {
    this.defaultRunDurationNanos = defaultRunDurationNanos;
    return this;
  }

   /**
   * The default run duration in nano-seconds
   * @return defaultRunDurationNanos
  **/
  @Schema(description = "The default run duration in nano-seconds")
  public Long getDefaultRunDurationNanos() {
    return defaultRunDurationNanos;
  }

  public void setDefaultRunDurationNanos(Long defaultRunDurationNanos) {
    this.defaultRunDurationNanos = defaultRunDurationNanos;
  }

  public SchedulingDefaults defaultSchedulingPeriodMillis(Long defaultSchedulingPeriodMillis) {
    this.defaultSchedulingPeriodMillis = defaultSchedulingPeriodMillis;
    return this;
  }

   /**
   * The default scheduling period in milliseconds
   * @return defaultSchedulingPeriodMillis
  **/
  @Schema(description = "The default scheduling period in milliseconds")
  public Long getDefaultSchedulingPeriodMillis() {
    return defaultSchedulingPeriodMillis;
  }

  public void setDefaultSchedulingPeriodMillis(Long defaultSchedulingPeriodMillis) {
    this.defaultSchedulingPeriodMillis = defaultSchedulingPeriodMillis;
  }

  public SchedulingDefaults defaultSchedulingPeriodsBySchedulingStrategy(Map<String, String> defaultSchedulingPeriodsBySchedulingStrategy) {
    this.defaultSchedulingPeriodsBySchedulingStrategy = defaultSchedulingPeriodsBySchedulingStrategy;
    return this;
  }

  public SchedulingDefaults putDefaultSchedulingPeriodsBySchedulingStrategyItem(String key, String defaultSchedulingPeriodsBySchedulingStrategyItem) {
    if (this.defaultSchedulingPeriodsBySchedulingStrategy == null) {
      this.defaultSchedulingPeriodsBySchedulingStrategy = new HashMap<>();
    }
    this.defaultSchedulingPeriodsBySchedulingStrategy.put(key, defaultSchedulingPeriodsBySchedulingStrategyItem);
    return this;
  }

   /**
   * The default scheduling period for each scheduling strategy
   * @return defaultSchedulingPeriodsBySchedulingStrategy
  **/
  @Schema(description = "The default scheduling period for each scheduling strategy")
  public Map<String, String> getDefaultSchedulingPeriodsBySchedulingStrategy() {
    return defaultSchedulingPeriodsBySchedulingStrategy;
  }

  public void setDefaultSchedulingPeriodsBySchedulingStrategy(Map<String, String> defaultSchedulingPeriodsBySchedulingStrategy) {
    this.defaultSchedulingPeriodsBySchedulingStrategy = defaultSchedulingPeriodsBySchedulingStrategy;
  }

  public SchedulingDefaults defaultSchedulingStrategy(DefaultSchedulingStrategyEnum defaultSchedulingStrategy) {
    this.defaultSchedulingStrategy = defaultSchedulingStrategy;
    return this;
  }

   /**
   * The name of the default scheduling strategy
   * @return defaultSchedulingStrategy
  **/
  @Schema(description = "The name of the default scheduling strategy")
  public DefaultSchedulingStrategyEnum getDefaultSchedulingStrategy() {
    return defaultSchedulingStrategy;
  }

  public void setDefaultSchedulingStrategy(DefaultSchedulingStrategyEnum defaultSchedulingStrategy) {
    this.defaultSchedulingStrategy = defaultSchedulingStrategy;
  }

  public SchedulingDefaults penalizationPeriodMillis(Long penalizationPeriodMillis) {
    this.penalizationPeriodMillis = penalizationPeriodMillis;
    return this;
  }

   /**
   * The default penalization period in milliseconds
   * @return penalizationPeriodMillis
  **/
  @Schema(description = "The default penalization period in milliseconds")
  public Long getPenalizationPeriodMillis() {
    return penalizationPeriodMillis;
  }

  public void setPenalizationPeriodMillis(Long penalizationPeriodMillis) {
    this.penalizationPeriodMillis = penalizationPeriodMillis;
  }

  public SchedulingDefaults yieldDurationMillis(Long yieldDurationMillis) {
    this.yieldDurationMillis = yieldDurationMillis;
    return this;
  }

   /**
   * The default yield duration in milliseconds
   * @return yieldDurationMillis
  **/
  @Schema(description = "The default yield duration in milliseconds")
  public Long getYieldDurationMillis() {
    return yieldDurationMillis;
  }

  public void setYieldDurationMillis(Long yieldDurationMillis) {
    this.yieldDurationMillis = yieldDurationMillis;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchedulingDefaults schedulingDefaults = (SchedulingDefaults) o;
    return Objects.equals(this.defaultConcurrentTasksBySchedulingStrategy, schedulingDefaults.defaultConcurrentTasksBySchedulingStrategy) &&
        Objects.equals(this.defaultMaxConcurrentTasks, schedulingDefaults.defaultMaxConcurrentTasks) &&
        Objects.equals(this.defaultRunDurationNanos, schedulingDefaults.defaultRunDurationNanos) &&
        Objects.equals(this.defaultSchedulingPeriodMillis, schedulingDefaults.defaultSchedulingPeriodMillis) &&
        Objects.equals(this.defaultSchedulingPeriodsBySchedulingStrategy, schedulingDefaults.defaultSchedulingPeriodsBySchedulingStrategy) &&
        Objects.equals(this.defaultSchedulingStrategy, schedulingDefaults.defaultSchedulingStrategy) &&
        Objects.equals(this.penalizationPeriodMillis, schedulingDefaults.penalizationPeriodMillis) &&
        Objects.equals(this.yieldDurationMillis, schedulingDefaults.yieldDurationMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultConcurrentTasksBySchedulingStrategy, defaultMaxConcurrentTasks, defaultRunDurationNanos, defaultSchedulingPeriodMillis, defaultSchedulingPeriodsBySchedulingStrategy, defaultSchedulingStrategy, penalizationPeriodMillis, yieldDurationMillis);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchedulingDefaults {\n");
    
    sb.append("    defaultConcurrentTasksBySchedulingStrategy: ").append(toIndentedString(defaultConcurrentTasksBySchedulingStrategy)).append("\n");
    sb.append("    defaultMaxConcurrentTasks: ").append(toIndentedString(defaultMaxConcurrentTasks)).append("\n");
    sb.append("    defaultRunDurationNanos: ").append(toIndentedString(defaultRunDurationNanos)).append("\n");
    sb.append("    defaultSchedulingPeriodMillis: ").append(toIndentedString(defaultSchedulingPeriodMillis)).append("\n");
    sb.append("    defaultSchedulingPeriodsBySchedulingStrategy: ").append(toIndentedString(defaultSchedulingPeriodsBySchedulingStrategy)).append("\n");
    sb.append("    defaultSchedulingStrategy: ").append(toIndentedString(defaultSchedulingStrategy)).append("\n");
    sb.append("    penalizationPeriodMillis: ").append(toIndentedString(penalizationPeriodMillis)).append("\n");
    sb.append("    yieldDurationMillis: ").append(toIndentedString(yieldDurationMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

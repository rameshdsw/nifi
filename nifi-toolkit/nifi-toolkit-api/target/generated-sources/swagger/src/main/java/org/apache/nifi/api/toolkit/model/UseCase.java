/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * A list of use cases that have been documented for this Processor
 */
@Schema(description = "A list of use cases that have been documented for this Processor")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class UseCase {
  @JsonProperty("configuration")
  private String _configuration = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * Specifies whether an incoming FlowFile is expected for this use case
   */
  public enum InputRequirementEnum {
    REQUIRED("INPUT_REQUIRED"),
    ALLOWED("INPUT_ALLOWED"),
    FORBIDDEN("INPUT_FORBIDDEN");

    private String value;

    InputRequirementEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static InputRequirementEnum fromValue(String input) {
      for (InputRequirementEnum b : InputRequirementEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("inputRequirement")
  private InputRequirementEnum inputRequirement = null;

  @JsonProperty("keywords")
  private List<String> keywords = null;

  @JsonProperty("notes")
  private String notes = null;

  public UseCase _configuration(String _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * A description of how to configure the Processor to perform the task described in the use case
   * @return _configuration
  **/
  @Schema(description = "A description of how to configure the Processor to perform the task described in the use case")
  public String getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }

  public UseCase description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the use case
   * @return description
  **/
  @Schema(description = "A description of the use case")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public UseCase inputRequirement(InputRequirementEnum inputRequirement) {
    this.inputRequirement = inputRequirement;
    return this;
  }

   /**
   * Specifies whether an incoming FlowFile is expected for this use case
   * @return inputRequirement
  **/
  @Schema(description = "Specifies whether an incoming FlowFile is expected for this use case")
  public InputRequirementEnum getInputRequirement() {
    return inputRequirement;
  }

  public void setInputRequirement(InputRequirementEnum inputRequirement) {
    this.inputRequirement = inputRequirement;
  }

  public UseCase keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public UseCase addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * Keywords that pertain to the use case
   * @return keywords
  **/
  @Schema(description = "Keywords that pertain to the use case")
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }

  public UseCase notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Any pertinent notes about the use case
   * @return notes
  **/
  @Schema(description = "Any pertinent notes about the use case")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UseCase useCase = (UseCase) o;
    return Objects.equals(this._configuration, useCase._configuration) &&
        Objects.equals(this.description, useCase.description) &&
        Objects.equals(this.inputRequirement, useCase.inputRequirement) &&
        Objects.equals(this.keywords, useCase.keywords) &&
        Objects.equals(this.notes, useCase.notes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, description, inputRequirement, keywords, notes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UseCase {\n");
    
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inputRequirement: ").append(toIndentedString(inputRequirement)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

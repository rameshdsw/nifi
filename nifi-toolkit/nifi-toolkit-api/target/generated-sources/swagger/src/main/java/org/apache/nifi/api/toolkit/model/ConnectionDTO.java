/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.ConnectableDTO;
import org.apache.nifi.api.toolkit.model.PositionDTO;
/**
 * The connections in this flow snippet.
 */
@Schema(description = "The connections in this flow snippet.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ConnectionDTO {
  @JsonProperty("availableRelationships")
  private List<String> availableRelationships = null;

  @JsonProperty("backPressureDataSizeThreshold")
  private String backPressureDataSizeThreshold = null;

  @JsonProperty("backPressureObjectThreshold")
  private Long backPressureObjectThreshold = null;

  @JsonProperty("bends")
  private List<PositionDTO> bends = null;

  @JsonProperty("destination")
  private ConnectableDTO destination = null;

  @JsonProperty("flowFileExpiration")
  private String flowFileExpiration = null;

  @JsonProperty("getzIndex")
  private Long getzIndex = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("labelIndex")
  private Integer labelIndex = null;

  /**
   * Whether or not data should be compressed when being transferred between nodes in the cluster.
   */
  public enum LoadBalanceCompressionEnum {
    DO_NOT_COMPRESS("DO_NOT_COMPRESS"),
    COMPRESS_ATTRIBUTES_ONLY("COMPRESS_ATTRIBUTES_ONLY"),
    COMPRESS_ATTRIBUTES_AND_CONTENT("COMPRESS_ATTRIBUTES_AND_CONTENT");

    private String value;

    LoadBalanceCompressionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static LoadBalanceCompressionEnum fromValue(String input) {
      for (LoadBalanceCompressionEnum b : LoadBalanceCompressionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("loadBalanceCompression")
  private LoadBalanceCompressionEnum loadBalanceCompression = null;

  @JsonProperty("loadBalancePartitionAttribute")
  private String loadBalancePartitionAttribute = null;

  /**
   * The current status of the Connection&#x27;s Load Balancing Activities. Status can indicate that Load Balancing is not configured for the connection, that Load Balancing is configured but inactive (not currently transferring data to another node), or that Load Balancing is configured and actively transferring data to another node.
   */
  public enum LoadBalanceStatusEnum {
    NOT_CONFIGURED("LOAD_BALANCE_NOT_CONFIGURED"),
    INACTIVE("LOAD_BALANCE_INACTIVE"),
    ACTIVE("LOAD_BALANCE_ACTIVE");

    private String value;

    LoadBalanceStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static LoadBalanceStatusEnum fromValue(String input) {
      for (LoadBalanceStatusEnum b : LoadBalanceStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("loadBalanceStatus")
  private LoadBalanceStatusEnum loadBalanceStatus = null;

  /**
   * How to load balance the data in this Connection across the nodes in the cluster.
   */
  public enum LoadBalanceStrategyEnum {
    DO_NOT_LOAD_BALANCE("DO_NOT_LOAD_BALANCE"),
    PARTITION_BY_ATTRIBUTE("PARTITION_BY_ATTRIBUTE"),
    ROUND_ROBIN("ROUND_ROBIN"),
    SINGLE_NODE("SINGLE_NODE");

    private String value;

    LoadBalanceStrategyEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static LoadBalanceStrategyEnum fromValue(String input) {
      for (LoadBalanceStrategyEnum b : LoadBalanceStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("loadBalanceStrategy")
  private LoadBalanceStrategyEnum loadBalanceStrategy = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parentGroupId")
  private String parentGroupId = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  @JsonProperty("prioritizers")
  private List<String> prioritizers = null;

  @JsonProperty("selectedRelationships")
  private List<String> selectedRelationships = null;

  @JsonProperty("source")
  private ConnectableDTO source = null;

  @JsonProperty("versionedComponentId")
  private String versionedComponentId = null;

   /**
   * The relationships that the source of the connection currently supports.
   * @return availableRelationships
  **/
  @Schema(description = "The relationships that the source of the connection currently supports.")
  public List<String> getAvailableRelationships() {
    return availableRelationships;
  }

  public ConnectionDTO backPressureDataSizeThreshold(String backPressureDataSizeThreshold) {
    this.backPressureDataSizeThreshold = backPressureDataSizeThreshold;
    return this;
  }

   /**
   * The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#x27;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
   * @return backPressureDataSizeThreshold
  **/
  @Schema(description = "The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.")
  public String getBackPressureDataSizeThreshold() {
    return backPressureDataSizeThreshold;
  }

  public void setBackPressureDataSizeThreshold(String backPressureDataSizeThreshold) {
    this.backPressureDataSizeThreshold = backPressureDataSizeThreshold;
  }

  public ConnectionDTO backPressureObjectThreshold(Long backPressureObjectThreshold) {
    this.backPressureObjectThreshold = backPressureObjectThreshold;
    return this;
  }

   /**
   * The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#x27;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
   * @return backPressureObjectThreshold
  **/
  @Schema(description = "The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.")
  public Long getBackPressureObjectThreshold() {
    return backPressureObjectThreshold;
  }

  public void setBackPressureObjectThreshold(Long backPressureObjectThreshold) {
    this.backPressureObjectThreshold = backPressureObjectThreshold;
  }

  public ConnectionDTO bends(List<PositionDTO> bends) {
    this.bends = bends;
    return this;
  }

  public ConnectionDTO addBendsItem(PositionDTO bendsItem) {
    if (this.bends == null) {
      this.bends = new ArrayList<>();
    }
    this.bends.add(bendsItem);
    return this;
  }

   /**
   * The bend points on the connection.
   * @return bends
  **/
  @Schema(description = "The bend points on the connection.")
  public List<PositionDTO> getBends() {
    return bends;
  }

  public void setBends(List<PositionDTO> bends) {
    this.bends = bends;
  }

  public ConnectionDTO destination(ConnectableDTO destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @Schema(description = "")
  public ConnectableDTO getDestination() {
    return destination;
  }

  public void setDestination(ConnectableDTO destination) {
    this.destination = destination;
  }

  public ConnectionDTO flowFileExpiration(String flowFileExpiration) {
    this.flowFileExpiration = flowFileExpiration;
    return this;
  }

   /**
   * The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it.
   * @return flowFileExpiration
  **/
  @Schema(description = "The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it.")
  public String getFlowFileExpiration() {
    return flowFileExpiration;
  }

  public void setFlowFileExpiration(String flowFileExpiration) {
    this.flowFileExpiration = flowFileExpiration;
  }

  public ConnectionDTO getzIndex(Long getzIndex) {
    this.getzIndex = getzIndex;
    return this;
  }

   /**
   * The z index of the connection.
   * @return getzIndex
  **/
  @Schema(description = "The z index of the connection.")
  public Long getGetzIndex() {
    return getzIndex;
  }

  public void setGetzIndex(Long getzIndex) {
    this.getzIndex = getzIndex;
  }

  public ConnectionDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ConnectionDTO labelIndex(Integer labelIndex) {
    this.labelIndex = labelIndex;
    return this;
  }

   /**
   * The index of the bend point where to place the connection label.
   * @return labelIndex
  **/
  @Schema(description = "The index of the bend point where to place the connection label.")
  public Integer getLabelIndex() {
    return labelIndex;
  }

  public void setLabelIndex(Integer labelIndex) {
    this.labelIndex = labelIndex;
  }

  public ConnectionDTO loadBalanceCompression(LoadBalanceCompressionEnum loadBalanceCompression) {
    this.loadBalanceCompression = loadBalanceCompression;
    return this;
  }

   /**
   * Whether or not data should be compressed when being transferred between nodes in the cluster.
   * @return loadBalanceCompression
  **/
  @Schema(description = "Whether or not data should be compressed when being transferred between nodes in the cluster.")
  public LoadBalanceCompressionEnum getLoadBalanceCompression() {
    return loadBalanceCompression;
  }

  public void setLoadBalanceCompression(LoadBalanceCompressionEnum loadBalanceCompression) {
    this.loadBalanceCompression = loadBalanceCompression;
  }

  public ConnectionDTO loadBalancePartitionAttribute(String loadBalancePartitionAttribute) {
    this.loadBalancePartitionAttribute = loadBalancePartitionAttribute;
    return this;
  }

   /**
   * The FlowFile Attribute to use for determining which node a FlowFile will go to if the Load Balancing Strategy is set to PARTITION_BY_ATTRIBUTE
   * @return loadBalancePartitionAttribute
  **/
  @Schema(description = "The FlowFile Attribute to use for determining which node a FlowFile will go to if the Load Balancing Strategy is set to PARTITION_BY_ATTRIBUTE")
  public String getLoadBalancePartitionAttribute() {
    return loadBalancePartitionAttribute;
  }

  public void setLoadBalancePartitionAttribute(String loadBalancePartitionAttribute) {
    this.loadBalancePartitionAttribute = loadBalancePartitionAttribute;
  }

   /**
   * The current status of the Connection&#x27;s Load Balancing Activities. Status can indicate that Load Balancing is not configured for the connection, that Load Balancing is configured but inactive (not currently transferring data to another node), or that Load Balancing is configured and actively transferring data to another node.
   * @return loadBalanceStatus
  **/
  @Schema(description = "The current status of the Connection's Load Balancing Activities. Status can indicate that Load Balancing is not configured for the connection, that Load Balancing is configured but inactive (not currently transferring data to another node), or that Load Balancing is configured and actively transferring data to another node.")
  public LoadBalanceStatusEnum getLoadBalanceStatus() {
    return loadBalanceStatus;
  }

  public ConnectionDTO loadBalanceStrategy(LoadBalanceStrategyEnum loadBalanceStrategy) {
    this.loadBalanceStrategy = loadBalanceStrategy;
    return this;
  }

   /**
   * How to load balance the data in this Connection across the nodes in the cluster.
   * @return loadBalanceStrategy
  **/
  @Schema(description = "How to load balance the data in this Connection across the nodes in the cluster.")
  public LoadBalanceStrategyEnum getLoadBalanceStrategy() {
    return loadBalanceStrategy;
  }

  public void setLoadBalanceStrategy(LoadBalanceStrategyEnum loadBalanceStrategy) {
    this.loadBalanceStrategy = loadBalanceStrategy;
  }

  public ConnectionDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the connection.
   * @return name
  **/
  @Schema(description = "The name of the connection.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ConnectionDTO parentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * The id of parent process group of this component if applicable.
   * @return parentGroupId
  **/
  @Schema(description = "The id of parent process group of this component if applicable.")
  public String getParentGroupId() {
    return parentGroupId;
  }

  public void setParentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
  }

  public ConnectionDTO position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public ConnectionDTO prioritizers(List<String> prioritizers) {
    this.prioritizers = prioritizers;
    return this;
  }

  public ConnectionDTO addPrioritizersItem(String prioritizersItem) {
    if (this.prioritizers == null) {
      this.prioritizers = new ArrayList<>();
    }
    this.prioritizers.add(prioritizersItem);
    return this;
  }

   /**
   * The comparators used to prioritize the queue.
   * @return prioritizers
  **/
  @Schema(description = "The comparators used to prioritize the queue.")
  public List<String> getPrioritizers() {
    return prioritizers;
  }

  public void setPrioritizers(List<String> prioritizers) {
    this.prioritizers = prioritizers;
  }

  public ConnectionDTO selectedRelationships(List<String> selectedRelationships) {
    this.selectedRelationships = selectedRelationships;
    return this;
  }

  public ConnectionDTO addSelectedRelationshipsItem(String selectedRelationshipsItem) {
    if (this.selectedRelationships == null) {
      this.selectedRelationships = new ArrayList<>();
    }
    this.selectedRelationships.add(selectedRelationshipsItem);
    return this;
  }

   /**
   * The selected relationship that comprise the connection.
   * @return selectedRelationships
  **/
  @Schema(description = "The selected relationship that comprise the connection.")
  public List<String> getSelectedRelationships() {
    return selectedRelationships;
  }

  public void setSelectedRelationships(List<String> selectedRelationships) {
    this.selectedRelationships = selectedRelationships;
  }

  public ConnectionDTO source(ConnectableDTO source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public ConnectableDTO getSource() {
    return source;
  }

  public void setSource(ConnectableDTO source) {
    this.source = source;
  }

  public ConnectionDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @Schema(description = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionDTO connectionDTO = (ConnectionDTO) o;
    return Objects.equals(this.availableRelationships, connectionDTO.availableRelationships) &&
        Objects.equals(this.backPressureDataSizeThreshold, connectionDTO.backPressureDataSizeThreshold) &&
        Objects.equals(this.backPressureObjectThreshold, connectionDTO.backPressureObjectThreshold) &&
        Objects.equals(this.bends, connectionDTO.bends) &&
        Objects.equals(this.destination, connectionDTO.destination) &&
        Objects.equals(this.flowFileExpiration, connectionDTO.flowFileExpiration) &&
        Objects.equals(this.getzIndex, connectionDTO.getzIndex) &&
        Objects.equals(this.id, connectionDTO.id) &&
        Objects.equals(this.labelIndex, connectionDTO.labelIndex) &&
        Objects.equals(this.loadBalanceCompression, connectionDTO.loadBalanceCompression) &&
        Objects.equals(this.loadBalancePartitionAttribute, connectionDTO.loadBalancePartitionAttribute) &&
        Objects.equals(this.loadBalanceStatus, connectionDTO.loadBalanceStatus) &&
        Objects.equals(this.loadBalanceStrategy, connectionDTO.loadBalanceStrategy) &&
        Objects.equals(this.name, connectionDTO.name) &&
        Objects.equals(this.parentGroupId, connectionDTO.parentGroupId) &&
        Objects.equals(this.position, connectionDTO.position) &&
        Objects.equals(this.prioritizers, connectionDTO.prioritizers) &&
        Objects.equals(this.selectedRelationships, connectionDTO.selectedRelationships) &&
        Objects.equals(this.source, connectionDTO.source) &&
        Objects.equals(this.versionedComponentId, connectionDTO.versionedComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableRelationships, backPressureDataSizeThreshold, backPressureObjectThreshold, bends, destination, flowFileExpiration, getzIndex, id, labelIndex, loadBalanceCompression, loadBalancePartitionAttribute, loadBalanceStatus, loadBalanceStrategy, name, parentGroupId, position, prioritizers, selectedRelationships, source, versionedComponentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionDTO {\n");
    
    sb.append("    availableRelationships: ").append(toIndentedString(availableRelationships)).append("\n");
    sb.append("    backPressureDataSizeThreshold: ").append(toIndentedString(backPressureDataSizeThreshold)).append("\n");
    sb.append("    backPressureObjectThreshold: ").append(toIndentedString(backPressureObjectThreshold)).append("\n");
    sb.append("    bends: ").append(toIndentedString(bends)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    flowFileExpiration: ").append(toIndentedString(flowFileExpiration)).append("\n");
    sb.append("    getzIndex: ").append(toIndentedString(getzIndex)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labelIndex: ").append(toIndentedString(labelIndex)).append("\n");
    sb.append("    loadBalanceCompression: ").append(toIndentedString(loadBalanceCompression)).append("\n");
    sb.append("    loadBalancePartitionAttribute: ").append(toIndentedString(loadBalancePartitionAttribute)).append("\n");
    sb.append("    loadBalanceStatus: ").append(toIndentedString(loadBalanceStatus)).append("\n");
    sb.append("    loadBalanceStrategy: ").append(toIndentedString(loadBalanceStrategy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    prioritizers: ").append(toIndentedString(prioritizers)).append("\n");
    sb.append("    selectedRelationships: ").append(toIndentedString(selectedRelationships)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

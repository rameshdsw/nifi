/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.nifi.api.toolkit.model.ExternalControllerServiceReference;
import org.apache.nifi.api.toolkit.model.FlowRegistryBucket;
import org.apache.nifi.api.toolkit.model.ParameterProviderReference;
import org.apache.nifi.api.toolkit.model.RegisteredFlow;
import org.apache.nifi.api.toolkit.model.RegisteredFlowSnapshotMetadata;
import org.apache.nifi.api.toolkit.model.VersionedParameterContext;
import org.apache.nifi.api.toolkit.model.VersionedProcessGroup;
/**
 * RegisteredFlowSnapshot
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class RegisteredFlowSnapshot {
  @JsonProperty("bucket")
  private FlowRegistryBucket bucket = null;

  @JsonProperty("externalControllerServices")
  private Map<String, ExternalControllerServiceReference> externalControllerServices = null;

  @JsonProperty("flow")
  private RegisteredFlow flow = null;

  @JsonProperty("flowContents")
  private VersionedProcessGroup flowContents = null;

  @JsonProperty("flowEncodingVersion")
  private String flowEncodingVersion = null;

  @JsonProperty("latest")
  private Boolean latest = null;

  @JsonProperty("parameterContexts")
  private Map<String, VersionedParameterContext> parameterContexts = null;

  @JsonProperty("parameterProviders")
  private Map<String, ParameterProviderReference> parameterProviders = null;

  @JsonProperty("snapshotMetadata")
  private RegisteredFlowSnapshotMetadata snapshotMetadata = null;

  public RegisteredFlowSnapshot bucket(FlowRegistryBucket bucket) {
    this.bucket = bucket;
    return this;
  }

   /**
   * Get bucket
   * @return bucket
  **/
  @Schema(description = "")
  public FlowRegistryBucket getBucket() {
    return bucket;
  }

  public void setBucket(FlowRegistryBucket bucket) {
    this.bucket = bucket;
  }

  public RegisteredFlowSnapshot externalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
    return this;
  }

  public RegisteredFlowSnapshot putExternalControllerServicesItem(String key, ExternalControllerServiceReference externalControllerServicesItem) {
    if (this.externalControllerServices == null) {
      this.externalControllerServices = new HashMap<>();
    }
    this.externalControllerServices.put(key, externalControllerServicesItem);
    return this;
  }

   /**
   * Get externalControllerServices
   * @return externalControllerServices
  **/
  @Schema(description = "")
  public Map<String, ExternalControllerServiceReference> getExternalControllerServices() {
    return externalControllerServices;
  }

  public void setExternalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
  }

  public RegisteredFlowSnapshot flow(RegisteredFlow flow) {
    this.flow = flow;
    return this;
  }

   /**
   * Get flow
   * @return flow
  **/
  @Schema(description = "")
  public RegisteredFlow getFlow() {
    return flow;
  }

  public void setFlow(RegisteredFlow flow) {
    this.flow = flow;
  }

  public RegisteredFlowSnapshot flowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
    return this;
  }

   /**
   * Get flowContents
   * @return flowContents
  **/
  @Schema(description = "")
  public VersionedProcessGroup getFlowContents() {
    return flowContents;
  }

  public void setFlowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
  }

  public RegisteredFlowSnapshot flowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
    return this;
  }

   /**
   * Get flowEncodingVersion
   * @return flowEncodingVersion
  **/
  @Schema(description = "")
  public String getFlowEncodingVersion() {
    return flowEncodingVersion;
  }

  public void setFlowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
  }

  public RegisteredFlowSnapshot latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

   /**
   * Get latest
   * @return latest
  **/
  @Schema(description = "")
  public Boolean isLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }

  public RegisteredFlowSnapshot parameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
    return this;
  }

  public RegisteredFlowSnapshot putParameterContextsItem(String key, VersionedParameterContext parameterContextsItem) {
    if (this.parameterContexts == null) {
      this.parameterContexts = new HashMap<>();
    }
    this.parameterContexts.put(key, parameterContextsItem);
    return this;
  }

   /**
   * Get parameterContexts
   * @return parameterContexts
  **/
  @Schema(description = "")
  public Map<String, VersionedParameterContext> getParameterContexts() {
    return parameterContexts;
  }

  public void setParameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
  }

  public RegisteredFlowSnapshot parameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
    return this;
  }

  public RegisteredFlowSnapshot putParameterProvidersItem(String key, ParameterProviderReference parameterProvidersItem) {
    if (this.parameterProviders == null) {
      this.parameterProviders = new HashMap<>();
    }
    this.parameterProviders.put(key, parameterProvidersItem);
    return this;
  }

   /**
   * Get parameterProviders
   * @return parameterProviders
  **/
  @Schema(description = "")
  public Map<String, ParameterProviderReference> getParameterProviders() {
    return parameterProviders;
  }

  public void setParameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
  }

  public RegisteredFlowSnapshot snapshotMetadata(RegisteredFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
    return this;
  }

   /**
   * Get snapshotMetadata
   * @return snapshotMetadata
  **/
  @Schema(description = "")
  public RegisteredFlowSnapshotMetadata getSnapshotMetadata() {
    return snapshotMetadata;
  }

  public void setSnapshotMetadata(RegisteredFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredFlowSnapshot registeredFlowSnapshot = (RegisteredFlowSnapshot) o;
    return Objects.equals(this.bucket, registeredFlowSnapshot.bucket) &&
        Objects.equals(this.externalControllerServices, registeredFlowSnapshot.externalControllerServices) &&
        Objects.equals(this.flow, registeredFlowSnapshot.flow) &&
        Objects.equals(this.flowContents, registeredFlowSnapshot.flowContents) &&
        Objects.equals(this.flowEncodingVersion, registeredFlowSnapshot.flowEncodingVersion) &&
        Objects.equals(this.latest, registeredFlowSnapshot.latest) &&
        Objects.equals(this.parameterContexts, registeredFlowSnapshot.parameterContexts) &&
        Objects.equals(this.parameterProviders, registeredFlowSnapshot.parameterProviders) &&
        Objects.equals(this.snapshotMetadata, registeredFlowSnapshot.snapshotMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, externalControllerServices, flow, flowContents, flowEncodingVersion, latest, parameterContexts, parameterProviders, snapshotMetadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredFlowSnapshot {\n");
    
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    externalControllerServices: ").append(toIndentedString(externalControllerServices)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    flowContents: ").append(toIndentedString(flowContents)).append("\n");
    sb.append("    flowEncodingVersion: ").append(toIndentedString(flowEncodingVersion)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    parameterContexts: ").append(toIndentedString(parameterContexts)).append("\n");
    sb.append("    parameterProviders: ").append(toIndentedString(parameterProviders)).append("\n");
    sb.append("    snapshotMetadata: ").append(toIndentedString(snapshotMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.apache.nifi.api.toolkit.model.ConnectionStatisticsSnapshotDTO;
/**
 * A list of status snapshots for each node
 */
@Schema(description = "A list of status snapshots for each node")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class NodeConnectionStatisticsSnapshotDTO {
  @JsonProperty("address")
  private String address = null;

  @JsonProperty("apiPort")
  private Integer apiPort = null;

  @JsonProperty("nodeId")
  private String nodeId = null;

  @JsonProperty("statisticsSnapshot")
  private ConnectionStatisticsSnapshotDTO statisticsSnapshot = null;

  public NodeConnectionStatisticsSnapshotDTO address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The API address of the node
   * @return address
  **/
  @Schema(description = "The API address of the node")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public NodeConnectionStatisticsSnapshotDTO apiPort(Integer apiPort) {
    this.apiPort = apiPort;
    return this;
  }

   /**
   * The API port used to communicate with the node
   * @return apiPort
  **/
  @Schema(description = "The API port used to communicate with the node")
  public Integer getApiPort() {
    return apiPort;
  }

  public void setApiPort(Integer apiPort) {
    this.apiPort = apiPort;
  }

  public NodeConnectionStatisticsSnapshotDTO nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * The unique ID that identifies the node
   * @return nodeId
  **/
  @Schema(description = "The unique ID that identifies the node")
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }

  public NodeConnectionStatisticsSnapshotDTO statisticsSnapshot(ConnectionStatisticsSnapshotDTO statisticsSnapshot) {
    this.statisticsSnapshot = statisticsSnapshot;
    return this;
  }

   /**
   * Get statisticsSnapshot
   * @return statisticsSnapshot
  **/
  @Schema(description = "")
  public ConnectionStatisticsSnapshotDTO getStatisticsSnapshot() {
    return statisticsSnapshot;
  }

  public void setStatisticsSnapshot(ConnectionStatisticsSnapshotDTO statisticsSnapshot) {
    this.statisticsSnapshot = statisticsSnapshot;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeConnectionStatisticsSnapshotDTO nodeConnectionStatisticsSnapshotDTO = (NodeConnectionStatisticsSnapshotDTO) o;
    return Objects.equals(this.address, nodeConnectionStatisticsSnapshotDTO.address) &&
        Objects.equals(this.apiPort, nodeConnectionStatisticsSnapshotDTO.apiPort) &&
        Objects.equals(this.nodeId, nodeConnectionStatisticsSnapshotDTO.nodeId) &&
        Objects.equals(this.statisticsSnapshot, nodeConnectionStatisticsSnapshotDTO.statisticsSnapshot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, apiPort, nodeId, statisticsSnapshot);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeConnectionStatisticsSnapshotDTO {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    apiPort: ").append(toIndentedString(apiPort)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    statisticsSnapshot: ").append(toIndentedString(statisticsSnapshot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

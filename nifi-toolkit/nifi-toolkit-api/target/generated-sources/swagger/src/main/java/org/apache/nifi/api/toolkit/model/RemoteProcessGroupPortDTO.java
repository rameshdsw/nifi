/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.apache.nifi.api.toolkit.model.BatchSettingsDTO;
/**
 * The output ports from which data can be retrieved.
 */
@Schema(description = "The output ports from which data can be retrieved.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class RemoteProcessGroupPortDTO {
  @JsonProperty("batchSettings")
  private BatchSettingsDTO batchSettings = null;

  @JsonProperty("comments")
  private String comments = null;

  @JsonProperty("concurrentlySchedulableTaskCount")
  private Integer concurrentlySchedulableTaskCount = null;

  @JsonProperty("connected")
  private Boolean connected = null;

  @JsonProperty("exists")
  private Boolean exists = null;

  @JsonProperty("groupId")
  private String groupId = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("targetId")
  private String targetId = null;

  @JsonProperty("targetRunning")
  private Boolean targetRunning = null;

  @JsonProperty("transmitting")
  private Boolean transmitting = null;

  @JsonProperty("useCompression")
  private Boolean useCompression = null;

  @JsonProperty("versionedComponentId")
  private String versionedComponentId = null;

  public RemoteProcessGroupPortDTO batchSettings(BatchSettingsDTO batchSettings) {
    this.batchSettings = batchSettings;
    return this;
  }

   /**
   * Get batchSettings
   * @return batchSettings
  **/
  @Schema(description = "")
  public BatchSettingsDTO getBatchSettings() {
    return batchSettings;
  }

  public void setBatchSettings(BatchSettingsDTO batchSettings) {
    this.batchSettings = batchSettings;
  }

  public RemoteProcessGroupPortDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments as configured on the target port.
   * @return comments
  **/
  @Schema(description = "The comments as configured on the target port.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public RemoteProcessGroupPortDTO concurrentlySchedulableTaskCount(Integer concurrentlySchedulableTaskCount) {
    this.concurrentlySchedulableTaskCount = concurrentlySchedulableTaskCount;
    return this;
  }

   /**
   * The number of task that may transmit flowfiles to the target port concurrently.
   * @return concurrentlySchedulableTaskCount
  **/
  @Schema(description = "The number of task that may transmit flowfiles to the target port concurrently.")
  public Integer getConcurrentlySchedulableTaskCount() {
    return concurrentlySchedulableTaskCount;
  }

  public void setConcurrentlySchedulableTaskCount(Integer concurrentlySchedulableTaskCount) {
    this.concurrentlySchedulableTaskCount = concurrentlySchedulableTaskCount;
  }

  public RemoteProcessGroupPortDTO connected(Boolean connected) {
    this.connected = connected;
    return this;
  }

   /**
   * Whether the port has either an incoming or outgoing connection.
   * @return connected
  **/
  @Schema(description = "Whether the port has either an incoming or outgoing connection.")
  public Boolean isConnected() {
    return connected;
  }

  public void setConnected(Boolean connected) {
    this.connected = connected;
  }

  public RemoteProcessGroupPortDTO exists(Boolean exists) {
    this.exists = exists;
    return this;
  }

   /**
   * Whether the target port exists.
   * @return exists
  **/
  @Schema(description = "Whether the target port exists.")
  public Boolean isExists() {
    return exists;
  }

  public void setExists(Boolean exists) {
    this.exists = exists;
  }

  public RemoteProcessGroupPortDTO groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * The id of the remote process group that the port resides in.
   * @return groupId
  **/
  @Schema(description = "The id of the remote process group that the port resides in.")
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }

  public RemoteProcessGroupPortDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the port.
   * @return id
  **/
  @Schema(description = "The id of the port.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RemoteProcessGroupPortDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the target port.
   * @return name
  **/
  @Schema(description = "The name of the target port.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public RemoteProcessGroupPortDTO targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

   /**
   * The id of the target port.
   * @return targetId
  **/
  @Schema(description = "The id of the target port.")
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }

  public RemoteProcessGroupPortDTO targetRunning(Boolean targetRunning) {
    this.targetRunning = targetRunning;
    return this;
  }

   /**
   * Whether the target port is running.
   * @return targetRunning
  **/
  @Schema(description = "Whether the target port is running.")
  public Boolean isTargetRunning() {
    return targetRunning;
  }

  public void setTargetRunning(Boolean targetRunning) {
    this.targetRunning = targetRunning;
  }

  public RemoteProcessGroupPortDTO transmitting(Boolean transmitting) {
    this.transmitting = transmitting;
    return this;
  }

   /**
   * Whether the remote port is configured for transmission.
   * @return transmitting
  **/
  @Schema(description = "Whether the remote port is configured for transmission.")
  public Boolean isTransmitting() {
    return transmitting;
  }

  public void setTransmitting(Boolean transmitting) {
    this.transmitting = transmitting;
  }

  public RemoteProcessGroupPortDTO useCompression(Boolean useCompression) {
    this.useCompression = useCompression;
    return this;
  }

   /**
   * Whether the flowfiles are compressed when sent to the target port.
   * @return useCompression
  **/
  @Schema(description = "Whether the flowfiles are compressed when sent to the target port.")
  public Boolean isUseCompression() {
    return useCompression;
  }

  public void setUseCompression(Boolean useCompression) {
    this.useCompression = useCompression;
  }

  public RemoteProcessGroupPortDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @Schema(description = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteProcessGroupPortDTO remoteProcessGroupPortDTO = (RemoteProcessGroupPortDTO) o;
    return Objects.equals(this.batchSettings, remoteProcessGroupPortDTO.batchSettings) &&
        Objects.equals(this.comments, remoteProcessGroupPortDTO.comments) &&
        Objects.equals(this.concurrentlySchedulableTaskCount, remoteProcessGroupPortDTO.concurrentlySchedulableTaskCount) &&
        Objects.equals(this.connected, remoteProcessGroupPortDTO.connected) &&
        Objects.equals(this.exists, remoteProcessGroupPortDTO.exists) &&
        Objects.equals(this.groupId, remoteProcessGroupPortDTO.groupId) &&
        Objects.equals(this.id, remoteProcessGroupPortDTO.id) &&
        Objects.equals(this.name, remoteProcessGroupPortDTO.name) &&
        Objects.equals(this.targetId, remoteProcessGroupPortDTO.targetId) &&
        Objects.equals(this.targetRunning, remoteProcessGroupPortDTO.targetRunning) &&
        Objects.equals(this.transmitting, remoteProcessGroupPortDTO.transmitting) &&
        Objects.equals(this.useCompression, remoteProcessGroupPortDTO.useCompression) &&
        Objects.equals(this.versionedComponentId, remoteProcessGroupPortDTO.versionedComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSettings, comments, concurrentlySchedulableTaskCount, connected, exists, groupId, id, name, targetId, targetRunning, transmitting, useCompression, versionedComponentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteProcessGroupPortDTO {\n");
    
    sb.append("    batchSettings: ").append(toIndentedString(batchSettings)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    concurrentlySchedulableTaskCount: ").append(toIndentedString(concurrentlySchedulableTaskCount)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetRunning: ").append(toIndentedString(targetRunning)).append("\n");
    sb.append("    transmitting: ").append(toIndentedString(transmitting)).append("\n");
    sb.append("    useCompression: ").append(toIndentedString(useCompression)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.nifi.api.toolkit.model.BundleDTO;
import org.apache.nifi.api.toolkit.model.ControllerServiceApiDTO;
import org.apache.nifi.api.toolkit.model.ControllerServiceReferencingComponentEntity;
import org.apache.nifi.api.toolkit.model.PositionDTO;
import org.apache.nifi.api.toolkit.model.PropertyDescriptorDTO;
/**
 * The controller services in this flow snippet.
 */
@Schema(description = "The controller services in this flow snippet.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ControllerServiceDTO {
  @JsonProperty("annotationData")
  private String annotationData = null;

  @JsonProperty("bulletinLevel")
  private String bulletinLevel = null;

  @JsonProperty("bundle")
  private BundleDTO bundle = null;

  @JsonProperty("comments")
  private String comments = null;

  @JsonProperty("controllerServiceApis")
  private List<ControllerServiceApiDTO> controllerServiceApis = null;

  @JsonProperty("customUiUrl")
  private String customUiUrl = null;

  @JsonProperty("deprecated")
  private Boolean deprecated = null;

  @JsonProperty("descriptors")
  private Map<String, PropertyDescriptorDTO> descriptors = null;

  @JsonProperty("extensionMissing")
  private Boolean extensionMissing = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("multipleVersionsAvailable")
  private Boolean multipleVersionsAvailable = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parentGroupId")
  private String parentGroupId = null;

  @JsonProperty("persistsState")
  private Boolean persistsState = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  @JsonProperty("referencingComponents")
  private List<ControllerServiceReferencingComponentEntity> referencingComponents = null;

  @JsonProperty("restricted")
  private Boolean restricted = null;

  @JsonProperty("sensitiveDynamicPropertyNames")
  private List<String> sensitiveDynamicPropertyNames = null;

  /**
   * The state of the controller service.
   */
  public enum StateEnum {
    ENABLED("ENABLED"),
    ENABLING("ENABLING"),
    DISABLED("DISABLED"),
    DISABLING("DISABLING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("supportsSensitiveDynamicProperties")
  private Boolean supportsSensitiveDynamicProperties = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("validationErrors")
  private List<String> validationErrors = null;

  /**
   * Indicates whether the ControllerService is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the ControllerService is valid)
   */
  public enum ValidationStatusEnum {
    VALID("VALID"),
    INVALID("INVALID"),
    VALIDATING("VALIDATING");

    private String value;

    ValidationStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ValidationStatusEnum fromValue(String input) {
      for (ValidationStatusEnum b : ValidationStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("validationStatus")
  private ValidationStatusEnum validationStatus = null;

  @JsonProperty("versionedComponentId")
  private String versionedComponentId = null;

  public ControllerServiceDTO annotationData(String annotationData) {
    this.annotationData = annotationData;
    return this;
  }

   /**
   * The annotation for the controller service. This is how the custom UI relays configuration to the controller service.
   * @return annotationData
  **/
  @Schema(description = "The annotation for the controller service. This is how the custom UI relays configuration to the controller service.")
  public String getAnnotationData() {
    return annotationData;
  }

  public void setAnnotationData(String annotationData) {
    this.annotationData = annotationData;
  }

  public ControllerServiceDTO bulletinLevel(String bulletinLevel) {
    this.bulletinLevel = bulletinLevel;
    return this;
  }

   /**
   * The level at which the controller service will report bulletins.
   * @return bulletinLevel
  **/
  @Schema(description = "The level at which the controller service will report bulletins.")
  public String getBulletinLevel() {
    return bulletinLevel;
  }

  public void setBulletinLevel(String bulletinLevel) {
    this.bulletinLevel = bulletinLevel;
  }

  public ControllerServiceDTO bundle(BundleDTO bundle) {
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @Schema(description = "")
  public BundleDTO getBundle() {
    return bundle;
  }

  public void setBundle(BundleDTO bundle) {
    this.bundle = bundle;
  }

  public ControllerServiceDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments for the controller service.
   * @return comments
  **/
  @Schema(description = "The comments for the controller service.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public ControllerServiceDTO controllerServiceApis(List<ControllerServiceApiDTO> controllerServiceApis) {
    this.controllerServiceApis = controllerServiceApis;
    return this;
  }

  public ControllerServiceDTO addControllerServiceApisItem(ControllerServiceApiDTO controllerServiceApisItem) {
    if (this.controllerServiceApis == null) {
      this.controllerServiceApis = new ArrayList<>();
    }
    this.controllerServiceApis.add(controllerServiceApisItem);
    return this;
  }

   /**
   * Lists the APIs this Controller Service implements.
   * @return controllerServiceApis
  **/
  @Schema(description = "Lists the APIs this Controller Service implements.")
  public List<ControllerServiceApiDTO> getControllerServiceApis() {
    return controllerServiceApis;
  }

  public void setControllerServiceApis(List<ControllerServiceApiDTO> controllerServiceApis) {
    this.controllerServiceApis = controllerServiceApis;
  }

  public ControllerServiceDTO customUiUrl(String customUiUrl) {
    this.customUiUrl = customUiUrl;
    return this;
  }

   /**
   * The URL for the controller services custom configuration UI if applicable.
   * @return customUiUrl
  **/
  @Schema(description = "The URL for the controller services custom configuration UI if applicable.")
  public String getCustomUiUrl() {
    return customUiUrl;
  }

  public void setCustomUiUrl(String customUiUrl) {
    this.customUiUrl = customUiUrl;
  }

  public ControllerServiceDTO deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * Whether the ontroller service has been deprecated.
   * @return deprecated
  **/
  @Schema(description = "Whether the ontroller service has been deprecated.")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public ControllerServiceDTO descriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
    return this;
  }

  public ControllerServiceDTO putDescriptorsItem(String key, PropertyDescriptorDTO descriptorsItem) {
    if (this.descriptors == null) {
      this.descriptors = new HashMap<>();
    }
    this.descriptors.put(key, descriptorsItem);
    return this;
  }

   /**
   * The descriptors for the controller service properties.
   * @return descriptors
  **/
  @Schema(description = "The descriptors for the controller service properties.")
  public Map<String, PropertyDescriptorDTO> getDescriptors() {
    return descriptors;
  }

  public void setDescriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
  }

  public ControllerServiceDTO extensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
    return this;
  }

   /**
   * Whether the underlying extension is missing.
   * @return extensionMissing
  **/
  @Schema(description = "Whether the underlying extension is missing.")
  public Boolean isExtensionMissing() {
    return extensionMissing;
  }

  public void setExtensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
  }

  public ControllerServiceDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ControllerServiceDTO multipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
    return this;
  }

   /**
   * Whether the controller service has multiple versions available.
   * @return multipleVersionsAvailable
  **/
  @Schema(description = "Whether the controller service has multiple versions available.")
  public Boolean isMultipleVersionsAvailable() {
    return multipleVersionsAvailable;
  }

  public void setMultipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
  }

  public ControllerServiceDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the controller service.
   * @return name
  **/
  @Schema(description = "The name of the controller service.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ControllerServiceDTO parentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * The id of parent process group of this component if applicable.
   * @return parentGroupId
  **/
  @Schema(description = "The id of parent process group of this component if applicable.")
  public String getParentGroupId() {
    return parentGroupId;
  }

  public void setParentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
  }

  public ControllerServiceDTO persistsState(Boolean persistsState) {
    this.persistsState = persistsState;
    return this;
  }

   /**
   * Whether the controller service persists state.
   * @return persistsState
  **/
  @Schema(description = "Whether the controller service persists state.")
  public Boolean isPersistsState() {
    return persistsState;
  }

  public void setPersistsState(Boolean persistsState) {
    this.persistsState = persistsState;
  }

  public ControllerServiceDTO position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public ControllerServiceDTO properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ControllerServiceDTO putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties of the controller service.
   * @return properties
  **/
  @Schema(description = "The properties of the controller service.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

  public ControllerServiceDTO referencingComponents(List<ControllerServiceReferencingComponentEntity> referencingComponents) {
    this.referencingComponents = referencingComponents;
    return this;
  }

  public ControllerServiceDTO addReferencingComponentsItem(ControllerServiceReferencingComponentEntity referencingComponentsItem) {
    if (this.referencingComponents == null) {
      this.referencingComponents = new ArrayList<>();
    }
    this.referencingComponents.add(referencingComponentsItem);
    return this;
  }

   /**
   * All components referencing this controller service.
   * @return referencingComponents
  **/
  @Schema(description = "All components referencing this controller service.")
  public List<ControllerServiceReferencingComponentEntity> getReferencingComponents() {
    return referencingComponents;
  }

  public void setReferencingComponents(List<ControllerServiceReferencingComponentEntity> referencingComponents) {
    this.referencingComponents = referencingComponents;
  }

  public ControllerServiceDTO restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Whether the controller service requires elevated privileges.
   * @return restricted
  **/
  @Schema(description = "Whether the controller service requires elevated privileges.")
  public Boolean isRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }

  public ControllerServiceDTO sensitiveDynamicPropertyNames(List<String> sensitiveDynamicPropertyNames) {
    this.sensitiveDynamicPropertyNames = sensitiveDynamicPropertyNames;
    return this;
  }

  public ControllerServiceDTO addSensitiveDynamicPropertyNamesItem(String sensitiveDynamicPropertyNamesItem) {
    if (this.sensitiveDynamicPropertyNames == null) {
      this.sensitiveDynamicPropertyNames = new ArrayList<>();
    }
    this.sensitiveDynamicPropertyNames.add(sensitiveDynamicPropertyNamesItem);
    return this;
  }

   /**
   * Set of sensitive dynamic property names
   * @return sensitiveDynamicPropertyNames
  **/
  @Schema(description = "Set of sensitive dynamic property names")
  public List<String> getSensitiveDynamicPropertyNames() {
    return sensitiveDynamicPropertyNames;
  }

  public void setSensitiveDynamicPropertyNames(List<String> sensitiveDynamicPropertyNames) {
    this.sensitiveDynamicPropertyNames = sensitiveDynamicPropertyNames;
  }

  public ControllerServiceDTO state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the controller service.
   * @return state
  **/
  @Schema(description = "The state of the controller service.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ControllerServiceDTO supportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
    return this;
  }

   /**
   * Whether the controller service supports sensitive dynamic properties.
   * @return supportsSensitiveDynamicProperties
  **/
  @Schema(description = "Whether the controller service supports sensitive dynamic properties.")
  public Boolean isSupportsSensitiveDynamicProperties() {
    return supportsSensitiveDynamicProperties;
  }

  public void setSupportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
  }

  public ControllerServiceDTO type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the controller service.
   * @return type
  **/
  @Schema(description = "The type of the controller service.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ControllerServiceDTO validationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public ControllerServiceDTO addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * The validation errors from the controller service. These validation errors represent the problems with the controller service that must be resolved before it can be enabled. 
   * @return validationErrors
  **/
  @Schema(description = "The validation errors from the controller service. These validation errors represent the problems with the controller service that must be resolved before it can be enabled. ")
  public List<String> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
  }

   /**
   * Indicates whether the ControllerService is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the ControllerService is valid)
   * @return validationStatus
  **/
  @Schema(description = "Indicates whether the ControllerService is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the ControllerService is valid)")
  public ValidationStatusEnum getValidationStatus() {
    return validationStatus;
  }

  public ControllerServiceDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @Schema(description = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllerServiceDTO controllerServiceDTO = (ControllerServiceDTO) o;
    return Objects.equals(this.annotationData, controllerServiceDTO.annotationData) &&
        Objects.equals(this.bulletinLevel, controllerServiceDTO.bulletinLevel) &&
        Objects.equals(this.bundle, controllerServiceDTO.bundle) &&
        Objects.equals(this.comments, controllerServiceDTO.comments) &&
        Objects.equals(this.controllerServiceApis, controllerServiceDTO.controllerServiceApis) &&
        Objects.equals(this.customUiUrl, controllerServiceDTO.customUiUrl) &&
        Objects.equals(this.deprecated, controllerServiceDTO.deprecated) &&
        Objects.equals(this.descriptors, controllerServiceDTO.descriptors) &&
        Objects.equals(this.extensionMissing, controllerServiceDTO.extensionMissing) &&
        Objects.equals(this.id, controllerServiceDTO.id) &&
        Objects.equals(this.multipleVersionsAvailable, controllerServiceDTO.multipleVersionsAvailable) &&
        Objects.equals(this.name, controllerServiceDTO.name) &&
        Objects.equals(this.parentGroupId, controllerServiceDTO.parentGroupId) &&
        Objects.equals(this.persistsState, controllerServiceDTO.persistsState) &&
        Objects.equals(this.position, controllerServiceDTO.position) &&
        Objects.equals(this.properties, controllerServiceDTO.properties) &&
        Objects.equals(this.referencingComponents, controllerServiceDTO.referencingComponents) &&
        Objects.equals(this.restricted, controllerServiceDTO.restricted) &&
        Objects.equals(this.sensitiveDynamicPropertyNames, controllerServiceDTO.sensitiveDynamicPropertyNames) &&
        Objects.equals(this.state, controllerServiceDTO.state) &&
        Objects.equals(this.supportsSensitiveDynamicProperties, controllerServiceDTO.supportsSensitiveDynamicProperties) &&
        Objects.equals(this.type, controllerServiceDTO.type) &&
        Objects.equals(this.validationErrors, controllerServiceDTO.validationErrors) &&
        Objects.equals(this.validationStatus, controllerServiceDTO.validationStatus) &&
        Objects.equals(this.versionedComponentId, controllerServiceDTO.versionedComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationData, bulletinLevel, bundle, comments, controllerServiceApis, customUiUrl, deprecated, descriptors, extensionMissing, id, multipleVersionsAvailable, name, parentGroupId, persistsState, position, properties, referencingComponents, restricted, sensitiveDynamicPropertyNames, state, supportsSensitiveDynamicProperties, type, validationErrors, validationStatus, versionedComponentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllerServiceDTO {\n");
    
    sb.append("    annotationData: ").append(toIndentedString(annotationData)).append("\n");
    sb.append("    bulletinLevel: ").append(toIndentedString(bulletinLevel)).append("\n");
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    controllerServiceApis: ").append(toIndentedString(controllerServiceApis)).append("\n");
    sb.append("    customUiUrl: ").append(toIndentedString(customUiUrl)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    descriptors: ").append(toIndentedString(descriptors)).append("\n");
    sb.append("    extensionMissing: ").append(toIndentedString(extensionMissing)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    multipleVersionsAvailable: ").append(toIndentedString(multipleVersionsAvailable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    persistsState: ").append(toIndentedString(persistsState)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    referencingComponents: ").append(toIndentedString(referencingComponents)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    sensitiveDynamicPropertyNames: ").append(toIndentedString(sensitiveDynamicPropertyNames)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    supportsSensitiveDynamicProperties: ").append(toIndentedString(supportsSensitiveDynamicProperties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.BulletinEntity;
import org.apache.nifi.api.toolkit.model.PermissionsDTO;
import org.apache.nifi.api.toolkit.model.PortDTO;
import org.apache.nifi.api.toolkit.model.PortStatusDTO;
import org.apache.nifi.api.toolkit.model.PositionDTO;
import org.apache.nifi.api.toolkit.model.RevisionDTO;
/**
 * The output ports in this flow.
 */
@Schema(description = "The output ports in this flow.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class PortEntity {
  @JsonProperty("allowRemoteAccess")
  private Boolean allowRemoteAccess = null;

  @JsonProperty("bulletins")
  private List<BulletinEntity> bulletins = null;

  @JsonProperty("component")
  private PortDTO component = null;

  @JsonProperty("disconnectedNodeAcknowledged")
  private Boolean disconnectedNodeAcknowledged = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("operatePermissions")
  private PermissionsDTO operatePermissions = null;

  @JsonProperty("permissions")
  private PermissionsDTO permissions = null;

  @JsonProperty("portType")
  private String portType = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  @JsonProperty("revision")
  private RevisionDTO revision = null;

  @JsonProperty("status")
  private PortStatusDTO status = null;

  @JsonProperty("uri")
  private String uri = null;

  public PortEntity allowRemoteAccess(Boolean allowRemoteAccess) {
    this.allowRemoteAccess = allowRemoteAccess;
    return this;
  }

   /**
   * Whether this port can be accessed remotely via Site-to-Site protocol.
   * @return allowRemoteAccess
  **/
  @Schema(description = "Whether this port can be accessed remotely via Site-to-Site protocol.")
  public Boolean isAllowRemoteAccess() {
    return allowRemoteAccess;
  }

  public void setAllowRemoteAccess(Boolean allowRemoteAccess) {
    this.allowRemoteAccess = allowRemoteAccess;
  }

  public PortEntity bulletins(List<BulletinEntity> bulletins) {
    this.bulletins = bulletins;
    return this;
  }

  public PortEntity addBulletinsItem(BulletinEntity bulletinsItem) {
    if (this.bulletins == null) {
      this.bulletins = new ArrayList<>();
    }
    this.bulletins.add(bulletinsItem);
    return this;
  }

   /**
   * The bulletins for this component.
   * @return bulletins
  **/
  @Schema(description = "The bulletins for this component.")
  public List<BulletinEntity> getBulletins() {
    return bulletins;
  }

  public void setBulletins(List<BulletinEntity> bulletins) {
    this.bulletins = bulletins;
  }

  public PortEntity component(PortDTO component) {
    this.component = component;
    return this;
  }

   /**
   * Get component
   * @return component
  **/
  @Schema(description = "")
  public PortDTO getComponent() {
    return component;
  }

  public void setComponent(PortDTO component) {
    this.component = component;
  }

  public PortEntity disconnectedNodeAcknowledged(Boolean disconnectedNodeAcknowledged) {
    this.disconnectedNodeAcknowledged = disconnectedNodeAcknowledged;
    return this;
  }

   /**
   * Acknowledges that this node is disconnected to allow for mutable requests to proceed.
   * @return disconnectedNodeAcknowledged
  **/
  @Schema(description = "Acknowledges that this node is disconnected to allow for mutable requests to proceed.")
  public Boolean isDisconnectedNodeAcknowledged() {
    return disconnectedNodeAcknowledged;
  }

  public void setDisconnectedNodeAcknowledged(Boolean disconnectedNodeAcknowledged) {
    this.disconnectedNodeAcknowledged = disconnectedNodeAcknowledged;
  }

  public PortEntity id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PortEntity operatePermissions(PermissionsDTO operatePermissions) {
    this.operatePermissions = operatePermissions;
    return this;
  }

   /**
   * Get operatePermissions
   * @return operatePermissions
  **/
  @Schema(description = "")
  public PermissionsDTO getOperatePermissions() {
    return operatePermissions;
  }

  public void setOperatePermissions(PermissionsDTO operatePermissions) {
    this.operatePermissions = operatePermissions;
  }

  public PortEntity permissions(PermissionsDTO permissions) {
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(description = "")
  public PermissionsDTO getPermissions() {
    return permissions;
  }

  public void setPermissions(PermissionsDTO permissions) {
    this.permissions = permissions;
  }

  public PortEntity portType(String portType) {
    this.portType = portType;
    return this;
  }

   /**
   * Get portType
   * @return portType
  **/
  @Schema(description = "")
  public String getPortType() {
    return portType;
  }

  public void setPortType(String portType) {
    this.portType = portType;
  }

  public PortEntity position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public PortEntity revision(RevisionDTO revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Get revision
   * @return revision
  **/
  @Schema(description = "")
  public RevisionDTO getRevision() {
    return revision;
  }

  public void setRevision(RevisionDTO revision) {
    this.revision = revision;
  }

  public PortEntity status(PortStatusDTO status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public PortStatusDTO getStatus() {
    return status;
  }

  public void setStatus(PortStatusDTO status) {
    this.status = status;
  }

  public PortEntity uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * The URI for futures requests to the component.
   * @return uri
  **/
  @Schema(description = "The URI for futures requests to the component.")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortEntity portEntity = (PortEntity) o;
    return Objects.equals(this.allowRemoteAccess, portEntity.allowRemoteAccess) &&
        Objects.equals(this.bulletins, portEntity.bulletins) &&
        Objects.equals(this.component, portEntity.component) &&
        Objects.equals(this.disconnectedNodeAcknowledged, portEntity.disconnectedNodeAcknowledged) &&
        Objects.equals(this.id, portEntity.id) &&
        Objects.equals(this.operatePermissions, portEntity.operatePermissions) &&
        Objects.equals(this.permissions, portEntity.permissions) &&
        Objects.equals(this.portType, portEntity.portType) &&
        Objects.equals(this.position, portEntity.position) &&
        Objects.equals(this.revision, portEntity.revision) &&
        Objects.equals(this.status, portEntity.status) &&
        Objects.equals(this.uri, portEntity.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowRemoteAccess, bulletins, component, disconnectedNodeAcknowledged, id, operatePermissions, permissions, portType, position, revision, status, uri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortEntity {\n");
    
    sb.append("    allowRemoteAccess: ").append(toIndentedString(allowRemoteAccess)).append("\n");
    sb.append("    bulletins: ").append(toIndentedString(bulletins)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    disconnectedNodeAcknowledged: ").append(toIndentedString(disconnectedNodeAcknowledged)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operatePermissions: ").append(toIndentedString(operatePermissions)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    portType: ").append(toIndentedString(portType)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

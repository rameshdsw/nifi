/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.nifi.api.toolkit.model.BundleDTO;
import org.apache.nifi.api.toolkit.model.PositionDTO;
import org.apache.nifi.api.toolkit.model.ProcessorConfigDTO;
import org.apache.nifi.api.toolkit.model.RelationshipDTO;
/**
 * ProcessorDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ProcessorDTO {
  @JsonProperty("bundle")
  private BundleDTO bundle = null;

  @JsonProperty("config")
  private ProcessorConfigDTO config = null;

  @JsonProperty("deprecated")
  private Boolean deprecated = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("executionNodeRestricted")
  private Boolean executionNodeRestricted = null;

  @JsonProperty("extensionMissing")
  private Boolean extensionMissing = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("inputRequirement")
  private String inputRequirement = null;

  @JsonProperty("multipleVersionsAvailable")
  private Boolean multipleVersionsAvailable = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parentGroupId")
  private String parentGroupId = null;

  @JsonProperty("persistsState")
  private Boolean persistsState = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  @JsonProperty("relationships")
  private List<RelationshipDTO> relationships = null;

  @JsonProperty("restricted")
  private Boolean restricted = null;

  /**
   * The state of the processor
   */
  public enum StateEnum {
    RUNNING("RUNNING"),
    STOPPED("STOPPED"),
    DISABLED("DISABLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("style")
  private Map<String, String> style = null;

  @JsonProperty("supportsBatching")
  private Boolean supportsBatching = null;

  @JsonProperty("supportsParallelProcessing")
  private Boolean supportsParallelProcessing = null;

  @JsonProperty("supportsSensitiveDynamicProperties")
  private Boolean supportsSensitiveDynamicProperties = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("validationErrors")
  private List<String> validationErrors = null;

  /**
   * Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
   */
  public enum ValidationStatusEnum {
    VALID("VALID"),
    INVALID("INVALID"),
    VALIDATING("VALIDATING");

    private String value;

    ValidationStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ValidationStatusEnum fromValue(String input) {
      for (ValidationStatusEnum b : ValidationStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("validationStatus")
  private ValidationStatusEnum validationStatus = null;

  @JsonProperty("versionedComponentId")
  private String versionedComponentId = null;

  public ProcessorDTO bundle(BundleDTO bundle) {
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @Schema(description = "")
  public BundleDTO getBundle() {
    return bundle;
  }

  public void setBundle(BundleDTO bundle) {
    this.bundle = bundle;
  }

  public ProcessorDTO config(ProcessorConfigDTO config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @Schema(description = "")
  public ProcessorConfigDTO getConfig() {
    return config;
  }

  public void setConfig(ProcessorConfigDTO config) {
    this.config = config;
  }

  public ProcessorDTO deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * Whether the processor has been deprecated.
   * @return deprecated
  **/
  @Schema(description = "Whether the processor has been deprecated.")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public ProcessorDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the processor.
   * @return description
  **/
  @Schema(description = "The description of the processor.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProcessorDTO executionNodeRestricted(Boolean executionNodeRestricted) {
    this.executionNodeRestricted = executionNodeRestricted;
    return this;
  }

   /**
   * Indicates if the execution node of a processor is restricted to run only on the primary node
   * @return executionNodeRestricted
  **/
  @Schema(description = "Indicates if the execution node of a processor is restricted to run only on the primary node")
  public Boolean isExecutionNodeRestricted() {
    return executionNodeRestricted;
  }

  public void setExecutionNodeRestricted(Boolean executionNodeRestricted) {
    this.executionNodeRestricted = executionNodeRestricted;
  }

  public ProcessorDTO extensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
    return this;
  }

   /**
   * Whether the underlying extension is missing.
   * @return extensionMissing
  **/
  @Schema(description = "Whether the underlying extension is missing.")
  public Boolean isExtensionMissing() {
    return extensionMissing;
  }

  public void setExtensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
  }

  public ProcessorDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProcessorDTO inputRequirement(String inputRequirement) {
    this.inputRequirement = inputRequirement;
    return this;
  }

   /**
   * The input requirement for this processor.
   * @return inputRequirement
  **/
  @Schema(description = "The input requirement for this processor.")
  public String getInputRequirement() {
    return inputRequirement;
  }

  public void setInputRequirement(String inputRequirement) {
    this.inputRequirement = inputRequirement;
  }

  public ProcessorDTO multipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
    return this;
  }

   /**
   * Whether the processor has multiple versions available.
   * @return multipleVersionsAvailable
  **/
  @Schema(description = "Whether the processor has multiple versions available.")
  public Boolean isMultipleVersionsAvailable() {
    return multipleVersionsAvailable;
  }

  public void setMultipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
  }

  public ProcessorDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the processor.
   * @return name
  **/
  @Schema(description = "The name of the processor.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProcessorDTO parentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * The id of parent process group of this component if applicable.
   * @return parentGroupId
  **/
  @Schema(description = "The id of parent process group of this component if applicable.")
  public String getParentGroupId() {
    return parentGroupId;
  }

  public void setParentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
  }

  public ProcessorDTO persistsState(Boolean persistsState) {
    this.persistsState = persistsState;
    return this;
  }

   /**
   * Whether the processor persists state.
   * @return persistsState
  **/
  @Schema(description = "Whether the processor persists state.")
  public Boolean isPersistsState() {
    return persistsState;
  }

  public void setPersistsState(Boolean persistsState) {
    this.persistsState = persistsState;
  }

  public ProcessorDTO position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

   /**
   * The available relationships that the processor currently supports.
   * @return relationships
  **/
  @Schema(description = "The available relationships that the processor currently supports.")
  public List<RelationshipDTO> getRelationships() {
    return relationships;
  }

  public ProcessorDTO restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Whether the processor requires elevated privileges.
   * @return restricted
  **/
  @Schema(description = "Whether the processor requires elevated privileges.")
  public Boolean isRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }

  public ProcessorDTO state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the processor
   * @return state
  **/
  @Schema(description = "The state of the processor")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ProcessorDTO style(Map<String, String> style) {
    this.style = style;
    return this;
  }

  public ProcessorDTO putStyleItem(String key, String styleItem) {
    if (this.style == null) {
      this.style = new HashMap<>();
    }
    this.style.put(key, styleItem);
    return this;
  }

   /**
   * Styles for the processor (background-color : #eee).
   * @return style
  **/
  @Schema(description = "Styles for the processor (background-color : #eee).")
  public Map<String, String> getStyle() {
    return style;
  }

  public void setStyle(Map<String, String> style) {
    this.style = style;
  }

  public ProcessorDTO supportsBatching(Boolean supportsBatching) {
    this.supportsBatching = supportsBatching;
    return this;
  }

   /**
   * Whether the processor supports batching. This makes the run duration settings available.
   * @return supportsBatching
  **/
  @Schema(description = "Whether the processor supports batching. This makes the run duration settings available.")
  public Boolean isSupportsBatching() {
    return supportsBatching;
  }

  public void setSupportsBatching(Boolean supportsBatching) {
    this.supportsBatching = supportsBatching;
  }

  public ProcessorDTO supportsParallelProcessing(Boolean supportsParallelProcessing) {
    this.supportsParallelProcessing = supportsParallelProcessing;
    return this;
  }

   /**
   * Whether the processor supports parallel processing.
   * @return supportsParallelProcessing
  **/
  @Schema(description = "Whether the processor supports parallel processing.")
  public Boolean isSupportsParallelProcessing() {
    return supportsParallelProcessing;
  }

  public void setSupportsParallelProcessing(Boolean supportsParallelProcessing) {
    this.supportsParallelProcessing = supportsParallelProcessing;
  }

  public ProcessorDTO supportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
    return this;
  }

   /**
   * Whether the processor supports sensitive dynamic properties.
   * @return supportsSensitiveDynamicProperties
  **/
  @Schema(description = "Whether the processor supports sensitive dynamic properties.")
  public Boolean isSupportsSensitiveDynamicProperties() {
    return supportsSensitiveDynamicProperties;
  }

  public void setSupportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties) {
    this.supportsSensitiveDynamicProperties = supportsSensitiveDynamicProperties;
  }

  public ProcessorDTO type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the processor.
   * @return type
  **/
  @Schema(description = "The type of the processor.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ProcessorDTO validationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public ProcessorDTO addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.
   * @return validationErrors
  **/
  @Schema(description = "The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.")
  public List<String> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
  }

   /**
   * Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
   * @return validationStatus
  **/
  @Schema(description = "Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)")
  public ValidationStatusEnum getValidationStatus() {
    return validationStatus;
  }

  public ProcessorDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @Schema(description = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessorDTO processorDTO = (ProcessorDTO) o;
    return Objects.equals(this.bundle, processorDTO.bundle) &&
        Objects.equals(this.config, processorDTO.config) &&
        Objects.equals(this.deprecated, processorDTO.deprecated) &&
        Objects.equals(this.description, processorDTO.description) &&
        Objects.equals(this.executionNodeRestricted, processorDTO.executionNodeRestricted) &&
        Objects.equals(this.extensionMissing, processorDTO.extensionMissing) &&
        Objects.equals(this.id, processorDTO.id) &&
        Objects.equals(this.inputRequirement, processorDTO.inputRequirement) &&
        Objects.equals(this.multipleVersionsAvailable, processorDTO.multipleVersionsAvailable) &&
        Objects.equals(this.name, processorDTO.name) &&
        Objects.equals(this.parentGroupId, processorDTO.parentGroupId) &&
        Objects.equals(this.persistsState, processorDTO.persistsState) &&
        Objects.equals(this.position, processorDTO.position) &&
        Objects.equals(this.relationships, processorDTO.relationships) &&
        Objects.equals(this.restricted, processorDTO.restricted) &&
        Objects.equals(this.state, processorDTO.state) &&
        Objects.equals(this.style, processorDTO.style) &&
        Objects.equals(this.supportsBatching, processorDTO.supportsBatching) &&
        Objects.equals(this.supportsParallelProcessing, processorDTO.supportsParallelProcessing) &&
        Objects.equals(this.supportsSensitiveDynamicProperties, processorDTO.supportsSensitiveDynamicProperties) &&
        Objects.equals(this.type, processorDTO.type) &&
        Objects.equals(this.validationErrors, processorDTO.validationErrors) &&
        Objects.equals(this.validationStatus, processorDTO.validationStatus) &&
        Objects.equals(this.versionedComponentId, processorDTO.versionedComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundle, config, deprecated, description, executionNodeRestricted, extensionMissing, id, inputRequirement, multipleVersionsAvailable, name, parentGroupId, persistsState, position, relationships, restricted, state, style, supportsBatching, supportsParallelProcessing, supportsSensitiveDynamicProperties, type, validationErrors, validationStatus, versionedComponentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessorDTO {\n");
    
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    executionNodeRestricted: ").append(toIndentedString(executionNodeRestricted)).append("\n");
    sb.append("    extensionMissing: ").append(toIndentedString(extensionMissing)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputRequirement: ").append(toIndentedString(inputRequirement)).append("\n");
    sb.append("    multipleVersionsAvailable: ").append(toIndentedString(multipleVersionsAvailable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    persistsState: ").append(toIndentedString(persistsState)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    supportsBatching: ").append(toIndentedString(supportsBatching)).append("\n");
    sb.append("    supportsParallelProcessing: ").append(toIndentedString(supportsParallelProcessing)).append("\n");
    sb.append("    supportsSensitiveDynamicProperties: ").append(toIndentedString(supportsSensitiveDynamicProperties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

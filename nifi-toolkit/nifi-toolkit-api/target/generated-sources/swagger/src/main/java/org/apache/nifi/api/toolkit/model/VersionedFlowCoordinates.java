/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The coordinates where the remote flow is stored, or null if the Process Group is not directly under Version Control
 */
@Schema(description = "The coordinates where the remote flow is stored, or null if the Process Group is not directly under Version Control")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class VersionedFlowCoordinates {
  @JsonProperty("branch")
  private String branch = null;

  @JsonProperty("bucketId")
  private String bucketId = null;

  @JsonProperty("flowId")
  private String flowId = null;

  @JsonProperty("latest")
  private Boolean latest = null;

  @JsonProperty("registryId")
  private String registryId = null;

  @JsonProperty("storageLocation")
  private String storageLocation = null;

  @JsonProperty("version")
  private String version = null;

  public VersionedFlowCoordinates branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * The name of the branch that the flow resides in
   * @return branch
  **/
  @Schema(description = "The name of the branch that the flow resides in")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public VersionedFlowCoordinates bucketId(String bucketId) {
    this.bucketId = bucketId;
    return this;
  }

   /**
   * The UUID of the bucket that the flow resides in
   * @return bucketId
  **/
  @Schema(description = "The UUID of the bucket that the flow resides in")
  public String getBucketId() {
    return bucketId;
  }

  public void setBucketId(String bucketId) {
    this.bucketId = bucketId;
  }

  public VersionedFlowCoordinates flowId(String flowId) {
    this.flowId = flowId;
    return this;
  }

   /**
   * The UUID of the flow
   * @return flowId
  **/
  @Schema(description = "The UUID of the flow")
  public String getFlowId() {
    return flowId;
  }

  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }

  public VersionedFlowCoordinates latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

   /**
   * Whether or not these coordinates point to the latest version of the flow
   * @return latest
  **/
  @Schema(description = "Whether or not these coordinates point to the latest version of the flow")
  public Boolean isLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }

  public VersionedFlowCoordinates registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

   /**
   * The identifier of the Flow Registry that contains the flow
   * @return registryId
  **/
  @Schema(description = "The identifier of the Flow Registry that contains the flow")
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }

  public VersionedFlowCoordinates storageLocation(String storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

   /**
   * The location of the Flow Registry that stores the flow
   * @return storageLocation
  **/
  @Schema(description = "The location of the Flow Registry that stores the flow")
  public String getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(String storageLocation) {
    this.storageLocation = storageLocation;
  }

  public VersionedFlowCoordinates version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the flow
   * @return version
  **/
  @Schema(description = "The version of the flow")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedFlowCoordinates versionedFlowCoordinates = (VersionedFlowCoordinates) o;
    return Objects.equals(this.branch, versionedFlowCoordinates.branch) &&
        Objects.equals(this.bucketId, versionedFlowCoordinates.bucketId) &&
        Objects.equals(this.flowId, versionedFlowCoordinates.flowId) &&
        Objects.equals(this.latest, versionedFlowCoordinates.latest) &&
        Objects.equals(this.registryId, versionedFlowCoordinates.registryId) &&
        Objects.equals(this.storageLocation, versionedFlowCoordinates.storageLocation) &&
        Objects.equals(this.version, versionedFlowCoordinates.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, bucketId, flowId, latest, registryId, storageLocation, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedFlowCoordinates {\n");
    
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    bucketId: ").append(toIndentedString(bucketId)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

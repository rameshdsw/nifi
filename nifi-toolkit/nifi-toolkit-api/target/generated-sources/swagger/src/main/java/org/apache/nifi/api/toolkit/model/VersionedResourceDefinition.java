/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Returns the Resource Definition that defines which type(s) of resource(s) this property references, if any
 */
@Schema(description = "Returns the Resource Definition that defines which type(s) of resource(s) this property references, if any")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class VersionedResourceDefinition {
  /**
   * The cardinality of the resource
   */
  public enum CardinalityEnum {
    SINGLE("SINGLE"),
    MULTIPLE("MULTIPLE");

    private String value;

    CardinalityEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CardinalityEnum fromValue(String input) {
      for (CardinalityEnum b : CardinalityEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("cardinality")
  private CardinalityEnum cardinality = null;

  /**
   * The types of resource that the Property Descriptor is allowed to reference
   */
  public enum ResourceTypesEnum {
    FILE("FILE"),
    DIRECTORY("DIRECTORY"),
    TEXT("TEXT"),
    URL("URL");

    private String value;

    ResourceTypesEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ResourceTypesEnum fromValue(String input) {
      for (ResourceTypesEnum b : ResourceTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("resourceTypes")
  private List<ResourceTypesEnum> resourceTypes = null;

  public VersionedResourceDefinition cardinality(CardinalityEnum cardinality) {
    this.cardinality = cardinality;
    return this;
  }

   /**
   * The cardinality of the resource
   * @return cardinality
  **/
  @Schema(description = "The cardinality of the resource")
  public CardinalityEnum getCardinality() {
    return cardinality;
  }

  public void setCardinality(CardinalityEnum cardinality) {
    this.cardinality = cardinality;
  }

  public VersionedResourceDefinition resourceTypes(List<ResourceTypesEnum> resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  public VersionedResourceDefinition addResourceTypesItem(ResourceTypesEnum resourceTypesItem) {
    if (this.resourceTypes == null) {
      this.resourceTypes = new ArrayList<>();
    }
    this.resourceTypes.add(resourceTypesItem);
    return this;
  }

   /**
   * The types of resource that the Property Descriptor is allowed to reference
   * @return resourceTypes
  **/
  @Schema(description = "The types of resource that the Property Descriptor is allowed to reference")
  public List<ResourceTypesEnum> getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List<ResourceTypesEnum> resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedResourceDefinition versionedResourceDefinition = (VersionedResourceDefinition) o;
    return Objects.equals(this.cardinality, versionedResourceDefinition.cardinality) &&
        Objects.equals(this.resourceTypes, versionedResourceDefinition.resourceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardinality, resourceTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedResourceDefinition {\n");
    
    sb.append("    cardinality: ").append(toIndentedString(cardinality)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Configuration for any fetched parameter groups.
 */
@Schema(description = "Configuration for any fetched parameter groups.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ParameterGroupConfigurationEntity {
  @JsonProperty("groupName")
  private String groupName = null;

  @JsonProperty("parameterContextName")
  private String parameterContextName = null;

  /**
   * All fetched parameter names that should be applied.
   */
  public enum InnerEnum {
    SENSITIVE("SENSITIVE"),
    NON_SENSITIVE("NON_SENSITIVE");

    private String value;

    InnerEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static InnerEnum fromValue(String input) {
      for (InnerEnum b : InnerEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("parameterSensitivities")
  private Map<String, InnerEnum> parameterSensitivities = null;

  @JsonProperty("synchronized")
  private Boolean _synchronized = null;

  public ParameterGroupConfigurationEntity groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

   /**
   * The name of the external parameter group to which the provided parameter names apply.
   * @return groupName
  **/
  @Schema(description = "The name of the external parameter group to which the provided parameter names apply.")
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }

  public ParameterGroupConfigurationEntity parameterContextName(String parameterContextName) {
    this.parameterContextName = parameterContextName;
    return this;
  }

   /**
   * The name of the ParameterContext that receives the parameters in this group
   * @return parameterContextName
  **/
  @Schema(description = "The name of the ParameterContext that receives the parameters in this group")
  public String getParameterContextName() {
    return parameterContextName;
  }

  public void setParameterContextName(String parameterContextName) {
    this.parameterContextName = parameterContextName;
  }

  public ParameterGroupConfigurationEntity parameterSensitivities(Map<String, InnerEnum> parameterSensitivities) {
    this.parameterSensitivities = parameterSensitivities;
    return this;
  }

  public ParameterGroupConfigurationEntity putParameterSensitivitiesItem(String key, InnerEnum parameterSensitivitiesItem) {
    if (this.parameterSensitivities == null) {
      this.parameterSensitivities = new HashMap<>();
    }
    this.parameterSensitivities.put(key, parameterSensitivitiesItem);
    return this;
  }

   /**
   * All fetched parameter names that should be applied.
   * @return parameterSensitivities
  **/
  @Schema(description = "All fetched parameter names that should be applied.")
  public Map<String, InnerEnum> getParameterSensitivities() {
    return parameterSensitivities;
  }

  public void setParameterSensitivities(Map<String, InnerEnum> parameterSensitivities) {
    this.parameterSensitivities = parameterSensitivities;
  }

  public ParameterGroupConfigurationEntity _synchronized(Boolean _synchronized) {
    this._synchronized = _synchronized;
    return this;
  }

   /**
   * True if this group should be synchronized to a ParameterContext, including creating one if it does not exist.
   * @return _synchronized
  **/
  @Schema(description = "True if this group should be synchronized to a ParameterContext, including creating one if it does not exist.")
  public Boolean isSynchronized() {
    return _synchronized;
  }

  public void setSynchronized(Boolean _synchronized) {
    this._synchronized = _synchronized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterGroupConfigurationEntity parameterGroupConfigurationEntity = (ParameterGroupConfigurationEntity) o;
    return Objects.equals(this.groupName, parameterGroupConfigurationEntity.groupName) &&
        Objects.equals(this.parameterContextName, parameterGroupConfigurationEntity.parameterContextName) &&
        Objects.equals(this.parameterSensitivities, parameterGroupConfigurationEntity.parameterSensitivities) &&
        Objects.equals(this._synchronized, parameterGroupConfigurationEntity._synchronized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupName, parameterContextName, parameterSensitivities, _synchronized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterGroupConfigurationEntity {\n");
    
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    parameterContextName: ").append(toIndentedString(parameterContextName)).append("\n");
    sb.append("    parameterSensitivities: ").append(toIndentedString(parameterSensitivities)).append("\n");
    sb.append("    _synchronized: ").append(toIndentedString(_synchronized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

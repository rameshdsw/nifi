/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.apache.nifi.api.toolkit.model.Position;
import org.apache.nifi.api.toolkit.model.VersionedParameter;
/**
 * VersionedParameterContext
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class VersionedParameterContext {
  @JsonProperty("comments")
  private String comments = null;

  /**
   * Gets or Sets componentType
   */
  public enum ComponentTypeEnum {
    CONNECTION("CONNECTION"),
    PROCESSOR("PROCESSOR"),
    PROCESS_GROUP("PROCESS_GROUP"),
    REMOTE_PROCESS_GROUP("REMOTE_PROCESS_GROUP"),
    INPUT_PORT("INPUT_PORT"),
    OUTPUT_PORT("OUTPUT_PORT"),
    REMOTE_INPUT_PORT("REMOTE_INPUT_PORT"),
    REMOTE_OUTPUT_PORT("REMOTE_OUTPUT_PORT"),
    FUNNEL("FUNNEL"),
    LABEL("LABEL"),
    CONTROLLER_SERVICE("CONTROLLER_SERVICE"),
    REPORTING_TASK("REPORTING_TASK"),
    FLOW_ANALYSIS_RULE("FLOW_ANALYSIS_RULE"),
    PARAMETER_CONTEXT("PARAMETER_CONTEXT"),
    PARAMETER_PROVIDER("PARAMETER_PROVIDER"),
    FLOW_REGISTRY_CLIENT("FLOW_REGISTRY_CLIENT");

    private String value;

    ComponentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ComponentTypeEnum fromValue(String input) {
      for (ComponentTypeEnum b : ComponentTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("componentType")
  private ComponentTypeEnum componentType = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("groupIdentifier")
  private String groupIdentifier = null;

  @JsonProperty("identifier")
  private String identifier = null;

  @JsonProperty("inheritedParameterContexts")
  private List<String> inheritedParameterContexts = null;

  @JsonProperty("instanceIdentifier")
  private String instanceIdentifier = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parameterGroupName")
  private String parameterGroupName = null;

  @JsonProperty("parameterProvider")
  private String parameterProvider = null;

  @JsonProperty("parameters")
  private List<VersionedParameter> parameters = null;

  @JsonProperty("position")
  private Position position = null;

  @JsonProperty("synchronized")
  private Boolean _synchronized = null;

  public VersionedParameterContext comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The user-supplied comments for the component
   * @return comments
  **/
  @Schema(description = "The user-supplied comments for the component")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public VersionedParameterContext componentType(ComponentTypeEnum componentType) {
    this.componentType = componentType;
    return this;
  }

   /**
   * Get componentType
   * @return componentType
  **/
  @Schema(description = "")
  public ComponentTypeEnum getComponentType() {
    return componentType;
  }

  public void setComponentType(ComponentTypeEnum componentType) {
    this.componentType = componentType;
  }

  public VersionedParameterContext description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the parameter context
   * @return description
  **/
  @Schema(description = "The description of the parameter context")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public VersionedParameterContext groupIdentifier(String groupIdentifier) {
    this.groupIdentifier = groupIdentifier;
    return this;
  }

   /**
   * The ID of the Process Group that this component belongs to
   * @return groupIdentifier
  **/
  @Schema(description = "The ID of the Process Group that this component belongs to")
  public String getGroupIdentifier() {
    return groupIdentifier;
  }

  public void setGroupIdentifier(String groupIdentifier) {
    this.groupIdentifier = groupIdentifier;
  }

  public VersionedParameterContext identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The component&#x27;s unique identifier
   * @return identifier
  **/
  @Schema(description = "The component's unique identifier")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public VersionedParameterContext inheritedParameterContexts(List<String> inheritedParameterContexts) {
    this.inheritedParameterContexts = inheritedParameterContexts;
    return this;
  }

  public VersionedParameterContext addInheritedParameterContextsItem(String inheritedParameterContextsItem) {
    if (this.inheritedParameterContexts == null) {
      this.inheritedParameterContexts = new ArrayList<>();
    }
    this.inheritedParameterContexts.add(inheritedParameterContextsItem);
    return this;
  }

   /**
   * The names of additional parameter contexts from which to inherit parameters
   * @return inheritedParameterContexts
  **/
  @Schema(description = "The names of additional parameter contexts from which to inherit parameters")
  public List<String> getInheritedParameterContexts() {
    return inheritedParameterContexts;
  }

  public void setInheritedParameterContexts(List<String> inheritedParameterContexts) {
    this.inheritedParameterContexts = inheritedParameterContexts;
  }

  public VersionedParameterContext instanceIdentifier(String instanceIdentifier) {
    this.instanceIdentifier = instanceIdentifier;
    return this;
  }

   /**
   * The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
   * @return instanceIdentifier
  **/
  @Schema(description = "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component")
  public String getInstanceIdentifier() {
    return instanceIdentifier;
  }

  public void setInstanceIdentifier(String instanceIdentifier) {
    this.instanceIdentifier = instanceIdentifier;
  }

  public VersionedParameterContext name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The component&#x27;s name
   * @return name
  **/
  @Schema(description = "The component's name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public VersionedParameterContext parameterGroupName(String parameterGroupName) {
    this.parameterGroupName = parameterGroupName;
    return this;
  }

   /**
   * The corresponding parameter group name fetched from the parameter provider, if applicable
   * @return parameterGroupName
  **/
  @Schema(description = "The corresponding parameter group name fetched from the parameter provider, if applicable")
  public String getParameterGroupName() {
    return parameterGroupName;
  }

  public void setParameterGroupName(String parameterGroupName) {
    this.parameterGroupName = parameterGroupName;
  }

  public VersionedParameterContext parameterProvider(String parameterProvider) {
    this.parameterProvider = parameterProvider;
    return this;
  }

   /**
   * The identifier of an optional parameter provider
   * @return parameterProvider
  **/
  @Schema(description = "The identifier of an optional parameter provider")
  public String getParameterProvider() {
    return parameterProvider;
  }

  public void setParameterProvider(String parameterProvider) {
    this.parameterProvider = parameterProvider;
  }

  public VersionedParameterContext parameters(List<VersionedParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public VersionedParameterContext addParametersItem(VersionedParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * The parameters in the context
   * @return parameters
  **/
  @Schema(description = "The parameters in the context")
  public List<VersionedParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<VersionedParameter> parameters) {
    this.parameters = parameters;
  }

  public VersionedParameterContext position(Position position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public Position getPosition() {
    return position;
  }

  public void setPosition(Position position) {
    this.position = position;
  }

  public VersionedParameterContext _synchronized(Boolean _synchronized) {
    this._synchronized = _synchronized;
    return this;
  }

   /**
   * True if the parameter provider is set and the context should receive updates when its parameters are next fetched
   * @return _synchronized
  **/
  @Schema(description = "True if the parameter provider is set and the context should receive updates when its parameters are next fetched")
  public Boolean isSynchronized() {
    return _synchronized;
  }

  public void setSynchronized(Boolean _synchronized) {
    this._synchronized = _synchronized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedParameterContext versionedParameterContext = (VersionedParameterContext) o;
    return Objects.equals(this.comments, versionedParameterContext.comments) &&
        Objects.equals(this.componentType, versionedParameterContext.componentType) &&
        Objects.equals(this.description, versionedParameterContext.description) &&
        Objects.equals(this.groupIdentifier, versionedParameterContext.groupIdentifier) &&
        Objects.equals(this.identifier, versionedParameterContext.identifier) &&
        Objects.equals(this.inheritedParameterContexts, versionedParameterContext.inheritedParameterContexts) &&
        Objects.equals(this.instanceIdentifier, versionedParameterContext.instanceIdentifier) &&
        Objects.equals(this.name, versionedParameterContext.name) &&
        Objects.equals(this.parameterGroupName, versionedParameterContext.parameterGroupName) &&
        Objects.equals(this.parameterProvider, versionedParameterContext.parameterProvider) &&
        Objects.equals(this.parameters, versionedParameterContext.parameters) &&
        Objects.equals(this.position, versionedParameterContext.position) &&
        Objects.equals(this._synchronized, versionedParameterContext._synchronized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, componentType, description, groupIdentifier, identifier, inheritedParameterContexts, instanceIdentifier, name, parameterGroupName, parameterProvider, parameters, position, _synchronized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedParameterContext {\n");
    
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groupIdentifier: ").append(toIndentedString(groupIdentifier)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    inheritedParameterContexts: ").append(toIndentedString(inheritedParameterContexts)).append("\n");
    sb.append("    instanceIdentifier: ").append(toIndentedString(instanceIdentifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameterGroupName: ").append(toIndentedString(parameterGroupName)).append("\n");
    sb.append("    parameterProvider: ").append(toIndentedString(parameterProvider)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    _synchronized: ").append(toIndentedString(_synchronized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

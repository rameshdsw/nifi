/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.nifi.api.toolkit.model.AffectedComponentEntity;
import org.apache.nifi.api.toolkit.model.BundleDTO;
import org.apache.nifi.api.toolkit.model.ParameterGroupConfigurationEntity;
import org.apache.nifi.api.toolkit.model.ParameterProviderReferencingComponentEntity;
import org.apache.nifi.api.toolkit.model.ParameterStatusDTO;
import org.apache.nifi.api.toolkit.model.PositionDTO;
import org.apache.nifi.api.toolkit.model.PropertyDescriptorDTO;
/**
 * ParameterProviderDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class ParameterProviderDTO {
  @JsonProperty("affectedComponents")
  private List<AffectedComponentEntity> affectedComponents = null;

  @JsonProperty("annotationData")
  private String annotationData = null;

  @JsonProperty("bundle")
  private BundleDTO bundle = null;

  @JsonProperty("comments")
  private String comments = null;

  @JsonProperty("customUiUrl")
  private String customUiUrl = null;

  @JsonProperty("deprecated")
  private Boolean deprecated = null;

  @JsonProperty("descriptors")
  private Map<String, PropertyDescriptorDTO> descriptors = null;

  @JsonProperty("extensionMissing")
  private Boolean extensionMissing = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("multipleVersionsAvailable")
  private Boolean multipleVersionsAvailable = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("parameterGroupConfigurations")
  private List<ParameterGroupConfigurationEntity> parameterGroupConfigurations = null;

  @JsonProperty("parameterStatus")
  private List<ParameterStatusDTO> parameterStatus = null;

  @JsonProperty("parentGroupId")
  private String parentGroupId = null;

  @JsonProperty("persistsState")
  private Boolean persistsState = null;

  @JsonProperty("position")
  private PositionDTO position = null;

  @JsonProperty("properties")
  private Map<String, String> properties = null;

  @JsonProperty("referencingParameterContexts")
  private List<ParameterProviderReferencingComponentEntity> referencingParameterContexts = null;

  @JsonProperty("restricted")
  private Boolean restricted = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("validationErrors")
  private List<String> validationErrors = null;

  /**
   * Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)
   */
  public enum ValidationStatusEnum {
    VALID("VALID"),
    INVALID("INVALID"),
    VALIDATING("VALIDATING");

    private String value;

    ValidationStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ValidationStatusEnum fromValue(String input) {
      for (ValidationStatusEnum b : ValidationStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("validationStatus")
  private ValidationStatusEnum validationStatus = null;

  @JsonProperty("versionedComponentId")
  private String versionedComponentId = null;

  public ParameterProviderDTO affectedComponents(List<AffectedComponentEntity> affectedComponents) {
    this.affectedComponents = affectedComponents;
    return this;
  }

  public ParameterProviderDTO addAffectedComponentsItem(AffectedComponentEntity affectedComponentsItem) {
    if (this.affectedComponents == null) {
      this.affectedComponents = new ArrayList<>();
    }
    this.affectedComponents.add(affectedComponentsItem);
    return this;
  }

   /**
   * The set of all components in the flow that are referencing Parameters provided by this provider
   * @return affectedComponents
  **/
  @Schema(description = "The set of all components in the flow that are referencing Parameters provided by this provider")
  public List<AffectedComponentEntity> getAffectedComponents() {
    return affectedComponents;
  }

  public void setAffectedComponents(List<AffectedComponentEntity> affectedComponents) {
    this.affectedComponents = affectedComponents;
  }

  public ParameterProviderDTO annotationData(String annotationData) {
    this.annotationData = annotationData;
    return this;
  }

   /**
   * The annotation data for the parameter provider. This is how the custom UI relays configuration to the parameter provider.
   * @return annotationData
  **/
  @Schema(description = "The annotation data for the parameter provider. This is how the custom UI relays configuration to the parameter provider.")
  public String getAnnotationData() {
    return annotationData;
  }

  public void setAnnotationData(String annotationData) {
    this.annotationData = annotationData;
  }

  public ParameterProviderDTO bundle(BundleDTO bundle) {
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @Schema(description = "")
  public BundleDTO getBundle() {
    return bundle;
  }

  public void setBundle(BundleDTO bundle) {
    this.bundle = bundle;
  }

  public ParameterProviderDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments of the parameter provider.
   * @return comments
  **/
  @Schema(description = "The comments of the parameter provider.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public ParameterProviderDTO customUiUrl(String customUiUrl) {
    this.customUiUrl = customUiUrl;
    return this;
  }

   /**
   * The URL for the custom configuration UI for the parameter provider.
   * @return customUiUrl
  **/
  @Schema(description = "The URL for the custom configuration UI for the parameter provider.")
  public String getCustomUiUrl() {
    return customUiUrl;
  }

  public void setCustomUiUrl(String customUiUrl) {
    this.customUiUrl = customUiUrl;
  }

  public ParameterProviderDTO deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * Whether the parameter provider has been deprecated.
   * @return deprecated
  **/
  @Schema(description = "Whether the parameter provider has been deprecated.")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public ParameterProviderDTO descriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
    return this;
  }

  public ParameterProviderDTO putDescriptorsItem(String key, PropertyDescriptorDTO descriptorsItem) {
    if (this.descriptors == null) {
      this.descriptors = new HashMap<>();
    }
    this.descriptors.put(key, descriptorsItem);
    return this;
  }

   /**
   * The descriptors for the parameter providers properties.
   * @return descriptors
  **/
  @Schema(description = "The descriptors for the parameter providers properties.")
  public Map<String, PropertyDescriptorDTO> getDescriptors() {
    return descriptors;
  }

  public void setDescriptors(Map<String, PropertyDescriptorDTO> descriptors) {
    this.descriptors = descriptors;
  }

  public ParameterProviderDTO extensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
    return this;
  }

   /**
   * Whether the underlying extension is missing.
   * @return extensionMissing
  **/
  @Schema(description = "Whether the underlying extension is missing.")
  public Boolean isExtensionMissing() {
    return extensionMissing;
  }

  public void setExtensionMissing(Boolean extensionMissing) {
    this.extensionMissing = extensionMissing;
  }

  public ParameterProviderDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @Schema(description = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ParameterProviderDTO multipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
    return this;
  }

   /**
   * Whether the parameter provider has multiple versions available.
   * @return multipleVersionsAvailable
  **/
  @Schema(description = "Whether the parameter provider has multiple versions available.")
  public Boolean isMultipleVersionsAvailable() {
    return multipleVersionsAvailable;
  }

  public void setMultipleVersionsAvailable(Boolean multipleVersionsAvailable) {
    this.multipleVersionsAvailable = multipleVersionsAvailable;
  }

  public ParameterProviderDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the parameter provider.
   * @return name
  **/
  @Schema(description = "The name of the parameter provider.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ParameterProviderDTO parameterGroupConfigurations(List<ParameterGroupConfigurationEntity> parameterGroupConfigurations) {
    this.parameterGroupConfigurations = parameterGroupConfigurations;
    return this;
  }

  public ParameterProviderDTO addParameterGroupConfigurationsItem(ParameterGroupConfigurationEntity parameterGroupConfigurationsItem) {
    if (this.parameterGroupConfigurations == null) {
      this.parameterGroupConfigurations = new ArrayList<>();
    }
    this.parameterGroupConfigurations.add(parameterGroupConfigurationsItem);
    return this;
  }

   /**
   * Configuration for any fetched parameter groups.
   * @return parameterGroupConfigurations
  **/
  @Schema(description = "Configuration for any fetched parameter groups.")
  public List<ParameterGroupConfigurationEntity> getParameterGroupConfigurations() {
    return parameterGroupConfigurations;
  }

  public void setParameterGroupConfigurations(List<ParameterGroupConfigurationEntity> parameterGroupConfigurations) {
    this.parameterGroupConfigurations = parameterGroupConfigurations;
  }

  public ParameterProviderDTO parameterStatus(List<ParameterStatusDTO> parameterStatus) {
    this.parameterStatus = parameterStatus;
    return this;
  }

  public ParameterProviderDTO addParameterStatusItem(ParameterStatusDTO parameterStatusItem) {
    if (this.parameterStatus == null) {
      this.parameterStatus = new ArrayList<>();
    }
    this.parameterStatus.add(parameterStatusItem);
    return this;
  }

   /**
   * The status of all provided parameters for this parameter provider
   * @return parameterStatus
  **/
  @Schema(description = "The status of all provided parameters for this parameter provider")
  public List<ParameterStatusDTO> getParameterStatus() {
    return parameterStatus;
  }

  public void setParameterStatus(List<ParameterStatusDTO> parameterStatus) {
    this.parameterStatus = parameterStatus;
  }

  public ParameterProviderDTO parentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * The id of parent process group of this component if applicable.
   * @return parentGroupId
  **/
  @Schema(description = "The id of parent process group of this component if applicable.")
  public String getParentGroupId() {
    return parentGroupId;
  }

  public void setParentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
  }

  public ParameterProviderDTO persistsState(Boolean persistsState) {
    this.persistsState = persistsState;
    return this;
  }

   /**
   * Whether the parameter provider persists state.
   * @return persistsState
  **/
  @Schema(description = "Whether the parameter provider persists state.")
  public Boolean isPersistsState() {
    return persistsState;
  }

  public void setPersistsState(Boolean persistsState) {
    this.persistsState = persistsState;
  }

  public ParameterProviderDTO position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public ParameterProviderDTO properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ParameterProviderDTO putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties of the parameter provider.
   * @return properties
  **/
  @Schema(description = "The properties of the parameter provider.")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }

   /**
   * The Parameter Contexts that reference this Parameter Provider
   * @return referencingParameterContexts
  **/
  @Schema(description = "The Parameter Contexts that reference this Parameter Provider")
  public List<ParameterProviderReferencingComponentEntity> getReferencingParameterContexts() {
    return referencingParameterContexts;
  }

  public ParameterProviderDTO restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Whether the parameter provider requires elevated privileges.
   * @return restricted
  **/
  @Schema(description = "Whether the parameter provider requires elevated privileges.")
  public Boolean isRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }

  public ParameterProviderDTO type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The fully qualified type of the parameter provider.
   * @return type
  **/
  @Schema(description = "The fully qualified type of the parameter provider.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ParameterProviderDTO validationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public ParameterProviderDTO addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * Gets the validation errors from the parameter provider. These validation errors represent the problems with the parameter provider that must be resolved before it can be scheduled to run.
   * @return validationErrors
  **/
  @Schema(description = "Gets the validation errors from the parameter provider. These validation errors represent the problems with the parameter provider that must be resolved before it can be scheduled to run.")
  public List<String> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
  }

   /**
   * Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)
   * @return validationStatus
  **/
  @Schema(description = "Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)")
  public ValidationStatusEnum getValidationStatus() {
    return validationStatus;
  }

  public ParameterProviderDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @Schema(description = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterProviderDTO parameterProviderDTO = (ParameterProviderDTO) o;
    return Objects.equals(this.affectedComponents, parameterProviderDTO.affectedComponents) &&
        Objects.equals(this.annotationData, parameterProviderDTO.annotationData) &&
        Objects.equals(this.bundle, parameterProviderDTO.bundle) &&
        Objects.equals(this.comments, parameterProviderDTO.comments) &&
        Objects.equals(this.customUiUrl, parameterProviderDTO.customUiUrl) &&
        Objects.equals(this.deprecated, parameterProviderDTO.deprecated) &&
        Objects.equals(this.descriptors, parameterProviderDTO.descriptors) &&
        Objects.equals(this.extensionMissing, parameterProviderDTO.extensionMissing) &&
        Objects.equals(this.id, parameterProviderDTO.id) &&
        Objects.equals(this.multipleVersionsAvailable, parameterProviderDTO.multipleVersionsAvailable) &&
        Objects.equals(this.name, parameterProviderDTO.name) &&
        Objects.equals(this.parameterGroupConfigurations, parameterProviderDTO.parameterGroupConfigurations) &&
        Objects.equals(this.parameterStatus, parameterProviderDTO.parameterStatus) &&
        Objects.equals(this.parentGroupId, parameterProviderDTO.parentGroupId) &&
        Objects.equals(this.persistsState, parameterProviderDTO.persistsState) &&
        Objects.equals(this.position, parameterProviderDTO.position) &&
        Objects.equals(this.properties, parameterProviderDTO.properties) &&
        Objects.equals(this.referencingParameterContexts, parameterProviderDTO.referencingParameterContexts) &&
        Objects.equals(this.restricted, parameterProviderDTO.restricted) &&
        Objects.equals(this.type, parameterProviderDTO.type) &&
        Objects.equals(this.validationErrors, parameterProviderDTO.validationErrors) &&
        Objects.equals(this.validationStatus, parameterProviderDTO.validationStatus) &&
        Objects.equals(this.versionedComponentId, parameterProviderDTO.versionedComponentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedComponents, annotationData, bundle, comments, customUiUrl, deprecated, descriptors, extensionMissing, id, multipleVersionsAvailable, name, parameterGroupConfigurations, parameterStatus, parentGroupId, persistsState, position, properties, referencingParameterContexts, restricted, type, validationErrors, validationStatus, versionedComponentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterProviderDTO {\n");
    
    sb.append("    affectedComponents: ").append(toIndentedString(affectedComponents)).append("\n");
    sb.append("    annotationData: ").append(toIndentedString(annotationData)).append("\n");
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    customUiUrl: ").append(toIndentedString(customUiUrl)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    descriptors: ").append(toIndentedString(descriptors)).append("\n");
    sb.append("    extensionMissing: ").append(toIndentedString(extensionMissing)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    multipleVersionsAvailable: ").append(toIndentedString(multipleVersionsAvailable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameterGroupConfigurations: ").append(toIndentedString(parameterGroupConfigurations)).append("\n");
    sb.append("    parameterStatus: ").append(toIndentedString(parameterStatus)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    persistsState: ").append(toIndentedString(persistsState)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    referencingParameterContexts: ").append(toIndentedString(referencingParameterContexts)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

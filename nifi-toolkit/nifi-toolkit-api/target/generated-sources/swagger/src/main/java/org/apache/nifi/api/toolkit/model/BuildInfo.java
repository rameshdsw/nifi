/*
 * Apache NiFi REST API
 * REST API definition for Apache NiFi web services
 *
 * OpenAPI spec version: 2.4.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.nifi.api.toolkit.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The build metadata for this component
 */
@Schema(description = "The build metadata for this component")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-09-03T13:15:23.252321740+05:30[Asia/Kolkata]")

public class BuildInfo {
  @JsonProperty("compiler")
  private String compiler = null;

  @JsonProperty("compilerFlags")
  private String compilerFlags = null;

  @JsonProperty("revision")
  private String revision = null;

  @JsonProperty("targetArch")
  private String targetArch = null;

  @JsonProperty("timestamp")
  private Long timestamp = null;

  @JsonProperty("version")
  private String version = null;

  public BuildInfo compiler(String compiler) {
    this.compiler = compiler;
    return this;
  }

   /**
   * The compiler used for the build
   * @return compiler
  **/
  @Schema(description = "The compiler used for the build")
  public String getCompiler() {
    return compiler;
  }

  public void setCompiler(String compiler) {
    this.compiler = compiler;
  }

  public BuildInfo compilerFlags(String compilerFlags) {
    this.compilerFlags = compilerFlags;
    return this;
  }

   /**
   * The compiler flags used for the build.
   * @return compilerFlags
  **/
  @Schema(description = "The compiler flags used for the build.")
  public String getCompilerFlags() {
    return compilerFlags;
  }

  public void setCompilerFlags(String compilerFlags) {
    this.compilerFlags = compilerFlags;
  }

  public BuildInfo revision(String revision) {
    this.revision = revision;
    return this;
  }

   /**
   * The SCM revision id of the source code used for this build.
   * @return revision
  **/
  @Schema(description = "The SCM revision id of the source code used for this build.")
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }

  public BuildInfo targetArch(String targetArch) {
    this.targetArch = targetArch;
    return this;
  }

   /**
   * The target architecture of the built component.
   * @return targetArch
  **/
  @Schema(description = "The target architecture of the built component.")
  public String getTargetArch() {
    return targetArch;
  }

  public void setTargetArch(String targetArch) {
    this.targetArch = targetArch;
  }

  public BuildInfo timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp (milliseconds since Epoch) of the build.
   * @return timestamp
  **/
  @Schema(description = "The timestamp (milliseconds since Epoch) of the build.")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public BuildInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version number of the built component.
   * @return version
  **/
  @Schema(description = "The version number of the built component.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildInfo buildInfo = (BuildInfo) o;
    return Objects.equals(this.compiler, buildInfo.compiler) &&
        Objects.equals(this.compilerFlags, buildInfo.compilerFlags) &&
        Objects.equals(this.revision, buildInfo.revision) &&
        Objects.equals(this.targetArch, buildInfo.targetArch) &&
        Objects.equals(this.timestamp, buildInfo.timestamp) &&
        Objects.equals(this.version, buildInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compiler, compilerFlags, revision, targetArch, timestamp, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildInfo {\n");
    
    sb.append("    compiler: ").append(toIndentedString(compiler)).append("\n");
    sb.append("    compilerFlags: ").append(toIndentedString(compilerFlags)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    targetArch: ").append(toIndentedString(targetArch)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

<extensionManifest><groupId>org.apache.nifi</groupId><artifactId>nifi-groovyx-nar</artifactId><version>2.4.0</version><parentNar><groupId>org.apache.nifi</groupId><artifactId>nifi-standard-shared-nar</artifactId><version>2.4.0</version></parentNar><systemApiVersion>2.1.0</systemApiVersion><buildInfo><tag>HEAD</tag><branch>UNKNOWN</branch><revision>65c7732</revision></buildInfo><extensions><extension><name>org.apache.nifi.processors.groovyx.ExecuteGroovyScript</name><type>PROCESSOR</type><description>Experimental Extended Groovy script processor. The script is responsible for handling the incoming flow file (transfer to SUCCESS or remove, e.g.) as well as any flow files created by the script. If the handling is incomplete or incorrect, the session will be rolled back.</description><tags><tag>script</tag><tag>groovy</tag><tag>groovyx</tag></tags><properties><property><name>groovyx-script-file</name><displayName>Script File</displayName><description>Path to script file to execute. Only one of Script File or Script Body may be used</description><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>ENVIRONMENT</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic><resourceDefinition><cardinality>SINGLE</cardinality><resourceTypes><resourceType>FILE</resourceType></resourceTypes></resourceDefinition></property><property><name>groovyx-script-body</name><displayName>Script Body</displayName><description>Body of script to execute. Only one of Script File or Script Body may be used</description><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>groovyx-failure-strategy</name><displayName>Failure strategy</displayName><description>What to do with unhandled exceptions. If you want to manage exception by code then keep the default value `rollback`. If `transfer to failure` selected and unhandled exception occurred then all flowFiles received from incoming queues in this session will be transferred to `failure` relationship with additional attributes set: ERROR_MESSAGE and ERROR_STACKTRACE. If `rollback` selected and unhandled exception occurred then all flowFiles received from incoming queues will be penalized and returned. If the processor has no incoming connections then this parameter has no effect.</description><defaultValue>rollback</defaultValue><allowableValues><allowableValue><displayName>rollback</displayName><value>rollback</value><description></description></allowableValue><allowableValue><displayName>transfer to failure</displayName><value>transfer to failure</value><description></description></allowableValue></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>groovyx-additional-classpath</name><displayName>Additional classpath</displayName><description>Classpath list separated by semicolon or comma. You can use masks like `*`, `*.jar` in file name.</description><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>ENVIRONMENT</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property></properties><dynamicProperties><dynamicProperty><name>A script engine property to update</name><value>The value to set it to</value><description>Updates a script engine property specified by the Dynamic Property's key with the value specified by the Dynamic Property's value. Use `CTL.` to access any controller services, `SQL.` to access any DBCPServices, `RecordReader.` to access RecordReaderFactory instances, or `RecordWriter.` to access any RecordSetWriterFactory instances.</description><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope></dynamicProperty></dynamicProperties><relationships><relationship><name>failure</name><description>FlowFiles that failed to be processed</description><autoTerminated>false</autoTerminated></relationship><relationship><name>success</name><description>FlowFiles that were successfully processed</description><autoTerminated>false</autoTerminated></relationship></relationships><writesAttributes></writesAttributes><stateful><description>Scripts can store and retrieve state using the State Management APIs. Consult the State Manager section of the Developer's Guide for more details.</description><scopes><scope>LOCAL</scope><scope>CLUSTER</scope></scopes></stateful><restricted><restrictions><restriction><requiredPermission>execute code</requiredPermission><explanation>Provides operator the ability to execute arbitrary code assuming all permissions that NiFi has.</explanation></restriction></restrictions></restricted><inputRequirement>INPUT_ALLOWED</inputRequirement><seeAlso><see>org.apache.nifi.processors.script.ExecuteScript</see></seeAlso></extension></extensions></extensionManifest>